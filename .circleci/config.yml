version: "2.1"

aliases:

  - &CACHE_COMPOSER_KEY
    key: 'betav2-composer-deps-{{ .Environment.CIRCLE_JOB }}-{{ checksum "composer.json" }}'

  - &CACHE_NPM_KEY
    key: 'betav1-lint-deps-{{ checksum "composer.json" }}'

  - &IMAGE_DOCKER_DD_AGENT
    image: datadog/agent:latest
    environment:
      - DD_APM_ENABLED=true
      - DD_BIND_HOST=0.0.0.0
      - DD_API_KEY=invalid_key_but_this_is_fine

  - &IMAGE_DOCKER_REDIS
    image: datadog/dd-trace-ci:php-redis-5.0
    name: redis_integration

  - &IMAGE_DOCKER_ELASTICSEARCH2
    image: elasticsearch:2
    name: elasticsearch2_integration

  - &IMAGE_DOCKER_HTTPBIN
    image: kennethreitz/httpbin
    name: httpbin_integration

  - &IMAGE_DOCKER_MEMCHACED
    image: memcached:1.5-alpine
    name: memcached_integration

  - &IMAGE_DOCKER_MYSQL
    image: datadog/dd-trace-ci:php-mysql-dev-5.6
    name: mysql_integration
    environment:
      - MYSQL_ROOT_PASSWORD=test
      - MYSQL_PASSWORD=test
      - MYSQL_USER=test
      - MYSQL_DATABASE=test

  - &IMAGE_DOCKER_MONGO
    image: "circleci/mongo:4.0"
    name: mongodb_integration
    environment:
      - MONGO_INITDB_ROOT_USERNAME=test
      - MONGO_INITDB_ROOT_PASSWORD=test

  - &IMAGE_DOCKER_REQUEST_REPLAYER
    image: datadog/dd-trace-ci:php-request-replayer-1.0
    name: request-replayer
    environment:
      DD_REQUEST_DUMPER_FILE: dump.json

  - &STEP_ATTACH_WORKSPACE
    attach_workspace:
      at: ~/datadog

  - &STEP_EXT_INSTALL
    run:
      name: Build and install extension
      command: make sudo install install_ini BUILD_DIR=$(pwd)/tmp/build_extension

  - &STEP_COMPOSER_CACHE_RESTORE
    restore_cache:
      <<: *CACHE_COMPOSER_KEY

  - &STEP_COMPOSER_CACHE_SAVE
    save_cache:
      <<: *CACHE_COMPOSER_KEY
      paths:
        - ~/.composer/cache

  - &STEP_COMPOSER_DISABLE_TLS
    # Disabling TLS by default on 5.4 and 5.5 due to https://stackoverflow.com/questions/47527455/getting-an-error-peer-fingerprint-did-not-match-after-running-composer-update
    # Note `_generated.php` is built on 7.x and is not impacted
    run:
      name: Disable TLS to avoid composer flakiness (https://stackoverflow.com/questions/47527455/getting-an-error-peer-fingerprint-did-not-match-after-running-composer-update)
      command: |
        if [ "$(php -r 'echo PHP_VERSION_ID;')" -lt 50600 ]; then
          composer config disable-tls true
          composer --working-dir=tests config disable-tls true
          echo "Disabled TLS"
        else
          echo "TLS is enabled"
        fi

  - &STEP_COMPOSER_SELF_UPDATE
    run:
      name: Upgrading composer
      command: sudo composer self-update --no-interaction

  - &STEP_COMPOSER_UPDATE
    run:
      name: Installing dependencies with composer
      command: composer update --no-interaction

  - &STEP_COMPOSER_GENERATE
    run:
      name: Compiling dd-tace-php files into single file
      command: make generate

  - &STEP_COMPOSER_TESTS_UPDATE
    run:
      name: Updating tests' composer
      command: make composer_tests_update

  - &STEP_PREPARE_TEST_RESULTS_DIR
    run:
      name: testresults dir
      command: mkdir test-results

  - &STEP_EXPORT_CI_ENV
    run:
      name: export .env.circleci
      command: |
        echo "export $(cat .env.circleci | xargs)" >> $HOME/.profile

  - &STEP_DISABLE_XDEBUG
    run:
      name: Disable Xdebug for built-in web tests
      command: test -e /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini && sudo rm -f $_ || true

  - &STEP_WAIT_AGENT
    run:
      name: Waiting for Dockerized agent
      command: dockerize -wait tcp://127.0.0.1:8126 -timeout 1m && export

  - &STEP_WAIT_MYSQL
    run:
      name: Waiting for Dockerized MySQL
      command: dockerize -wait tcp://mysql_integration:3306 -timeout 1m

  - &STEP_WAIT_REQUEST_REPLAYER
    run:
      name: Waiting for Dockerized request replayer
      command: dockerize -wait tcp://request-replayer:80/clear-dumped-data -timeout 2m

  - &STEP_PERSIST_TO_WORKSPACE
    persist_to_workspace:
      root: '.'
      paths:
      - tmp/build_extension

  - &STEP_STORE_TEST_RESULTS
    store_test_results:
      path: test-results

commands:
  lib_curl_workaround:
    parameters:
      command:
        type: string
        default: none
    steps:
      - run:
          name: Installing missing libcurl workaround
          command: |
              if [[ ! "<<parameters.command>>" == "none" ]]; then
                << parameters.command >>
              fi;
  switch_php:
    parameters:
      php_version:
        type: string
        default: none
    steps:
      - run:
          name: Switch PHP version
          command: |
            if [[ ! "<<parameters.php_version>>" == "none" ]]; then
              switch-php << parameters.php_version >>
            fi;
  install_extension:
    parameters:
      lib_curl_command:
        type: string
        default: none
    steps:
      - lib_curl_workaround:
          command: << parameters.lib_curl_command >>
      - <<: *STEP_EXT_INSTALL

  copy_valgrind_rc:
    parameters:
      valgrind_config:
        type: string
        default: ""
    steps:
      - run:
          name: Copy valgrind.rc configuration and suppressions
          command: |
            if [ -e ".circleci/valgrind/<< parameters.valgrind_config >>_valgrind.rc" ]; then
              cp .circleci/valgrind/<< parameters.valgrind_config >>_valgrind.rc /home/circleci/.valgrindrc
              cp .circleci/valgrind/valgrind_<< parameters.valgrind_config >>_suppressions.lib /home/circleci/valgrind_<< parameters.valgrind_config >>_suppressions.lib
            fi
  prepare_extension_and_composer_with_cache:
    steps:
      - <<: *STEP_EXT_INSTALL
      - <<: *STEP_COMPOSER_DISABLE_TLS
      - <<: *STEP_COMPOSER_CACHE_RESTORE
      - <<: *STEP_COMPOSER_UPDATE
      - <<: *STEP_COMPOSER_CACHE_SAVE

executors:
  with_agent:
    environment:
      DDAGENT_HOSTNAME: 127.0.0.1
    parameters:
      docker_image:
        type: string
    docker:
      - image: << parameters.docker_image >>
      - <<: *IMAGE_DOCKER_DD_AGENT
  with_httpbin_and_request_replayer:
    environment:
      DDAGENT_HOSTNAME: 127.0.0.1
    parameters:
      docker_image:
        type: string
    docker:
      - image: << parameters.docker_image >>
      - <<: *IMAGE_DOCKER_DD_AGENT
      - <<: *IMAGE_DOCKER_HTTPBIN
      - <<: *IMAGE_DOCKER_REQUEST_REPLAYER
  with_integrations:
    environment:
      DDAGENT_HOSTNAME: 127.0.0.1
      COMPOSER_MEMORY_LIMIT: -1 # disable composer memory limit completely
    parameters:
      docker_image:
        type: string
    docker:
      - image: << parameters.docker_image >>
      - <<: *IMAGE_DOCKER_DD_AGENT
      - <<: *IMAGE_DOCKER_ELASTICSEARCH2
      - <<: *IMAGE_DOCKER_HTTPBIN
      - <<: *IMAGE_DOCKER_REDIS
      - <<: *IMAGE_DOCKER_MEMCHACED
      - <<: *IMAGE_DOCKER_MYSQL
      - <<: *IMAGE_DOCKER_MONGO
      - <<: *IMAGE_DOCKER_REQUEST_REPLAYER

jobs:
  "Lint files":
    working_directory: ~/datadog
    docker:
      - image: circleci/php:7.2-cli-node-browsers
    steps:
      - <<: *STEP_ATTACH_WORKSPACE
      - lib_curl_workaround:
          command: sudo apt update; sudo apt -y install libcurl4-nss-dev
      - prepare_extension_and_composer_with_cache
      - restore_cache:
          <<: *CACHE_NPM_KEY
      - run:
          name: Installing dependencies with npm
          command: npm install eclint --no-package-lock --no-save
      - save_cache:
          <<: *CACHE_NPM_KEY
          paths:
          - node_modules/
      - run:
          name: Creating directory for phpcs results
          command: mkdir -p test-results/phpcs
      - run:
          name: Running eclint
          command: node_modules/.bin/eclint check '**/*' '!dockerfiles/**/*' '!tests/ext/sandbox/**' '!tests/ext/sandbox-prehook/*' '!tests/ext/background-sender/**/*' '!config.*' '!m4/*' '!tmp/**/*' '!vendor/**/*' '!ext/vendor/**/*' '!ext/.libs/*' '!src/dogstatsd/**' '!LICENSE' '!phpstan.*.neon' '!tests/overhead/**' '!tests/Frameworks/*/Version_*/**' '!tests/dockerfiles/**' '!tests/AutoInstrumentation/**' '!.composer/**/*' '!LICENSE.*' '!tooling/*' '!tests/randomized/**' '!**/tests/stubs/**' '!**/CMakeLists.txt' || touch .failure
      - run:
          name: Running phpcs
          command: composer lint -- --report=junit | tee test-results/phpcs/results.xml || touch .failure
      - run:
          name: Install Clang
          command: |
              wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
              (
                echo "deb http://apt.llvm.org/buster/ llvm-toolchain-buster-12 main"
                echo "deb-src http://apt.llvm.org/buster/ llvm-toolchain-buster-12 main"
              ) | sudo tee /etc/apt/sources.list.d/llvm-toolchain.list
              sudo apt-get update
              sudo apt-get -y install clang-format
      - run:
          name: Run clang-format
          command: make clang_format_check CLANG_FORMAT=clang-format
      - run:
          name: Check linting failure
          command: test -e .failure && exit 1 || true
      - run:
          name: Verify PECL config and Version files
          command: make verify_all
      - <<: *STEP_STORE_TEST_RESULTS

  static_analysis:
    parameters:
      docker_image:
        type: string
        default: ""
      scenario:
        type: string
        default: ""
    working_directory: ~/datadog
    docker:
      - image: << parameters.docker_image >>
    steps:
      - <<: *STEP_ATTACH_WORKSPACE
      - lib_curl_workaround:
          command: sudo apt update; sudo apt -y install libcurl4-nss-dev
      - prepare_extension_and_composer_with_cache
      - run:
          name: Install phpstan
          command: |
            composer global require phpstan/phpstan:0.12.*
            composer global require psr/log
            composer scenario:update
      - run:
          name: Running phpstan
          command: composer scenario << parameters.scenario >> ; PATH=$PATH:~/.composer/vendor/bin composer static-analyze

  "Post-Install Hook":
    working_directory: ~/datadog
    docker:
      - image: datadog/dd-trace-ci:php-nginx-apache2
    steps:
      - <<: *STEP_ATTACH_WORKSPACE
      - run:
          name: Start Supervisor
          command: supervisord
          background: true
      - run:
          name: Copy post-install script
          command: |
              mkdir -p /src/ddtrace-scripts
              cp package/post-install.sh /src/ddtrace-scripts
      - run:
          name: Test post-install hook
          command: bash tests/PostInstallHook/run-tests.sh

  opcache_tests:
    parameters:
      docker_image:
        type: string
    working_directory: ~/datadog
    executor:
      name: with_agent
      docker_image: << parameters.docker_image >>
    steps:
      - <<: *STEP_ATTACH_WORKSPACE
      - <<: *STEP_EXT_INSTALL
      - <<: *STEP_EXPORT_CI_ENV
      - <<: *STEP_PREPARE_TEST_RESULTS_DIR
      - run:
          name: Run opcache tests
          command: |
            export REPORT_EXIT_STATUS=1
            cd tmp/build_extension
            php run-tests.php -p $(which php) --show-all -d zend_extension=opcache.so ../../tests/opcache

  xdebug_tests:
    parameters:
      docker_image:
        type: string
      xdebug_version_one:
        type: string
      xdebug_version_two:
        type: string
        default: none
    working_directory: ~/datadog
    executor:
      name: with_agent
      docker_image: << parameters.docker_image >>
    steps:
      - <<: *STEP_ATTACH_WORKSPACE
      - <<: *STEP_EXT_INSTALL
      - <<: *STEP_EXPORT_CI_ENV
      - <<: *STEP_PREPARE_TEST_RESULTS_DIR
      - run:
          name: Run xdebug tests
          command: |
            export REPORT_EXIT_STATUS=1
            cd tmp/build_extension
            php run-tests.php -p $(which php) --show-all -d zend_extension=xdebug-<< parameters.xdebug_version_one >>.so ../../tests/xdebug/<< parameters.xdebug_version_one >>
            if [[ ! "<<parameters.xdebug_version_two>>" == "none" ]]; then
              php run-tests.php -p $(which php) --show-all -d zend_extension=xdebug-<< parameters.xdebug_version_two >>.so ../../tests/xdebug/<< parameters.xdebug_version_two >>
            fi;

  test: &TEST_BASE
    parameters:
      php_major_minor:
        # Expected in the format: <major>.<minor>, e.g. 5.6
        type: string
      make_target:
        type: string
      switch_php_version:
        type: string
        default: none
    working_directory: ~/datadog
    environment:
      DDAGENT_HOSTNAME: 127.0.0.1
      DD_AGENT_HOST: 127.0.0.1
      HTTPBIN_HOSTNAME: httpbin_integration
      DATADOG_HAVE_DEV_ENV: 1
    executor:
      name: with_httpbin_and_request_replayer
      docker_image: datadog/dd-trace-ci:php-<< parameters.php_major_minor >>_buster
    steps:
      - <<: *STEP_ATTACH_WORKSPACE
      - switch_php:
          php_version: << parameters.switch_php_version >>
      - prepare_extension_and_composer_with_cache
      - <<: *STEP_COMPOSER_TESTS_UPDATE
      - <<: *STEP_PREPARE_TEST_RESULTS_DIR
      - <<: *STEP_EXPORT_CI_ENV
      - <<: *STEP_WAIT_REQUEST_REPLAYER
      - run:
          name: Run tests
          command: make << parameters.make_target >> PHPUNIT_OPTS="--log-junit test-results/php-unit/results.xml"
      - <<: *STEP_PERSIST_TO_WORKSPACE
      - <<: *STEP_STORE_TEST_RESULTS
      - run:
          command: |
            mkdir -p /tmp/artifacts/core_dumps
            find tmp -name "core.*" | xargs -I % -n 1 cp % /tmp/artifacts/core_dumps
            cp -a tmp/build_extension/tests/ext /tmp/artifacts/tests
          when: on_fail
      - store_artifacts:
          path: /tmp/artifacts

  asan: *TEST_BASE

  integration:
    working_directory: ~/datadog
    parameters:
      php_major_minor:
        # Expected in the format: <major>.<minor>, e.g. 5.6
        type: string
      make_target:
        type: string
      switch_php_version:
        type: string
        default: none
      resource_class:
        type: string
        default: medium
      sapi:
        type: string
        default: cli-server
      disable_runner_distributed_tracing:
        type: boolean
        default: false
    resource_class: << parameters.resource_class >>
    executor:
      name: with_integrations
      docker_image: datadog/dd-trace-ci:php-<< parameters.php_major_minor >>_buster
    environment:
      COMPOSER_PROCESS_TIMEOUT: 0
    steps:
      - <<: *STEP_ATTACH_WORKSPACE
      - switch_php:
          php_version: << parameters.switch_php_version >>
      - install_extension
      - <<: *STEP_COMPOSER_CACHE_RESTORE
      - <<: *STEP_COMPOSER_DISABLE_TLS
      - <<: *STEP_COMPOSER_UPDATE
      - <<: *STEP_COMPOSER_TESTS_UPDATE
      - <<: *STEP_PREPARE_TEST_RESULTS_DIR
      - <<: *STEP_EXPORT_CI_ENV
      - <<: *STEP_DISABLE_XDEBUG
      - <<: *STEP_WAIT_AGENT
      - <<: *STEP_WAIT_MYSQL
      - <<: *STEP_WAIT_REQUEST_REPLAYER
      - run:
          name: Run tests
          command: DD_TRACE_AGENT_TIMEOUT=1000 <<# parameters.disable_runner_distributed_tracing >> DD_DISTRIBUTED_TRACING=false <</ parameters.disable_runner_distributed_tracing >> DD_TRACE_TEST_SAPI=<< parameters.sapi >> make << parameters.make_target >> PHPUNIT_OPTS="--log-junit test-results/php-composer/results.xml"
      - run:
          command: |
            mkdir -p /tmp/artifacts
            find ~/datadog/tests -type f -name 'phpunit_error.log' -o -name 'nginx_*.log' -o -name 'php_fpm_*.log' -o -name 'dd_php_error.log' -exec cp --parents '{}' /tmp/artifacts \;
          when: on_fail
      - store_artifacts:
          path: /tmp/artifacts/
      - <<: *STEP_COMPOSER_CACHE_SAVE
      - <<: *STEP_PERSIST_TO_WORKSPACE
      - <<: *STEP_STORE_TEST_RESULTS

  php_language_tests:
    parameters:
      docker_image:
        type: string
      xfail_list:
        type: string
        default: none
    working_directory: ~/datadog
    environment:
      DDAGENT_HOSTNAME: 127.0.0.1
      DD_AGENT_HOST: 127.0.0.1
    executor:
      name: with_agent
      docker_image: << parameters.docker_image >>
    steps:
      - <<: *STEP_ATTACH_WORKSPACE
      - prepare_extension_and_composer_with_cache
      - <<: *STEP_PREPARE_TEST_RESULTS_DIR
      - <<: *STEP_EXPORT_CI_ENV
      - run:
          name: Run tests
          command: |
            sudo rm -f /opt/php/debug/conf.d/memcached.ini
            if [[ ! "<<parameters.xfail_list>>" == "none" ]]; then
              cp "<<parameters.xfail_list>>" /usr/local/src/php/xfail_tests.list
              (
                cd /usr/local/src/php
                cat xfail_tests.list | xargs -n 1 rm -f || true
              )
            fi
            cd /usr/local/src/php
            export DD_TRACE_CLI_ENABLED=true
            export DD_TRACE_STARTUP_LOGS=0
            export DD_TRACE_WARN_CALL_STACK_DEPTH=0
            export DD_TRACE_WARN_LEGACY_DD_TRACE=0
            export REPORT_EXIT_STATUS=1
            export TEST_PHP_JUNIT=/tmp/artifacts/tests/php-tests.xml
            mkdir -p /tmp/artifacts/tests
            php run-tests.php -q \
              -p /usr/local/bin/php \
              --show-diff \
              -d ddtrace.request_init_hook=/home/circleci/datadog/bridge/dd_wrap_autoloader.php
      - run:
          command: |
            cd /usr/local/src/php
            mkdir -p /tmp/artifacts/core_dumps
            find ./ -name "core.*" | xargs -I % -n 1 cp % /tmp/artifacts/core_dumps
            mkdir -p /tmp/artifacts/diffs
            find -type f -name '*.diff' -exec cp --parents '{}' /tmp/artifacts/diffs \;
          when: on_fail
      - store_test_results:
          path: /tmp/artifacts/tests/
      - store_artifacts:
          path: /tmp/artifacts/

  integration_tests:
    working_directory: ~/datadog
    parameters:
      docker_image:
        type: string
      integration_testsuite:
        type: string
      lib_curl_command:
        type: string
        default: none
      switch_php_version:
        type: string
        default: none
      resource_class:
        type: string
        default: medium
      sapi:
        type: string
        default: cli-server
      disable_runner_distributed_tracing:
        type: boolean
        default: false
    resource_class: << parameters.resource_class >>
    executor:
      name: with_integrations
      docker_image: << parameters.docker_image >>
    environment:
      COMPOSER_PROCESS_TIMEOUT: 0
    steps:
      - <<: *STEP_ATTACH_WORKSPACE
      - switch_php:
          php_version: << parameters.switch_php_version >>
      - install_extension:
          lib_curl_command: << parameters.lib_curl_command >>
      - <<: *STEP_COMPOSER_CACHE_RESTORE
      - <<: *STEP_COMPOSER_UPDATE
      - <<: *STEP_COMPOSER_TESTS_UPDATE
      - <<: *STEP_EXPORT_CI_ENV
      - <<: *STEP_DISABLE_XDEBUG
      - <<: *STEP_WAIT_AGENT
      - <<: *STEP_WAIT_MYSQL
      - <<: *STEP_WAIT_REQUEST_REPLAYER
      - run:
          name: Run << parameters.integration_testsuite >> integration test
          command: DD_TRACE_AGENT_TIMEOUT=1000 <<# parameters.disable_runner_distributed_tracing >> DD_DISTRIBUTED_TRACING=false <</ parameters.disable_runner_distributed_tracing >> DD_TRACE_TEST_SAPI=<< parameters.sapi >> make << parameters.integration_testsuite >>
      - run:
          command: |
            mkdir -p /tmp/artifacts
            find ~/datadog/tests -type f -name 'phpunit_error.log' -o -name 'nginx_*.log' -o -name 'php_fpm_*.log' -o -name 'dd_php_error.log' -exec cp --parents '{}' /tmp/artifacts \;
          when: on_fail
      - store_artifacts:
          path: /tmp/artifacts/
      - <<: *STEP_COMPOSER_CACHE_SAVE
      - <<: *STEP_PERSIST_TO_WORKSPACE

  internal_integrations:
    parameters:
      docker_image:
        type: string
      switch_php_version:
        type: string
        default: none
      ext_name:
        type: string
    working_directory: ~/datadog
    environment:
      DDAGENT_HOSTNAME: 127.0.0.1
      DD_AGENT_HOST: 127.0.0.1
      HTTPBIN_HOSTNAME: httpbin_integration
      DATADOG_HAVE_DEV_ENV: 1
    executor:
      name: with_httpbin_and_request_replayer
      docker_image: << parameters.docker_image >>
    steps:
      - <<: *STEP_ATTACH_WORKSPACE
      - switch_php:
          php_version: << parameters.switch_php_version >>
      - <<: *STEP_PREPARE_TEST_RESULTS_DIR
      - <<: *STEP_EXPORT_CI_ENV
      - <<: *STEP_WAIT_REQUEST_REPLAYER
      - run:
          name: Ensure ext/<< parameters.ext_name >> is missing
          command: |
            if php --ri=<< parameters.ext_name >> &> /dev/null
            then
              echo 'ext/<< parameters.ext_name >> is enabled but should not be installed'
              exit 1
            fi
      - run:
          name: Run << parameters.ext_name >> integration tests with ext/<< parameters.ext_name >> as shared lib + leak detection
          command: make test_extension_ci BUILD_DIR=$(pwd)/tmp/build_extension JUNIT_RESULTS_DIR=$(pwd)/test-results TESTS='-d extension=<< parameters.ext_name >>.so ./tests/ext/integrations/<< parameters.ext_name >>'
      - <<: *STEP_STORE_TEST_RESULTS
      - run:
          command: |
            mkdir -p /tmp/artifacts/core_dumps
            find tmp -name "core.*" | xargs -I % -n 1 cp % /tmp/artifacts/core_dumps
            cp -a tmp/build_extension/tests/ext /tmp/artifacts/tests
          when: on_fail
      - store_artifacts:
          path: /tmp/artifacts

  min_install_tests:
    parameters:
      php_version:
        type: string
    working_directory: ~/datadog
    environment:
      DDAGENT_HOSTNAME: 127.0.0.1
      DD_AGENT_HOST: 127.0.0.1
      HTTPBIN_HOSTNAME: httpbin_integration
      DATADOG_HAVE_DEV_ENV: 1
    executor:
      name: with_httpbin_and_request_replayer
      docker_image: datadog/dd-trace-ci:php-<< parameters.php_version >>-shared-ext
    steps:
      - <<: *STEP_ATTACH_WORKSPACE
      - <<: *STEP_PREPARE_TEST_RESULTS_DIR
      - <<: *STEP_EXPORT_CI_ENV
      - <<: *STEP_WAIT_REQUEST_REPLAYER
      - run:
          name: Install .deb from artifacts
          command: |
            sudo dpkg -i ./build/packages/*.deb
            php --ri=ddtrace
      - run:
          name: Run phpt tests against shippable package
          command: |
            switch-php debug
            export DDTRACE_PKG_SO="/opt/datadog-php/extensions/ddtrace-$(php -i | awk '/^PHP[ \t]+API[ \t]+=>/ { print $NF }')-debug.so"
            make run_tests TESTS="-d 'extension=$DDTRACE_PKG_SO'"
      - run:
          name: Run phpt tests against build from source
          command: |
            make test_c
      - <<: *STEP_STORE_TEST_RESULTS
      - run:
          command: |
            mkdir -p /tmp/artifacts/core_dumps
            find tmp -name "core.*" | xargs -I % -n 1 cp % /tmp/artifacts/core_dumps
            cp -a tmp/build_extension/tests/ext /tmp/artifacts/tests
          when: on_fail
      - store_artifacts:
          path: /tmp/artifacts

  framework_tests:
    working_directory: ~/datadog
    parameters:
      framework_target:
        type: string
        default: all
    executor:
      name: with_agent
      docker_image: circleci/php:7.3
    steps:
      - <<: *STEP_ATTACH_WORKSPACE
      - setup_remote_docker
      - run: make -f dockerfiles/frameworks/Makefile << parameters.framework_target >>

  verify_package:
    working_directory: ~/datadog
    parameters:
      docker_image:
        type: string
      package_type:
        type: string
    docker: [ image: << parameters.docker_image >> ]
    steps:
      - <<: *STEP_ATTACH_WORKSPACE
      - run: sh dockerfiles/verify_packages/verify_<< parameters.package_type >>.sh

  verify_alpine:
    working_directory: ~/datadog
    parameters:
      docker_image:
        type: string
      php_package:
        type: string
    docker:
      - image: << parameters.docker_image >>
        environment:
          PHP_PACKAGE: << parameters.php_package >>
          OS_NAME: alpine
          DD_AGENT_HOST: request-replayer
          DD_TRACE_AGENT_PORT: 80
          DD_TRACE_AGENT_FLUSH_INTERVAL: 1000
          VERIFY_APACHE: 'no'
      - <<: *IMAGE_DOCKER_REQUEST_REPLAYER
    steps:
      - run:
          # see https://support.circleci.com/hc/en-us/articles/360016505753-Resolve-Certificate-Signed-By-Unknown-Authority-error-in-Alpine-images?flash_digest=39b76521a337cecacac0cc10cb28f3747bb5fc6a
          name: Install ca-certificates
          command: apk add --no-cache ca-certificates
      - <<: *STEP_ATTACH_WORKSPACE
      - run:
          name: Validate alpine package
          command: ./dockerfiles/verify_packages/verify.sh

  verify_centos:
    working_directory: ~/datadog
    parameters:
      docker_image:
        type: string
      configuration:
        type: string
      php_package:
        type: string
        default: ""
    docker:
      - image: << parameters.docker_image >>
        environment:
          PHP_PACKAGE: << parameters.php_package >>
          DD_AGENT_HOST: request-replayer
          DD_TRACE_AGENT_PORT: 80
          DD_TRACE_AGENT_FLUSH_INTERVAL: 1000
      - <<: *IMAGE_DOCKER_REQUEST_REPLAYER
    steps:
      - <<: *STEP_ATTACH_WORKSPACE
      - run:
          name: Validate centos package
          command: << parameters.configuration >> ./dockerfiles/verify_packages/verify.sh

  verify_centos_6:
    working_directory: ~/datadog
    machine:
      image: circleci/classic:latest
    steps:
      - <<: *STEP_ATTACH_WORKSPACE
      - run: mkdir -p test-results
      - run:
          name: Test installing packages on target systems
          command: make -f dockerfiles/verify_packages/Makefile docker_compose_pull verify_centos_6
      - store_test_results:
          path: test-results

  verify_debian:
    working_directory: ~/datadog
    parameters:
      docker_image:
        type: string
      install_mode:
        type: string
      verify_apache:
        # yes|no
        type: string
        default: "yes"
      configuration:
        type: string
    docker:
      - image: << parameters.docker_image >>
        environment:
          DD_AGENT_HOST: request-replayer
          DD_TRACE_AGENT_PORT: 80
          DD_TRACE_AGENT_FLUSH_INTERVAL: 1000
          VERIFY_APACHE: << parameters.verify_apache >>
          INSTALL_MODE: << parameters.install_mode >>
      - <<: *IMAGE_DOCKER_REQUEST_REPLAYER
    steps:
      - <<: *STEP_ATTACH_WORKSPACE
      - run:
          name: Validate debian package
          command: << parameters.configuration >> bash ./dockerfiles/verify_packages/verify.sh

  randomized_tests:
    working_directory: ~/datadog
    machine:
      image: ubuntu-2004:202010-01
    resource_class: xlarge
    parameters:
      batch:
        # Batch is only used to run a number of this jobs in parallel via a testing matrix.
        type: integer
    steps:
      - <<: *STEP_ATTACH_WORKSPACE
      - run:
          name: Install required packages
          command: sudo apt update && sudo apt install -y php git
      - run:
          name: "Increase virtual memory limit for elasticsearch"
          command: sudo sysctl -w vm.max_map_count=262144
      - run:
          name: Copy tracer package
          command: make -C tests/randomized tracer.local
      - run:
          name: Pull docker images
          command: make -C tests/randomized pull
      - run:
          name: Generate scenarios
          command: make -C tests/randomized generate
      - run:
          name: Execute tests
          command: make -C tests/randomized test CONCURRENT_JOBS=5 DURATION=1m30s
      - run:
          name: Analyze results
          command: make -C tests/randomized analyze
      - run:
          name: Fix PHP-FPM logs permissions before storing artifacts
          command: sudo chmod -R a+r tests/randomized/.tmp.scenarios/.results
      - store_artifacts:
          path: 'tests/randomized/.tmp.scenarios/.results'

  pecl_build:
    working_directory: ~/datadog
    executor:
      name: with_agent
      docker_image: "datadog/dd-trace-ci:php-7.4_buster"
    steps:
      - <<: *STEP_ATTACH_WORKSPACE
      - run:
          name: Make PECL build
          command: |
            tooling/bin/pecl-build
            mkdir -p ./pecl && cp datadog_trace-*.tgz ./pecl
      #- store_artifacts:
      #    path: pecl
      - persist_to_workspace:
          root: .
          paths: [pecl]

  pecl_tests:
    parameters:
      docker_image:
        type: string
      showdiff:
        type: boolean
        default: true
    working_directory: ~/datadog
    executor:
      name: with_httpbin_and_request_replayer
      docker_image: << parameters.docker_image >>
    steps:
      - <<: *STEP_ATTACH_WORKSPACE
      - run:
          name: Install from PECL build
          command: |
            cp ./pecl/datadog_trace-*.tgz ./datadog_trace.tgz
            sudo pecl install datadog_trace.tgz
            echo "extension=ddtrace.so" | sudo tee $(php -i | awk -F"=> " '/Scan this dir for additional .ini files/ {print $2}')/ddtrace.ini
            php --ri=ddtrace
      - <<: *STEP_WAIT_REQUEST_REPLAYER
      - run:
          name: Run phpt tests with PECL
          command: |
            sudo \
            TERM=dumb \
            HTTPBIN_HOSTNAME=httpbin_integration \
            DATADOG_HAVE_DEV_ENV=1 \
            pecl run-tests <<# parameters.showdiff >> --showdiff <</ parameters.showdiff >> --ini=" -d ddtrace.request_init_hook=" -p datadog_trace
      - run:
          name: Gather .diff files for artifacts
          command: |
            mkdir -p /tmp/artifacts
            find $(pecl config-get test_dir) -type f -name '*.diff' -exec cp --parents '{}' /tmp/artifacts \;
          when: on_fail
      - store_artifacts: { path: '/tmp/artifacts' }

  ExtensionComponents:
    working_directory: ~/datadog
    parameters:
      docker_image:
        type: string
      cmake_version:
        type: string
      catch2_version:
        type: string
    docker:
      - image: << parameters.docker_image >>
    steps:
      - <<: *STEP_ATTACH_WORKSPACE
      - run:
          name: Install cmake << parameters.cmake_version >>
          command: |
            if [ -d "/opt/cmake/<< parameters.cmake_version >>" ]
            then
              echo 'cmake << parameters.cmake_version >> already installed'
              exit 0
            fi
            if [ -e /etc/alpine-release ]
            then
              # We build from source on Alpine (slow)
              mkdir -p /tmp/cmake /opt/cmake/<< parameters.cmake_version >>
              cd /tmp/cmake
              curl -OL https://github.com/Kitware/CMake/releases/download/v<< parameters.cmake_version >>/cmake-<< parameters.cmake_version >>.tar.gz
              tar -xf *.tar.gz --strip 1
              ./bootstrap --prefix=/opt/cmake/<< parameters.cmake_version >> --parallel=2 && make -j 2 && make install
            else
              # We use prebuilt Linux packages everywhere else (fast)
              cd /tmp && curl -OL https://github.com/Kitware/CMake/releases/download/v<< parameters.cmake_version >>/cmake-<< parameters.cmake_version >>-Linux-x86_64.tar.gz
              mkdir -p /opt/cmake/<< parameters.cmake_version >>
              cd /opt/cmake/<< parameters.cmake_version >> && tar -xf /tmp/cmake-<< parameters.cmake_version >>-Linux-x86_64.tar.gz --strip 1
            fi

      - run:
          name: Install Catch2
          command: |
            if [ -d "/opt/catch2" ]
            then
              echo 'catch2 already installed'
              exit 0
            fi
            export PATH="/opt/cmake/<< parameters.cmake_version >>/bin:$PATH"
            cd /tmp
            curl -OL https://github.com/catchorg/Catch2/archive/v<< parameters.catch2_version >>.tar.gz
            mkdir catch2
            cd catch2
            tar -xf ../v<< parameters.catch2_version >>.tar.gz --strip 1
            cmake -Bbuild -H. -DBUILD_TESTING=OFF -DCMAKE_INSTALL_PREFIX=/opt/catch2
            cmake --build build/ --target install
      - run:
          name: Build and test Datadog::Arena
          command: |
            export PATH="/opt/cmake/<< parameters.cmake_version >>/bin:$PATH"
            mkdir -p /tmp/build/DatadogArena
            cd /tmp/build/DatadogArena
            if [ -f "/etc/debian_version" ]
            then
              toolchain="-DCMAKE_TOOLCHAIN_FILE=~/datadog/cmake/asan.cmake"
            fi
            CMAKE_PREFIX_PATH=/opt/catch2 cmake \
              $toolchain \
              -DCMAKE_BUILD_TYPE=Debug \
              -DBUILD_TESTING=ON \
              ~/datadog/ext/DatadogArena
            make -j
            make test
      - run:
          name: Build and test Datadog::MemHash
          command: |
            export PATH="/opt/cmake/<< parameters.cmake_version >>/bin:$PATH"
            mkdir -p /tmp/build/DatadogMemHash
            cd /tmp/build/DatadogMemHash
            if [ -f "/etc/debian_version" ]
            then
              toolchain="-DCMAKE_TOOLCHAIN_FILE=~/datadog/cmake/asan.cmake"
            fi
            CMAKE_PREFIX_PATH=/opt/catch2 cmake \
              $toolchain \
              -DCMAKE_BUILD_TYPE=Debug \
              -DBUILD_TESTING=ON \
              ~/datadog/ext/DatadogMemHash
            make -j
            make test

      - run:
          name: Build and test Datadog::Php::Components (ASan)
          command: |
            export PATH="/opt/cmake/<< parameters.cmake_version >>/bin:$PATH"
            mkdir -p /tmp/build/datadog_php_components_asan
            cd /tmp/build/datadog_php_components_asan
            if [ -f "/etc/debian_version" ]
            then
              toolchain="-DCMAKE_TOOLCHAIN_FILE=~/datadog/cmake/asan.cmake"
            fi
            CMAKE_PREFIX_PATH=/opt/catch2 cmake \
              $toolchain \
              -DCMAKE_BUILD_TYPE=Debug \
              -DBUILD_COMPONENTS_TESTING=ON \
              ~/datadog/components
            make -j all
            make test

      - run:
          name: Build and test Datadog::Php::Components (UBSan)
          command: |
            if [ ! -f "/etc/debian_version" ]
            then
              echo 'UBSan only supported on Buster for now'
              exit 0
            fi
            export PATH="/opt/cmake/<< parameters.cmake_version >>/bin:$PATH"
            mkdir -p /tmp/build/datadog_php_components_ubsan
            cd /tmp/build/datadog_php_components_ubsan
            CMAKE_PREFIX_PATH=/opt/catch2 cmake \
              -DCMAKE_TOOLCHAIN_FILE=~/datadog/cmake/ubsan.cmake \
              -DCMAKE_BUILD_TYPE=Debug \
              -DBUILD_COMPONENTS_TESTING=ON \
              ~/datadog/components
            make -j all
            make test

      - run:
          command: |
            mkdir -p /tmp/artifacts
            cp /tmp/build/datadog_php_components_asan/Testing/Temporary/LastTest.log /tmp/artifacts/LastTestASan.log
            cp /tmp/build/datadog_php_components_ubsan/Testing/Temporary/LastTest.log /tmp/artifacts/LastTestUBSan.log
          when: on_fail
      - store_artifacts:
          path: /tmp/artifacts

  Zai:
    working_directory: ~/datadog
    parameters:
      os:
        type: string
      php_version:
        type: string
      cmake_version:
        type: string
      catch2_version:
        type: string
    docker:
      - image: datadog/dd-trace-ci:php-<< parameters.php_version >>_<< parameters.os >>
    steps:
      - <<: *STEP_ATTACH_WORKSPACE
      - run:
          name: Install cmake << parameters.cmake_version >>
          command: |
            if [ -d "/opt/cmake/<< parameters.cmake_version >>" ]
            then
              echo 'cmake << parameters.cmake_version >> already installed'
              exit 0
            fi
            cd /tmp && curl -OL https://github.com/Kitware/CMake/releases/download/v<< parameters.cmake_version >>/cmake-<< parameters.cmake_version >>-Linux-x86_64.tar.gz
            sudo mkdir -p /opt/cmake/<< parameters.cmake_version >>
            cd /opt/cmake/<< parameters.cmake_version >> && sudo tar -xf /tmp/cmake-<< parameters.cmake_version >>-Linux-x86_64.tar.gz --strip 1
      - run:
          name: Install Catch2
          command: |
            if [ -d "/opt/catch2" ]
            then
              echo 'catch2 already installed'
              exit 0
            fi
            export PATH="/opt/cmake/<< parameters.cmake_version >>/bin:$PATH"
            cd /tmp
            curl -OL https://github.com/catchorg/Catch2/archive/v<< parameters.catch2_version >>.tar.gz
            mkdir catch2
            cd catch2
            tar -xf ../v<< parameters.catch2_version >>.tar.gz --strip 1
            cmake -Bbuild -H. -DBUILD_TESTING=OFF -DCMAKE_INSTALL_PREFIX=/opt/catch2
            cmake --build build/ --target install

      # Builds that support ASan
      - when:
          condition:
            or:
              - equal: [ "7.4", << parameters.php_version >> ]
              - equal: [ "8.0", << parameters.php_version >> ]
          steps:
            - run:
                name: Build and test Zend Abstract Interface (nts, debug, debug-zts-asan)
                command: |
                  export PATH="/opt/cmake/<< parameters.cmake_version >>/bin:$PATH"
                  for phpBuild in nts debug debug-zts-asan
                  do
                    switch-php ${phpBuild}
                    mkdir -p /tmp/build/zai-${phpBuild}
                    cd /tmp/build/zai-${phpBuild}
                    toolchain=""
                    if [ "${phpBuild}" = "debug-zts-asan" ]
                    then
                      toolchain="-DCMAKE_TOOLCHAIN_FILE=~/datadog/cmake/asan.cmake"
                    fi
                    CMAKE_PREFIX_PATH=/opt/catch2 cmake \
                      ${toolchain} \
                      -DCMAKE_BUILD_TYPE=Debug \
                      -DBUILD_ZAI_TESTING=ON \
                      -DPHP_CONFIG=$(which php-config) \
                      ~/datadog/zend_abstract_interface
                    make -j all
                    make test
                    grep -e "=== Total .* memory leaks detected ===" Testing/Temporary/LastTest.log && exit 1 || true
                  done

      # Builds that do not support ASan
      - when:
          condition:
            or:
              - equal: [ "5.4", << parameters.php_version >> ]
              - equal: [ "5.5", << parameters.php_version >> ]
              - equal: [ "5.6", << parameters.php_version >> ]
              - equal: [ "7.0", << parameters.php_version >> ]
              - equal: [ "7.1", << parameters.php_version >> ]
              - equal: [ "7.2", << parameters.php_version >> ]
              - equal: [ "7.3", << parameters.php_version >> ]
          steps:
            - run:
                name: Build and test Zend Abstract Interface (nts, debug, debug-zts)
                command: |
                  export PATH="/opt/cmake/<< parameters.cmake_version >>/bin:$PATH"
                  for phpBuild in nts debug debug-zts
                  do
                    switch-php ${phpBuild}
                    mkdir -p /tmp/build/zai-${phpBuild}
                    cd /tmp/build/zai-${phpBuild}
                    CMAKE_PREFIX_PATH=/opt/catch2 cmake \
                      -DCMAKE_BUILD_TYPE=Debug \
                      -DBUILD_ZAI_TESTING=ON \
                      -DPHP_CONFIG=$(which php-config) \
                      ~/datadog/zend_abstract_interface
                    make -j all
                    make test
                    grep -e "=== Total .* memory leaks detected ===" Testing/Temporary/LastTest.log && exit 1 || true
                  done

      - run:
          name: Build and test Zend Abstract Interface (debug + UBSan)
          command: |
            switch-php debug
            export PATH="/opt/cmake/<< parameters.cmake_version >>/bin:$PATH"
            mkdir -p /tmp/build/zai-debug-ubsan
            cd /tmp/build/zai-debug-ubsan
            CMAKE_PREFIX_PATH=/opt/catch2 cmake \
              -DCMAKE_TOOLCHAIN_FILE=~/datadog/cmake/ubsan.cmake \
              -DCMAKE_BUILD_TYPE=Debug \
              -DBUILD_ZAI_TESTING=ON \
              -DPHP_CONFIG=$(which php-config) \
              ~/datadog/zend_abstract_interface
            make -j all
            make test
            grep -e "=== Total .* memory leaks detected ===" Testing/Temporary/LastTest.log && exit 1 || true

      - run:
          command: |
            mkdir -p /tmp/artifacts
            cp --parents /tmp/build/zai-*/Testing/Temporary/LastTest.log /tmp/artifacts/
          when: on_fail
      - store_artifacts:
          path: /tmp/artifacts

  compile_alpine:
    working_directory: ~/datadog
    parameters:
      php_major_minor:
        # Expected in the format: <major>.<minor>, e.g. 5.6
        type: string
    docker:
      - image: datadog/dd-trace-ci:php-compile-extension-alpine-<< parameters.php_major_minor >>
    steps:
      - <<: *STEP_ATTACH_WORKSPACE
      - run:
          name: Build extension
          command: build-dd-trace-php
      - persist_to_workspace:
          root: '.'
          paths: ['./extensions']

  compile_extension:
    working_directory: ~/datadog
    parameters:
      docker_image:
        type: string
      so_suffix:
        type: string
        default: unknown
      catch_warnings:
        type: boolean
        default: true
      lib_curl_command:
        type: string
        default: none
    docker: [ image: << parameters.docker_image >> ]
    environment:
      CFLAGS: ""
    steps:
      - <<: *STEP_ATTACH_WORKSPACE
      - run: mkdir -p extensions
      - lib_curl_workaround:
          command: << parameters.lib_curl_command >>
      - run:
          shell: /bin/bash -eo pipefail -l
          name: Build extension basic .so
          command: make all CFLAGS="-std=gnu11 -O2 -Wall -Wextra <<# parameters.catch_warnings >> -Werror <</ parameters.catch_warnings >>" ECHO_ARG="-e"
      - run:
          name: Copy extension basic .so
          command: cp tmp/build_extension/.libs/ddtrace.so extensions/ddtrace-<< parameters.so_suffix >>.so
      - run:
          shell: /bin/bash -eo pipefail -l
          name: Build extension debug .so
          command: make clean all CFLAGS="-std=gnu11 -g -Wall -Wextra <<# parameters.catch_warnings >> -Werror <</ parameters.catch_warnings >>" ECHO_ARG="-e"
      - run:
          name: Copy extension basic .so
          command: cp tmp/build_extension/.libs/ddtrace.so extensions/ddtrace-<< parameters.so_suffix >>-debug.so
      - persist_to_workspace:
          root: '.'
          paths: ['./extensions']

  compile_extension_ex:
    working_directory: ~/datadog
    parameters:
      docker_image:
        type: string
      so_suffix:
        type: string
        default: unknown
      catch_warnings:
        type: boolean
        default: true
      php_version:
        type: string
    docker: [ image: << parameters.docker_image >> ]
    steps:
      - <<: *STEP_ATTACH_WORKSPACE
      - run: mkdir -p extensions
      - run:
          name: Build ndebug, nts configuration
          command: |
            switch-php << parameters.php_version >>
            make all ECHO_ARG="-e" CFLAGS="-std=gnu11 -O2 -g -Wall -Wextra <<# parameters.catch_warnings >> -Werror <</ parameters.catch_warnings >>"
            cp tmp/build_extension/.libs/ddtrace.so extensions/ddtrace-<< parameters.so_suffix >>.so
      - run:
          name: Build debug, nts configuration
          command: |
            switch-php << parameters.php_version >>-debug
            make clean all ECHO_ARG="-e" CFLAGS="-std=gnu11 -O0 -g -Wall -Wextra <<# parameters.catch_warnings >> -Werror <</ parameters.catch_warnings >>"
            cp tmp/build_extension/.libs/ddtrace.so extensions/ddtrace-<< parameters.so_suffix >>-debug.so
      - run:
          name: Build zts configuration
          command: |
            switch-php << parameters.php_version >>-zts
            make clean all ECHO_ARG="-e" CFLAGS="-std=gnu11 -O2 -g -Wall -Wextra <<# parameters.catch_warnings >> -Werror <</ parameters.catch_warnings >>"
            cp tmp/build_extension/.libs/ddtrace.so extensions/ddtrace-<< parameters.so_suffix >>-zts.so
      - persist_to_workspace:
          root: '.'
          paths: [ './extensions' ]

  "Prepare Code":
    working_directory: ~/datadog
    docker: [ image: 'circleci/php:7.3-cli' ]
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
            - source-v1-{{ .Branch }}-
            - source-v1-
      - checkout
      - save_cache:
          key: source-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"
      - <<: *STEP_ATTACH_WORKSPACE
      - <<: *STEP_COMPOSER_SELF_UPDATE
      - <<: *STEP_COMPOSER_UPDATE
      - <<: *STEP_COMPOSER_GENERATE
      - run:
          name: Showing folder containing generated files
          command: ls -al ~/datadog/bridge
      - run:
          name: Removing composer generated files
          command: rm -rf ~/datadog/composer.lock ~/datadog/vendor
      - persist_to_workspace:
          root: '.'
          paths: ['./']

  "package extension":
    working_directory: ~/datadog
    docker: [ image: 'datadog/docker-library:ddtrace_php_fpm_packaging' ]
    steps:
      - <<: *STEP_ATTACH_WORKSPACE
      - run:
          name: Build packages
          command: make packages
      - store_artifacts: { path: 'build/packages', destination: / }
      - store_artifacts: { path: 'packages.tar.gz', destination: '/all/packages.tar.gz' }
      - store_artifacts: { path: 'pecl', destination: '/pecl' }
      - persist_to_workspace:
          root: '.'
          paths: ['./build/packages', 'dockerfiles/verify_packages']

  placeholder:
    docker:
      - image: busybox
    steps:
      - run: echo "."

workflows:
  version: 2

  components:
    jobs:
      # We need to prepare code because centos 6's git is too old for CircleCI, true story:
      # > error: unknown switch `B'
      - "Prepare Code"
      - ExtensionComponents:
          requires: [ 'Prepare Code' ]
          matrix:
            parameters:
              docker_image:
                # Don't need PHP, just basic toolchain
                - "datadog/dd-trace-ci:centos-6"
                - "datadog/dd-trace-ci:alpine"
                - "datadog/dd-trace-ci:buster"
              cmake_version:
                - "3.14.7"
                - "3.19.6"
              catch2_version:
                - "2.13.4"

  zend_abstract_interface:
    jobs:
      - "Prepare Code"
      - Zai:
          requires: [ 'Prepare Code' ]
          matrix:
            parameters:
              os:
                # TODO Add CentOS & Alpine
                - "buster"
              php_version:
                - "5.4"
                - "5.5"
                - "5.6"
                - "7.0"
                - "7.1"
                - "7.2"
                - "7.3"
                - "7.4"
                - "8.0"
              cmake_version:
                - "3.18.3"
                - "3.20.1"
              catch2_version:
                - "2.13.5"

  build_packages:
    jobs:
      - "Prepare Code"
      - compile_alpine:
          requires: [ 'Prepare Code' ]
          matrix:
            parameters:
              php_major_minor:
                - '5.4'
                - '5.5'
                - '5.6'
                - '7.0'
                - '7.1'
                - '7.2'
                - '7.3'
                - '7.4'
                - '8.0'
      - compile_extension_ex:
          requires: [ 'Prepare Code' ]
          name: "Compile PHP 54 nts + zts + debug"
          php_version: "5.4"
          docker_image: "datadog/dd-trace-ci:php-5.4_centos-6"
          so_suffix: "20100412"
          catch_warnings: false
      - compile_extension_ex:
          requires: [ 'Prepare Code' ]
          name: "Compile PHP 55 nts + zts + debug"
          php_version: "5.5"
          docker_image: "datadog/dd-trace-ci:php-5.5_centos-6"
          so_suffix: "20121113"
          catch_warnings: false
      - compile_extension_ex:
          requires: [ 'Prepare Code' ]
          name: "Compile PHP 56 nts + zts + debug"
          php_version: "5.6"
          docker_image: "datadog/dd-trace-ci:php-5.6_centos-6"
          so_suffix: "20131106"
      - compile_extension_ex:
          requires: [ 'Prepare Code' ]
          name: "Compile PHP 70 nts + zts + debug"
          php_version: "7.0"
          docker_image: "datadog/dd-trace-ci:php-7.0_centos-6"
          so_suffix: "20151012"
      - compile_extension_ex:
          requires: [ 'Prepare Code' ]
          name: "Compile PHP 71 nts + zts + debug"
          php_version: "7.1"
          docker_image: "datadog/dd-trace-ci:php-7.1_centos-6"
          so_suffix: "20160303"
      - compile_extension_ex:
          requires: [ 'Prepare Code' ]
          name: "Compile PHP 72 nts + zts + debug"
          php_version: "7.2"
          docker_image: "datadog/dd-trace-ci:php-7.2_centos-6"
          so_suffix: "20170718"
      - compile_extension_ex:
          requires: [ 'Prepare Code' ]
          name: "Compile PHP 73 nts + zts + debug"
          php_version: "7.3"
          docker_image: "datadog/dd-trace-ci:php-7.3_centos-6"
          so_suffix: "20180731"
          catch_warnings: false # On debug builds: unused parameter '__zend_filename'
      - compile_extension_ex:
          requires: [ 'Prepare Code' ]
          name: "Compile PHP 74 nts + zts + debug"
          php_version: "7.4"
          docker_image: "datadog/dd-trace-ci:php-7.4_centos-6"
          so_suffix: "20190902"
      - compile_extension_ex:
          requires: [ 'Prepare Code' ]
          name: "Compile PHP 80 nts + zts + debug"
          docker_image: "datadog/dd-trace-ci:php-8.0_centos-6"
          php_version: "8.0"
          so_suffix: "20200930"
      - pecl_build:
          requires: [ 'Prepare Code' ]
          name: "Build PECL"
      - "package extension":
          requires:
            - compile_alpine
            - "Compile PHP 54 nts + zts + debug"
            - "Compile PHP 55 nts + zts + debug"
            - "Compile PHP 56 nts + zts + debug"
            - "Compile PHP 70 nts + zts + debug"
            - "Compile PHP 71 nts + zts + debug"
            - "Compile PHP 72 nts + zts + debug"
            - "Compile PHP 73 nts + zts + debug"
            - "Compile PHP 74 nts + zts + debug"
            - "Compile PHP 80 nts + zts + debug"
            - "Build PECL"
      - randomized_tests:
          requires: [ 'package extension' ]
          matrix:
            parameters:
              batch: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 ]

      - placeholder:
          requires: [ 'package extension' ]
          name: Framework tests
      - framework_tests:
          requires: [ "Framework tests" ]
          framework_target: flow
          name: "Flow testsuite"
      - framework_tests:
          requires: [ "Framework tests" ]
          framework_target: flow_no_ddtrace
          name: "Flow baseline testsuite"
      - framework_tests:
          requires: [ "Framework tests" ]
          framework_target: laravel
          name: "Laravel testsuite"
      - framework_tests:
          requires: [ "Framework tests" ]
          framework_target: laravel_no_ddtrace
          name: "Laravel baseline testsuite"
      # Symfony path needs to be updated as symfony/contracts 2.0 has been released and it changes
      # test files where the patch is applied.
      # - framework_tests:
      #     requires: [ "Framework tests" ]
      #     framework_target: symfony
      #     name: "Symfony testsuite"
      # - framework_tests:
      #     requires: [ "Framework tests" ]
      #     framework_target: symfony_no_ddtrace
      #     name: "Symfony baseline testsuite"
      - framework_tests:
          requires: [ "Framework tests" ]
          framework_target: mongodb-driver
          name: "Mongodb driver testsuite"
      - framework_tests:
          requires: [ "Framework tests" ]
          framework_target: mongodb-driver_no_ddtrace
          name: "Mongodb driver baseline testsuite"
      - framework_tests:
          requires: [ "Framework tests" ]
          framework_target: phpredis3
          name: "PHPRedis 3 testsuite"
      - framework_tests:
          requires: [ "Framework tests" ]
          framework_target: phpredis3_no_ddtrace
          name: "PHPRedis 3 baseline testsuite"
      - framework_tests:
          requires: [ "Framework tests" ]
          framework_target: phpredis4
          name: "PHPRedis 4 testsuite"
      - framework_tests:
          requires: [ "Framework tests" ]
          framework_target: phpredis4_no_ddtrace
          name: "PHPRedis 4 baseline testsuite"
      - framework_tests:
          requires: [ "Framework tests" ]
          framework_target: phpredis5
          name: "PHPRedis 5 testsuite"
      - framework_tests:
          requires: [ "Framework tests" ]
          framework_target: phpredis5_no_ddtrace
          name: "PHPRedis 5 baseline testsuite"
      - framework_tests:
          requires: [ "Framework tests" ]
          framework_target: wordpress
          name: "WordPress testsuite"
      - framework_tests:
          requires: [ "Framework tests" ]
          framework_target: wordpress_no_ddtrace
          name: "WordPress baseline testsuite"
      - verify_alpine:
          requires: [ "package extension" ]
          matrix:
            parameters:
              php_package:
                - php php-fpm
              docker_image:
                - alpine:3.8
                - alpine:3.9
                - alpine:3.10
                - alpine:3.11
                - alpine:3.12
                - alpine:latest
      - verify_alpine:
          requires: [ "package extension" ]
          matrix:
            parameters:
              php_package:
                - php7 php7-fpm
              docker_image:
                - alpine:3.7
                - alpine:3.8
                - alpine:3.9
                - alpine:3.9
                - alpine:3.10
                - alpine:3.11
                - alpine:3.12
                - alpine:latest
      - verify_alpine:
          requires: [ "package extension" ]
          matrix:
            parameters:
              php_package:
                - php5 php5-fpm
              docker_image:
                - alpine:3.5
                - alpine:3.6
                - alpine:3.7
                - alpine:3.8
      - verify_alpine:
          requires: [ "package extension" ]
          php_package: ''
          matrix:
            parameters:
              docker_image:
                - php:5.6-fpm-alpine
                - php:7.0-fpm-alpine
                - php:7.1-fpm-alpine
                - php:7.2-fpm-alpine
                - php:7.3-fpm-alpine
                - php:7.4-fpm-alpine
                - php:8.0-rc-fpm-alpine
      - verify_centos:
          requires: [ "package extension" ]
          matrix:
            parameters:
              docker_image:
                - centos:7
              configuration:
                - PHP_MAJOR=5 PHP_MINOR=4
                - PHP_MAJOR=5 PHP_MINOR=5
                - PHP_MAJOR=5 PHP_MINOR=6
                - PHP_MAJOR=7 PHP_MINOR=0
                - PHP_MAJOR=7 PHP_MINOR=1
                - PHP_MAJOR=7 PHP_MINOR=2
                - PHP_MAJOR=7 PHP_MINOR=3
                - PHP_MAJOR=7 PHP_MINOR=4
                - PHP_MAJOR=8 PHP_MINOR=0
      - verify_centos_6:
          requires: [ "package extension" ]
      - verify_debian:
          requires: [ "package extension" ]
          matrix:
            parameters:
              install_mode:
                - sury
              docker_image:
                - debian:buster
                - debian:stretch
              configuration:
                - PHP_VERSION=5.6
                - PHP_VERSION=7.0
                - PHP_VERSION=7.1
                - PHP_VERSION=7.2
                - PHP_VERSION=7.3
                - PHP_VERSION=7.4
                - PHP_VERSION=8.0
      - verify_debian:
          requires: [ "package extension" ]
          matrix:
            parameters:
              install_mode:
                - native
              docker_image:
                - debian:jessie
              configuration:
                  # Sury.org no longer provides PHP packages for Jessie
                  # https://www.linuxcompatible.org/story/suryorg-has-discontinued-debian-8-support/
                  # So we just test the PHP version in the default repo (5.6)
                - PHP_PACKAGE="php5 php5-fpm libapache2-mod-php5" PHP_FPM_BIN="php5-fpm"

      - pecl_tests:
          requires: [ "Build PECL" ]
          name: "PHP 54 PECL tests"
          docker_image: "datadog/dd-trace-ci:php-5.4_buster"
          # PHP 5.4's pecl doesn't support showdiff
          showdiff: false
      - pecl_tests:
          requires: [ "Build PECL" ]
          name: "PHP 55 PECL tests"
          docker_image: "datadog/dd-trace-ci:php-5.5_buster"
      - pecl_tests:
          requires: [ "Build PECL" ]
          name: "PHP 56 PECL tests"
          docker_image: "datadog/dd-trace-ci:php-5.6_buster"
      - pecl_tests:
          requires: [ "Build PECL" ]
          name: "PHP 70 PECL tests"
          docker_image: "datadog/dd-trace-ci:php-7.0_buster"
      - pecl_tests:
          requires: [ "Build PECL" ]
          name: "PHP 71 PECL tests"
          docker_image: "datadog/dd-trace-ci:php-7.1_buster"
      - pecl_tests:
          requires: [ "Build PECL" ]
          name: "PHP 72 PECL tests"
          docker_image: "datadog/dd-trace-ci:php-7.2_buster"
      - pecl_tests:
          requires: [ "Build PECL" ]
          name: "PHP 73 PECL tests"
          docker_image: "datadog/dd-trace-ci:php-7.3_buster"
      - pecl_tests:
          requires: [ "Build PECL" ]
          name: "PHP 74 PECL tests"
          docker_image: "datadog/dd-trace-ci:php-7.4_buster"
      - pecl_tests:
          requires: [ "Build PECL" ]
          name: "PHP 80 PECL tests"
          docker_image: "datadog/dd-trace-ci:php-8.0_buster"
      - integration_tests:
          requires: [ 'Prepare Code' ]
          name: "PHP 54 web tests with nginx + FastCGI"
          resource_class: medium+
          sapi: cgi-fcgi
          integration_testsuite: "test_web"
          docker_image: "datadog/dd-trace-ci:php-5.4_buster"
      - integration_tests:
          requires: [ 'Prepare Code' ]
          name: "PHP 72 web tests with nginx + FastCGI"
          resource_class: medium+
          sapi: cgi-fcgi
          integration_testsuite: "test_web"
          docker_image: "datadog/dd-trace-ci:php-7.2_buster"
      - integration_tests:
          requires: [ 'Prepare Code' ]
          name: "PHP 73 web tests with nginx + FastCGI"
          resource_class: medium+
          sapi: cgi-fcgi
          integration_testsuite: "test_web"
          docker_image: "datadog/dd-trace-ci:php-7.3_buster"
      - integration_tests:
          requires: [ 'Prepare Code' ]
          name: "PHP 74 web tests with nginx + FastCGI"
          resource_class: medium+
          sapi: cgi-fcgi
          integration_testsuite: "test_web"
          docker_image: "datadog/dd-trace-ci:php-7.4_buster"
      - integration_tests:
          requires: [ 'Prepare Code' ]
          name: "PHP 80 web tests with nginx + FastCGI"
          resource_class: medium+
          sapi: cgi-fcgi
          integration_testsuite: "test_web"
          docker_image: "datadog/dd-trace-ci:php-8.0_buster"
      - integration_tests:
          requires: [ 'Prepare Code' ]
          name: "PHP 55 custom autoloaded web tests with nginx + PHP-FPM"
          resource_class: medium+
          sapi: fpm-fcgi
          integration_testsuite: "test_web_custom"
          docker_image: "datadog/dd-trace-ci:php-5.5_buster"
      - integration_tests:
          requires: [ 'Prepare Code' ]
          name: "PHP 74 custom autoloaded web tests with nginx + PHP-FPM"
          resource_class: medium+
          sapi: fpm-fcgi
          integration_testsuite: "test_web_custom"
          docker_image: "datadog/dd-trace-ci:php-7.4_buster"

      - min_install_tests:
          requires: [ 'package extension' ]
          name: "PHP min install tests"
          matrix:
            parameters:
              php_version:
                - '8.0'

  build:
    jobs:

      - "Prepare Code"

      - compile_extension:
          requires: [ 'Prepare Code' ]
          name: "PHP 55 Compilation test"
          docker_image: "datadog/docker-library:ddtrace_alpine_php-5.5-debug"
          lib_curl_command: sudo apk update ; sudo apk add curl-dev

      - compile_extension:
          requires: [ 'Prepare Code' ]
          name: "PHP 56-zts Compilation test"
          docker_image: "datadog/docker-library:ddtrace_alpine_php-5.6-zts"
          lib_curl_command: sudo apk update ; sudo apk add curl-dev

      - test:
          requires: [ 'Prepare Code' ]
          matrix:
            parameters:
              php_major_minor:
                - "5.4"
                - "5.5"
                - "5.6"
                - "7.0"
                - "7.1"
                - "7.2"
                - "7.3"
                - "7.4"
                - "8.0"
              make_target:
                - test_extension_ci
                - test_unit
                - test_api_unit
                - test_c2php

      - asan:
          requires: [ 'Prepare Code' ]
          matrix:
            parameters:
              php_major_minor:
                - '7.4'
                - '8.0'
              switch_php_version:
                - debug-zts-asan
              make_target:
                - test_c_asan
                - test_with_init_hook_asan

      - integration:
          requires: [ 'Prepare Code' ]
          resource_class: medium+
          matrix:
            parameters:
              php_major_minor:
                - '5.4'
                - '5.5'
                - '5.6'
                - '7.0'
                - '7.1'
                - '7.2'
                - '7.3'
                - '7.4'
                - '8.0'
              make_target:
                - test_composer
                - test_integration
                - test_integrations
                - test_distributed_tracing
                - test_auto_instrumentation

      - integration:
          requires: [ 'Prepare Code' ]
          # Due to Symfony OOM during composer update
          resource_class: xlarge
          matrix:
            parameters:
              php_major_minor:
                - '5.4'
                - '5.5'
                - '5.6'
                - '7.0'
                - '7.1'
                - '7.2'
                - '7.3'
                - '7.4'
                - '8.0'
              make_target:
                - test_web

      - integration:
          requires: [ 'Prepare Code' ]
          resource_class: medium+
          sapi: fpm-fcgi
          disable_runner_distributed_tracing: true
          matrix:
            parameters:
              php_major_minor:
                - '5.4'
                - '5.5'
                - '5.6'
                - '7.0'
                - '7.1'
                - '7.2'
                - '7.3'
                - '7.4'
                - '8.0'
              make_target:
                - test_distributed_tracing

      - integration:
          # NOTE: test_integrations_phpredis5 is not included in the PHP 8.0 integrations tests because of this bug that
          # only shows up in debug builds of PHP (https://github.com/phpredis/phpredis/issues/1869).
          # Since we run tests using php debug builds, we have to run test_integrations_phpredis5 in a separate runner
          # and switch to a non-debug PHP build.
          # Once the fix for https://github.com/phpredis/phpredis/issues/1869 is released, we can remove this additional
          # runner and add back again test_integrations_phpredis5 to the PHP 8.0 test suite.
          requires: [ 'Prepare Code' ]
          matrix:
            parameters:
              php_major_minor:
                - '8.0'
              switch_php_version:
                - nts
              make_target:
                - test_integrations_phpredis5

      - opcache_tests:
          requires: [ 'Prepare Code' ]
          matrix:
            parameters:
              docker_image:
                - datadog/dd-trace-ci:php-7.0_buster
                - datadog/dd-trace-ci:php-7.1_buster
                - datadog/dd-trace-ci:php-7.2_buster
                - datadog/dd-trace-ci:php-7.3_buster
                - datadog/dd-trace-ci:php-7.4_buster
                - datadog/dd-trace-ci:php-8.0_buster

      - xdebug_tests:
          requires: [ 'Prepare Code' ]
          name: "PHP 70 Xdebug tests"
          docker_image: "datadog/dd-trace-ci:php-7.0_buster"
          xdebug_version_one: "2.7.2"
      - xdebug_tests:
          requires: [ 'Prepare Code' ]
          name: "PHP 71 Xdebug tests"
          docker_image: "datadog/dd-trace-ci:php-7.1_buster"
          xdebug_version_one: "2.9.2"
          xdebug_version_two: "2.9.5"
      # - unit_tests: # disabled due to posisbly leaking tests
      #     requires: [ 'Prepare Code' ]
      #     name: "PHP 70 Unit tests-zts"
      #     docker_image: "datadog/docker-library:ddtrace_alpine_php-7.0-zts-debug"
      - xdebug_tests:
          requires: [ 'Prepare Code' ]
          name: "PHP 72 Xdebug tests"
          docker_image: "datadog/dd-trace-ci:php-7.2_buster"
          xdebug_version_one: "2.9.2"
          xdebug_version_two: "2.9.5"
      - xdebug_tests:
          requires: [ 'Prepare Code' ]
          name: "PHP 73 Xdebug tests"
          docker_image: "datadog/dd-trace-ci:php-7.3_buster"
          xdebug_version_one: "2.9.2"
          xdebug_version_two: "2.9.5"
      - xdebug_tests:
          requires: [ 'Prepare Code' ]
          name: "PHP 74 Xdebug tests"
          docker_image: "datadog/dd-trace-ci:php-7.4_buster"
          xdebug_version_one: "2.9.2"
          xdebug_version_two: "2.9.5"
      - xdebug_tests:
          requires: [ 'Prepare Code' ]
          name: "PHP 80 Xdebug tests"
          docker_image: "datadog/dd-trace-ci:php-8.0_buster"
          xdebug_version_one: "3.0.0"
      - placeholder:
          requires: [ 'Prepare Code' ]
          name: Language tests
      - php_language_tests:
          requires: [ 'Language tests' ]
          name: "PHP 80 language tests"
          xfail_list: dockerfiles/ci/xfail_tests/8.0.list
          docker_image: "datadog/dd-trace-ci:php-8.0_buster"
      - php_language_tests:
          requires: [ 'Language tests' ]
          name: "PHP 74 language tests"
          xfail_list: dockerfiles/ci/xfail_tests/7.4.list
          docker_image: "datadog/dd-trace-ci:php-7.4_buster"
      - php_language_tests:
          requires: [ 'Language tests' ]
          name: "PHP 73 language tests"
          xfail_list: dockerfiles/ci/xfail_tests/7.3.list
          docker_image: "datadog/dd-trace-ci:php-7.3_buster"
      - php_language_tests:
          requires: [ 'Language tests' ]
          name: "PHP 72 language tests"
          xfail_list: dockerfiles/ci/xfail_tests/7.2.list
          docker_image: "datadog/dd-trace-ci:php-7.2_buster"
      - php_language_tests:
          requires: [ 'Language tests' ]
          name: "PHP 71 language tests"
          xfail_list: dockerfiles/ci/xfail_tests/7.1.list
          docker_image: "datadog/dd-trace-ci:php-7.1_buster"
      - php_language_tests:
          requires: [ 'Language tests' ]
          name: "PHP 70 language tests"
          xfail_list: dockerfiles/ci/xfail_tests/7.0.list
          docker_image: "datadog/dd-trace-ci:php-7.0_buster"
      - php_language_tests:
          requires: [ 'Language tests' ]
          name: "PHP 56 language tests"
          xfail_list: dockerfiles/ci/xfail_tests/5.6.list
          docker_image: "datadog/dd-trace-ci:php-5.6_buster"
      - php_language_tests:
          requires: [ 'Language tests' ]
          name: "PHP 55 language tests"
          xfail_list: dockerfiles/ci/xfail_tests/5.5.list
          docker_image: "datadog/dd-trace-ci:php-5.5_buster"
      - php_language_tests:
          requires: [ 'Language tests' ]
          name: "PHP 54 language tests"
          xfail_list: dockerfiles/ci/xfail_tests/5.4.list
          docker_image: "datadog/dd-trace-ci:php-5.4_buster"
      - internal_integrations:
          requires: [ 'Prepare Code' ]
          name: "PHP 80 curl integration tests a shared lib"
          ext_name: "curl"
          docker_image: "datadog/dd-trace-ci:php-8.0-shared-ext"
      - "Lint files":
          requires: [ 'Prepare Code' ]
      - static_analysis:
          requires: [ 'Prepare Code' ]
          name: "Static Analysis 71"
          docker_image: circleci/php:7.1
          scenario: opentracing_beta6
      - static_analysis:
          requires: [ 'Prepare Code' ]
          name: "Static Analysis 80"
          docker_image: circleci/php:8.0
          scenario: opentracing10
      - "Post-Install Hook":
          requires: [ 'Prepare Code' ]
