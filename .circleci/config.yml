version: 2.1

aliases:

  - &CACHE_COMPOSER_KEY
    key: 'betav1-composer-deps-{{ .Environment.CIRCLE_JOB }}-{{ checksum "composer.json" }}'

  - &CACHE_NPM_KEY
    key: 'betav1-lint-deps-{{ checksum "composer.json" }}'

  - &IMAGE_DOCKER_DD_AGENT
    image: datadog/agent:latest
    environment:
      - DD_APM_ENABLED=true
      - DD_BIND_HOST=0.0.0.0
      - DD_API_KEY=invalid_key_but_this_is_fine

  - &IMAGE_DOCKER_REDIS
    image: circleci/redis:4.0-alpine
    name: redis_integration

  - &IMAGE_DOCKER_ELASTICSEARCH2
    image: elasticsearch:2
    name: elasticsearch2_integration

  - &IMAGE_DOCKER_HTTPBIN
    image: kennethreitz/httpbin
    name: httpbin_integration

  - &IMAGE_DOCKER_MEMCHACED
    image: memcached:1.5-alpine
    name: memcached_integration

  - &IMAGE_DOCKER_MYSQL
    image: mysql:5.6
    name: mysql_integration
    environment:
      - MYSQL_ROOT_PASSWORD=test
      - MYSQL_PASSWORD=test
      - MYSQL_USER=test
      - MYSQL_DATABASE=test

  - &IMAGE_DOCKER_REQUEST_REPLAYER
    image: php:7.2
    name: request_replayer
    command: sh -c "curl --output index.php https://raw.githubusercontent.com/DataDog/dd-trace-php/dev/tests/request_replayer/index.php -q && php -S 0.0.0.0:80 index.php"
    environment:
      DD_REQUEST_DUMPER_FILE: dump.json

  - &STEP_ATTACH_WORKSPACE
    attach_workspace:
      at: ~/datadog

  - &STEP_EXT_INSTALL
    run:
      name: Build and install extension
      command: make sudo install install_ini BUILD_DIR=tmp/build_extension

  - &STEP_COMPOSER_SELF_UPDATE
    run:
      name: Updating composer itself
      command: sudo composer self-update

  - &STEP_COMPOSER_CACHE_RESTORE
    restore_cache:
      <<: *CACHE_COMPOSER_KEY

  - &STEP_COMPOSER_CACHE_SAVE
    save_cache:
      <<: *CACHE_COMPOSER_KEY
      paths:
        - vendor/

  - &STEP_COMPOSER_DISABLE_TLS
    run:
      name: Disabling tls for php < 5.6 (https://stackoverflow.com/questions/47527455/getting-an-error-peer-fingerprint-did-not-match-after-running-composer-update)
      command: composer config disable-tls true

  - &STEP_COMPOSER_INSTALL
    run:
      name: Installing dependencies with composer
      command: composer install --no-interaction

  - &STEP_PREPARE_TEST_RESULTS_DIR
    run:
      name: testresults dir
      command: mkdir test-results

  - &STEP_EXPORT_CI_ENV
    run:
      name: export .env.circleci
      command: |
        echo "export $(cat .env.circleci | xargs)" >> $HOME/.profile

  - &STEP_WAIT_AGENT
    run:
      name: Waiting for Dockerized agent
      command: dockerize -wait tcp://127.0.0.1:8126 -timeout 1m && export

  - &STEP_WAIT_MYSQL
    run:
      name: Waiting for Dockerized MySQL
      command: dockerize -wait tcp://mysql_integration:3306 -timeout 1m

  - &STEP_WAIT_REQUEST_REPLAYER
    run:
      name: Waiting for Dockerized request replayer
      command: dockerize -wait tcp://request_replayer:80/clear-dumped-data -timeout 2m

  - &STEP_PERSIST_TO_WORKSPACE
    persist_to_workspace:
      root: '.'
      paths:
      - vendor/
      - tmp/build_extension

  - &STEP_STORE_TEST_RESULTS
    store_test_results:
      path: test-results

commands:
  prepare_extension_and_composer_with_cache:
    steps:
      - <<: *STEP_EXT_INSTALL
      - run:  # disabled by default due to test flakiness
          name: Disable TLS to avoid composer flakiness (https://stackoverflow.com/questions/47527455/getting-an-error-peer-fingerprint-did-not-match-after-running-composer-update)
          command: composer config disable-tls true
      - <<: *STEP_COMPOSER_SELF_UPDATE
      - <<: *STEP_COMPOSER_CACHE_RESTORE
      - <<: *STEP_COMPOSER_INSTALL

      - <<: *STEP_COMPOSER_CACHE_SAVE

executors:
  with_agent:
    environment:
      DDAGENT_HOSTNAME: 127.0.0.1
    parameters:
      docker_image:
        type: string
    docker:
      - image: << parameters.docker_image >>
      - <<: *IMAGE_DOCKER_DD_AGENT
  with_integrations:
    environment:
      DDAGENT_HOSTNAME: 127.0.0.1
      COMPOSER_MEMORY_LIMIT: -1 # disable composer memory limit completely
    parameters:
      docker_image:
        type: string
    docker:
      - image: << parameters.docker_image >>
      - <<: *IMAGE_DOCKER_DD_AGENT
      - <<: *IMAGE_DOCKER_ELASTICSEARCH2
      - <<: *IMAGE_DOCKER_HTTPBIN
      - <<: *IMAGE_DOCKER_REDIS
      - <<: *IMAGE_DOCKER_MEMCHACED
      - <<: *IMAGE_DOCKER_MYSQL
      - <<: *IMAGE_DOCKER_REQUEST_REPLAYER

jobs:
  "Lint files":
    working_directory: ~/datadog
    docker:
      - image: circleci/php:7.2-cli-node-browsers
    steps:
      - <<: *STEP_ATTACH_WORKSPACE
      - prepare_extension_and_composer_with_cache
      - restore_cache:
          <<: *CACHE_NPM_KEY
      - run:
          name: Installing dependencies with npm
          command: npm install eclint --no-package-lock --no-save
      - save_cache:
          <<: *CACHE_NPM_KEY
          paths:
          - node_modules/
      - run:
          name: Creating directory for phpcs results
          command: mkdir -p test-results/phpcs
      - run:
          name: Running eclint
          command: node_modules/.bin/eclint check '**/*' '!config.*' '!tmp/**/*' '!vendor/**/*' '!src/ext/.libs/*' '!LICENSE' '!phpstan.neon' '!tests/Frameworks/*/Version_*/**' '!tests/dockerfiles/**' '!tests/AutoInstrumentation/**' '!.composer/**/*' '!src/ext/mpack/**' || touch .failure
      - run:
          name: Running phpcs
          command: composer lint -- --report=junit | tee test-results/phpcs/results.xml || touch .failure
      - run:
          name: Install clang-format 6.0
          command: sudo apt -y install clang-format-6.0/testing
      - run:
          name: Run clang-format
          command: make clang_format_check
      - run:
          name: Check linting failure
          command: test -e .failure && exit 1 || true
      - run:
          name: Verify PECL config and Version files
          command: make verify_all
      - <<: *STEP_STORE_TEST_RESULTS

  "Static Analysis":
    working_directory: ~/datadog
    docker:
      - image: circleci/php:7.2
    steps:
      - <<: *STEP_ATTACH_WORKSPACE
      - prepare_extension_and_composer_with_cache
      - run:
          name: Install phpstan
          command: composer global require phpstan/phpstan
      - run:
          name: Running phpstan
          command: PATH=$PATH:~/.composer/vendor/bin composer static-analyze

  unit_tests:
    parameters:
      docker_image:
        type: string
      valgrind_config:
        type: string
        default: musl
    working_directory: ~/datadog
    environment:
      DDAGENT_HOSTNAME: 127.0.0.1
    executor:
      name: with_agent
      docker_image: << parameters.docker_image >>
    steps:
      - <<: *STEP_ATTACH_WORKSPACE
      - prepare_extension_and_composer_with_cache
      - <<: *STEP_PREPARE_TEST_RESULTS_DIR
      - <<: *STEP_EXPORT_CI_ENV
      - run:
          name: Copy valgrind.rc configuration and suppressions
          command: |
            cp .circleci/valgrind/<< parameters.valgrind_config >>_valgrind.rc /home/circleci/.valgrindrc
            cp .circleci/valgrind/valgrind_<< parameters.valgrind_config >>_suppressions.lib /home/circleci/valgrind_<< parameters.valgrind_config >>_suppressions.lib
      - run:
          name: Run extension tests with leak detection
          command: make test_extension_ci BUILD_DIR=tmp/build_extension JUNIT_RESULTS_DIR=$(pwd)/test-results
      - run:
          name: Run unit tests
          command: composer test-unit -- --log-junit test-results/php-unit/results.xml
      - <<: *STEP_PERSIST_TO_WORKSPACE
      - <<: *STEP_STORE_TEST_RESULTS
      - run:
          command: |
            mkdir -p /tmp/artifacts/core_dumps
            find tmp -name "core.*" | xargs -I % -n 1 cp % /tmp/artifacts/core_dumps
            cp -a tmp/build_extension/tests/ext /tmp/artifacts/tests
          when: on_fail
      - store_artifacts:
          path: /tmp/artifacts

  integration_tests:
    working_directory: ~/datadog
    parameters:
      docker_image:
        type: string
      integration_testsuite:
        type: string
    executor:
      name: with_integrations
      docker_image: << parameters.docker_image >>
    steps:
      - <<: *STEP_ATTACH_WORKSPACE
      - prepare_extension_and_composer_with_cache
      - <<: *STEP_PREPARE_TEST_RESULTS_DIR
      - <<: *STEP_EXPORT_CI_ENV
      - <<: *STEP_WAIT_AGENT
      - <<: *STEP_WAIT_MYSQL
      - <<: *STEP_WAIT_REQUEST_REPLAYER
      - run:
          name: Run auto-instrumentation tests
          command: composer test-auto-instrumentation -- --log-junit test-results/php-auto-instrumentation/results.xml
      - run:
          name: Run integration tests
          command: composer test-integration -- --log-junit test-results/php-integration/results.xml
      - run:
          name: Run << parameters.integration_testsuite >> integration test
          command: composer << parameters.integration_testsuite >>
      - <<: *STEP_PERSIST_TO_WORKSPACE
      - <<: *STEP_STORE_TEST_RESULTS

  verify_package:
    working_directory: ~/datadog
    parameters:
      docker_image:
        type: string
      package_type:
        type: string
    docker: [ image: << parameters.docker_image >> ]
    steps:
      - <<: *STEP_ATTACH_WORKSPACE
      - run: sh dockerfiles/verify_packages/verify_<< parameters.package_type >>.sh

  compile_extension:
    working_directory: ~/datadog
    parameters:
      docker_image:
        type: string
      so_suffix:
        type: string
        default: unknown
      catch_warnings:
        type: boolean
        default: true
    docker: [ image: << parameters.docker_image >> ]
    environment:
      CFLAGS: ""
    steps:
      - <<: *STEP_ATTACH_WORKSPACE
      - run: mkdir -p extensions
      - run:
          shell: /bin/bash -eo pipefail -l
          name: Build extension basic .so
          command: make all CFLAGS="-std=c11 -O2 -Wall -Wextra <<# parameters.catch_warnings >> -Werror <</ parameters.catch_warnings >>" ECHO_ARG="-e"
      - run:
          name: Copy extension basic .so
          command: cp tmp/build_extension/.libs/ddtrace.so extensions/ddtrace-<< parameters.so_suffix >>.so
      - run:
          shell: /bin/bash -eo pipefail -l
          name: Build extension debug .so
          command: make clean all CFLAGS="-std=c11 -g -Wall -Wextra <<# parameters.catch_warnings >> -Werror <</ parameters.catch_warnings >>" ECHO_ARG="-e"
      - run:
          name: Copy extension basic .so
          command: cp tmp/build_extension/.libs/ddtrace.so extensions/ddtrace-<< parameters.so_suffix >>-debug.so
      - persist_to_workspace:
          root: '.'
          paths: ['./extensions']


  "Code Checkout":
    working_directory: ~/datadog
    docker: [ image: 'circleci/buildpack-deps:latest' ]
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
            - source-v1-{{ .Branch }}-
            - source-v1-
      - checkout
      - save_cache:
          key: source-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"
      - <<: *STEP_ATTACH_WORKSPACE
      - persist_to_workspace:
          root: '.'
          paths: ['./']

  "package extension":
    working_directory: ~/datadog
    docker: [ image: 'datadog/docker-library:ddtrace_php_fpm_packaging' ]
    steps:
      - <<: *STEP_ATTACH_WORKSPACE
      - run:
          name: Build packages
          command: make packages
      - store_artifacts: { path: 'build/packages', destination: / }
      - store_artifacts: { path: 'packages.tar.gz', destination: '/all/packages.tar.gz' }
      - persist_to_workspace:
          root: '.'
          paths: ['./build/packages', 'dockerfiles/verify_packages']

  "package verification":
    working_directory: ~/datadog
    machine:
      image: circleci/classic:latest
    steps:
      - <<: *STEP_ATTACH_WORKSPACE
      - run: mkdir -p test-results
      - run:
          name: Test installing packages on target systems
          command: make -f dockerfiles/verify_packages/Makefile docker_compose_pull all
      - store_test_results:
          path: test-results

workflows:
  version: 2
  build_packages:
    jobs:
      - "Code Checkout":
          filters:
            tags:
              only: /(^build$)|(^[v]?[0-9]+(\.[0-9]+)*$)/
            branches:
              # Always build on master
              only: /^.*(master|build).*$/
      - compile_extension:
          name: "Compile PHP 54"
          docker_image: "datadog/docker-library:ddtrace_centos_6_php_5_4"
          catch_warnings: false
          so_suffix: "20100412"
          requires: [ 'Code Checkout' ]
      - compile_extension:
          requires: [ 'Code Checkout' ]
          name: "Compile PHP 56"
          docker_image: "datadog/docker-library:ddtrace_centos_6_php_5_6"
          so_suffix: "20131106"
      - compile_extension:
          requires: [ 'Code Checkout' ]
          name: "Compile PHP 70"
          docker_image: "datadog/docker-library:ddtrace_centos_6_php_7_0"
          so_suffix: "20151012"
      - compile_extension:
          requires: [ 'Code Checkout' ]
          name: "Compile PHP 71"
          docker_image: "datadog/docker-library:ddtrace_centos_6_php_7_1"
          so_suffix: "20160303"
      - compile_extension:
          requires: [ 'Code Checkout' ]
          name: "Compile PHP 72"
          docker_image: "datadog/docker-library:ddtrace_centos_6_php_7_2"
          so_suffix: "20170718"
      - compile_extension:
          requires: [ 'Code Checkout' ]
          name: "Compile PHP 73"
          docker_image: "datadog/docker-library:ddtrace_centos_7_php_73"
          so_suffix: "20180731"
      - compile_extension:
          requires: [ 'Code Checkout' ]
          name: "Compile PHP 56-zts"
          docker_image: "circleci/php:5.6-zts"
          so_suffix: "20131106-zts"
      - compile_extension:
          requires: [ 'Code Checkout' ]
          name: "Compile PHP 70-zts"
          docker_image: "circleci/php:7.0-zts"
          so_suffix: "20151012-zts"
      - compile_extension:
          requires: [ 'Code Checkout' ]
          name: "Compile PHP 71-zts"
          docker_image: "circleci/php:7.1-zts"
          so_suffix: "20160303-zts"
      - compile_extension:
          requires: [ 'Code Checkout' ]
          name: "Compile PHP 72-zts"
          docker_image: "circleci/php:7.2-zts"
          so_suffix: "20170718-zts"
      - compile_extension:
          requires: [ 'Code Checkout' ]
          name: "Compile PHP 73-zts"
          docker_image: "circleci/php:7.3-zts"
          so_suffix: "20180731-zts"
      - "package extension":
          requires:
            - "Compile PHP 54"
            - "Compile PHP 56"
            - "Compile PHP 70"
            - "Compile PHP 71"
            - "Compile PHP 72"
            - "Compile PHP 73"
            - "Compile PHP 56-zts"
            - "Compile PHP 70-zts"
            - "Compile PHP 71-zts"
            - "Compile PHP 72-zts"
            - "Compile PHP 73-zts"
      - "package verification":
          requires:
            - "package extension"
      - verify_package:
          requires: [ "package extension" ]
          name: "webdevops/php:7.1"
          docker_image: webdevops/php:7.1
          package_type: deb
      - verify_package:
          requires: [ "package extension" ]
          name: "php:7.3"
          docker_image: php:7.3
          package_type: deb
  build:
    jobs:
      - "Code Checkout"
      - compile_extension:
          requires: [ 'Code Checkout' ]
          name: "PHP 73 Compilation test"
          docker_image: "datadog/docker-library:ddtrace_centos_7_php_73"
      - compile_extension:
          requires: [ 'Code Checkout' ]
          name: "PHP 55 Compilation test"
          docker_image: "datadog/docker-library:ddtrace_alpine_php-5.5-debug"
      - compile_extension:
          requires: [ 'Code Checkout' ]
          name: "PHP 56-zts Compilation test"
          docker_image: "datadog/docker-library:ddtrace_alpine_php-5.6-zts"
      - unit_tests:
          requires: [ 'Code Checkout' ]
          name: "PHP 54 Unit tests"
          docker_image: "datadog/docker-library:ddtrace_alpine_php-5.4-debug"
      - unit_tests:
          requires: [ 'Code Checkout' ]
          name: "PHP 56 Unit tests"
          docker_image: "datadog/docker-library:ddtrace_alpine_php-5.6-debug"
      - unit_tests:
          requires: [ 'Code Checkout' ]
          name: "PHP 70 Unit tests"
          docker_image: "datadog/docker-library:ddtrace_alpine_php-7.0-debug"
      - unit_tests:
          requires: [ 'Code Checkout' ]
          name: "PHP 71 Unit tests"
          docker_image: "datadog/docker-library:ddtrace_alpine_php-7.1-debug"
      - unit_tests:
          requires: [ 'Code Checkout' ]
          name: "PHP 72 Unit tests"
          docker_image: "datadog/docker-library:ddtrace_alpine_php-7.2-debug"
      # - unit_tests: # disabled due to posisbly leaking tests
      #     requires: [ 'Code Checkout' ]
      #     name: "PHP 70 Unit tests-zts"
      #     docker_image: "datadog/docker-library:ddtrace_alpine_php-7.0-zts-debug"
      - unit_tests:
          requires: [ 'Code Checkout' ]
          name: "PHP 73 Unit tests"
          docker_image: "datadog/docker-library:ddtrace_alpine_php-7.3-debug"
          valgrind_config: 7_3_musl
      - integration_tests:
          requires: [ 'Code Checkout' ]
          name: "PHP 54 Integration tests"
          docker_image: "datadog/docker-library:ddtrace_alpine_php-5.4-debug"
          integration_testsuite: "test-integrations-54"
      - integration_tests:
          requires: [ 'Code Checkout' ]
          name: "PHP 56 Integration tests"
          integration_testsuite: "test-integrations-56"
          docker_image: "datadog/docker-library:ddtrace_alpine_php-5.6-debug"
      - integration_tests:
          requires: [ 'Code Checkout' ]
          name: "PHP 70 Integration tests"
          integration_testsuite: "test-integrations-70"
          docker_image: "datadog/docker-library:ddtrace_alpine_php-7.0-debug"
      - integration_tests:
          requires: [ 'Code Checkout' ]
          name: "PHP 71 Integration tests"
          integration_testsuite: "test-integrations-71"
          docker_image: "datadog/docker-library:ddtrace_alpine_php-7.1-debug"
      - integration_tests:
          requires: [ 'Code Checkout' ]
          name: "PHP 72 Integration tests"
          integration_testsuite: "test-integrations-72"
          docker_image: "datadog/docker-library:ddtrace_alpine_php-7.2-debug"
      - integration_tests:
          requires: [ 'Code Checkout' ]
          name: "PHP 73 Integration tests"
          integration_testsuite: "test-integrations-73"
          docker_image: "datadog/docker-library:ddtrace_alpine_php-7.3-debug"
      - integration_tests:
          requires: [ 'Code Checkout' ]
          name: "PHP 54 Web integration tests"
          docker_image: "datadog/docker-library:ddtrace_alpine_php-5.4-debug"
          integration_testsuite: "test-web-54"
      - integration_tests:
          requires: [ 'Code Checkout' ]
          name: "PHP 56 Web integration tests"
          integration_testsuite: "test-web-56"
          # docker_image: "datadog/docker-library:ddtrace_alpine_php-5.6-debug" composer goes over memory if run with debu
          docker_image: "datadog/docker-library:ddtrace_php_5_6"
      - integration_tests:
          requires: [ 'Code Checkout' ]
          name: "PHP 70 Web integration tests"
          integration_testsuite: "test-web-70"
          docker_image: "datadog/docker-library:ddtrace_alpine_php-7.0-debug"
      - integration_tests:
          requires: [ 'Code Checkout' ]
          name: "PHP 71 Web integration tests"
          integration_testsuite: "test-web-71"
          docker_image: "datadog/docker-library:ddtrace_alpine_php-7.1-debug"
      - integration_tests:
          requires: [ 'Code Checkout' ]
          name: "PHP 72 Web integration tests"
          integration_testsuite: "test-web-72"
          docker_image: "datadog/docker-library:ddtrace_php_7_2"
      - integration_tests:
          requires: [ 'Code Checkout' ]
          name: "PHP 73 Web integration tests"
          integration_testsuite: "test-web-73"
          docker_image: "datadog/docker-library:ddtrace_alpine_php-7.3-debug"
      - "Lint files":
          requires: [ 'Code Checkout' ]
      - "Static Analysis":
          requires: [ 'Code Checkout' ]
