version: "2.1"
orbs:
  codecov: codecov/codecov@3.2.2
aliases:

  - &CACHE_COMPOSER_KEY
    key: 'betav2-composer-deps-{{ .Environment.CIRCLE_JOB }}-{{ checksum "composer.json" }}'

  - &CACHE_NPM_KEY
    key: 'betav1-lint-deps-{{ checksum "composer.json" }}'

  - &IMAGE_DOCKER_DD_TEST_AGENT
    image: ghcr.io/datadog/dd-apm-test-agent/ddapm-test-agent:latest

  - &IMAGE_DOCKER_REDIS
    image: datadog/dd-trace-ci:php-redis-5.0
    name: redis_integration

  - &IMAGE_DOCKER_ELASTICSEARCH2
    image: elasticsearch:2
    name: elasticsearch2_integration

  - &IMAGE_DOCKER_ELASTICSEARCH7
    image: elasticsearch:7.17.0
    name: elasticsearch7_integration
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g

  - &IMAGE_DOCKER_HTTPBIN
    image: kong/httpbin
    name: httpbin_integration

  - &IMAGE_DOCKER_MEMCHACED
    image: memcached:1.5-alpine
    name: memcached_integration

  - &IMAGE_DOCKER_MYSQL
    image: datadog/dd-trace-ci:php-mysql-dev-5.6
    name: mysql_integration
    environment:
      - MYSQL_ROOT_PASSWORD=test
      - MYSQL_PASSWORD=test
      - MYSQL_USER=test
      - MYSQL_DATABASE=test

  - &IMAGE_DOCKER_MONGO
    image: "circleci/mongo:4.0"
    name: mongodb_integration
    environment:
      - MONGO_INITDB_ROOT_USERNAME=test
      - MONGO_INITDB_ROOT_PASSWORD=test

  - &IMAGE_DOCKER_RABBITMQ
    image: rabbitmq:3.8.9-alpine
    name: rabbitmq_integration

  - &IMAGE_DOCKER_REQUEST_REPLAYER
    image: datadog/dd-trace-ci:php-request-replayer-2.0
    name: request-replayer
    environment:
      DD_REQUEST_DUMPER_FILE: dump.json

  - &IMAGE_DOCKER_SQLSRV
    image: mcr.microsoft.com/mssql/server:2022-latest
    name: sqlsrv_integration
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=Password12!
      - MSSQL_PID=Developer

  - &STEP_ATTACH_WORKSPACE
    attach_workspace:
      at: ~/datadog

  - &STEP_APPEND_BUILD_ID
    run:
      name: Append build id to version number
      command: |
        githash="${CIRCLE_SHA1?}"
        if [[ "$CIRCLE_BRANCH" =~ "ddtrace-" ]] ; then
          echo "Release branch detected; not adding git sha1 to version number."
        else
          sed -E -i "s/const\s+VERSION\s*=\s*'(.*)'/const VERSION = '\1+$githash'/g" "src/DDTrace/Tracer.php"
          sed -E -i "s/define\s+PHP_DDTRACE_VERSION\s*\"(.*)\"/define PHP_DDTRACE_VERSION \"\1+$githash\"/g" "ext/version.h"
          sed -E -i "s/^version\s*=\s*\"(.*)\"/version = \"\1+$githash\"/g" "profiling/Cargo.toml"
          echo "Appended +$githash to version number."
        fi

  - &STEP_EXT_INSTALL
    run:
      name: Build and install extension
      command: make sudo install install_ini BUILD_DIR=$(pwd)/tmp/build_extension

  - &STEP_COMPOSER_CACHE_RESTORE
    restore_cache:
      <<: *CACHE_COMPOSER_KEY

  - &STEP_COMPOSER_CACHE_SAVE
    save_cache:
      <<: *CACHE_COMPOSER_KEY
      paths:
        - ~/.composer/cache

  - &STEP_COMPOSER_SELF_UPDATE
    run:
      name: Upgrading composer
      command: sudo composer self-update --no-interaction

  - &STEP_COMPOSER_UPDATE
    run:
      name: Installing dependencies with composer
      command: |
        export COMPOSER_MEMORY_LIMIT=-1 # disable composer memory limit completely
        composer update --no-interaction

  - &STEP_COMPOSER_GENERATE
    run:
      name: Compiling dd-tace-php files into single file
      command: make generate

  - &STEP_COMPOSER_TESTS_UPDATE
    run:
      name: Updating tests' composer
      command: make composer_tests_update

  - &STEP_PREPARE_TEST_RESULTS_DIR
    run:
      name: testresults dir
      command: mkdir test-results

  - &STEP_EXPORT_CI_ENV
    run:
      name: export .env.circleci
      command: |
        echo "export $(cat .env.circleci | xargs)" >> $HOME/.profile

  - &STEP_DISABLE_XDEBUG
    run:
      name: Disable Xdebug for built-in web tests
      command: test -e /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini && sudo rm -f $_ || true

  - &STEP_WAIT_AGENT
    run:
      name: Waiting for Dockerized agent
      command: wait-for 127.0.0.1:8126 --timeout=60

  - &STEP_WAIT_MYSQL
    run:
      name: Waiting for Dockerized MySQL
      command: wait-for mysql_integration:3306 --timeout=60

  - &STEP_WAIT_REQUEST_REPLAYER
    run:
      name: Waiting for Dockerized request replayer
      command: wait-for request-replayer:80 --timeout=120

  # Fix intermittent error: "Could not resolve host: httpbin_integration"
  - &STEP_RESOLVE_HTTPBIN_HOSTNAME_TO_IP
    run:
      name: Resolving HTTPBIN_HOSTNAME to IP address
      command: |
        export HTTPBIN_HOSTNAME=$( \
          curl --verbose "http://httpbin_integration:80/headers" 2>&1 | \
          grep '* Connected to' | \
          awk -F' ' '{print $5}' | \
          sed 's/[()]//g' \
        );
        echo "Resolved httpbin_integration: HTTPBIN_HOSTNAME=${HTTPBIN_HOSTNAME}";
        echo "export HTTPBIN_HOSTNAME='${HTTPBIN_HOSTNAME}'" >> $BASH_ENV
        # Avoid intermittent DNS hangs: See https://github.com/curl/curl/issues/593#issuecomment-170146252
        echo "options single-request" | sudo tee -a /etc/resolv.conf

  - &STEP_PERSIST_TO_WORKSPACE
    persist_to_workspace:
      root: '.'
      paths:
      - tmp/build_extension

  - &STEP_STORE_TEST_RESULTS
    store_test_results:
      path: test-results

  - &STEP_CHECKOUT
    run:
      name: Checkout code
      command: |
        git config --global gc.auto 0

        export CIRCLE_REPOSITORY_URL="${CIRCLE_REPOSITORY_URL/git@github.com:/https://github.com/}"

        if [ -e "$HOME/datadog/.git" ] ; then
          echo 'Fetching into existing repository'
          existing_repo='true'
          cd "$HOME/datadog"
          git remote set-url origin "$CIRCLE_REPOSITORY_URL" || true

          echo 'Fetching from remote repository'
          if [ -n "$CIRCLE_TAG" ]; then
            git fetch --force --tags origin
          elif [ -z "$CIRCLE_PR_NUMBER" ]; then
            git fetch --force origin "+refs/heads/$CIRCLE_BRANCH:refs/remotes/origin/$CIRCLE_BRANCH"
          fi
        else
          echo 'Cloning git repository'
          existing_repo='false'
          mkdir -p "$HOME/datadog"
          cd "$HOME/datadog"
          git clone --no-checkout "$CIRCLE_REPOSITORY_URL" .
        fi

        if [ -n "$CIRCLE_TAG" ]; then
          echo 'Checking out tag'
          git checkout --force "$CIRCLE_TAG"
          git reset --hard "$CIRCLE_SHA1"
        else
          echo 'Checking out branch'
          if [ -n "$CIRCLE_PR_NUMBER" ]; then
            git fetch --force origin "+refs/pull/${CIRCLE_PR_NUMBER}/head:refs/remotes/origin/$CIRCLE_BRANCH"
          fi
          git checkout --force -B "$CIRCLE_BRANCH" "$CIRCLE_SHA1"
          git --no-pager log --no-color -n 1 --format='HEAD is now at %h %s'
        fi

        echo 'Updating submodules'
        git submodule update --init --recursive

  - &BARE_DOCKER_MACHINE
    resource_class: << parameters.resource_class >>
    machine:
      image: ubuntu-2004:current

commands:
  lib_curl_workaround:
    parameters:
      command:
        type: string
        default: none
    steps:
      - run:
          name: Installing missing libcurl workaround
          command: |
              if [[ ! "<<parameters.command>>" == "none" ]]; then
                << parameters.command >>
              fi;
  switch_php:
    parameters:
      php_version:
        type: string
        default: none
    steps:
      - run:
          name: Switch PHP version
          command: |
            if [[ ! "<<parameters.php_version>>" == "none" ]]; then
              switch-php << parameters.php_version >>
            fi;
  install_extension:
    parameters:
      lib_curl_command:
        type: string
        default: none
    steps:
      - lib_curl_workaround:
          command: << parameters.lib_curl_command >>
      - <<: *STEP_EXT_INSTALL

  copy_valgrind_rc:
    parameters:
      valgrind_config:
        type: string
        default: ""
    steps:
      - run:
          name: Copy valgrind.rc configuration and suppressions
          command: |
            if [ -e ".circleci/valgrind/<< parameters.valgrind_config >>_valgrind.rc" ]; then
              cp .circleci/valgrind/<< parameters.valgrind_config >>_valgrind.rc /home/circleci/.valgrindrc
              cp .circleci/valgrind/valgrind_<< parameters.valgrind_config >>_suppressions.lib /home/circleci/valgrind_<< parameters.valgrind_config >>_suppressions.lib
            fi
  prepare_extension_and_composer_with_cache:
    steps:
      - <<: *STEP_EXT_INSTALL
      - <<: *STEP_COMPOSER_CACHE_RESTORE
      - <<: *STEP_COMPOSER_UPDATE
      - <<: *STEP_COMPOSER_CACHE_SAVE

  setup_docker:
    parameters:
      docker_image:
        type: string
      extra:
        type: string
        default: none
    steps:
      - run:
          name: Fix mounted folder permissions mismatch on buster (user 1000 vs user 3434 in docker)
          command: |
            if [[ "<< parameters.docker_image >>" == *buster* ]]; then
              sudo useradd -u 3434 docker-circleci
              sudo chown -R docker-circleci .
            fi
      - run:
          name: Setup docker image << parameters.docker_image >>
          command: |
            set -x
            max_retries=3
            extra=<< parameters.extra >>
            docker network create net --driver=bridge -o "com.docker.network.bridge.name=br"
            if [[ $extra == "with_httpbin_and_request_replayer" ]]; then
              function retry_docker() {
                retries=$max_retries
                while
                  ! docker "${@}"
                do
                  if [[ $((--retries)) -eq 0 ]]; then
                    exit 1
                  fi
                  sleep 1
                done
                true # Success
              }
              retry_docker run --detach --rm --net net \
                -e DD_APM_ENABLED=true \
                -e DD_BIND_HOST=0.0.0.0 \
                -e DD_API_KEY=invalid_key_but_this_is_fine \
                ghcr.io/datadog/dd-apm-test-agent/ddapm-test-agent:latest
              retry_docker run --detach --rm --net net \
                --name httpbin_integration kong/httpbin
              retry_docker run --detach --rm --net net \
                -e DD_REQUEST_DUMPER_FILE=dump.json \
                --name request-replayer datadog/dd-trace-ci:php-request-replayer-2.0
            fi
            touch /tmp/docker.out
            mkdir /tmp/bashenv
            sudo mkdir /rust
            sudo chmod 777 /rust
            image=<< parameters.docker_image >>
            retries=$max_retries
            while
              nohup docker run --rm --net net \
                  -e DDAGENT_HOSTNAME=127.0.0.1 \
                  -e DD_AGENT_HOST=127.0.0.1 \
                  -e DATADOG_HAVE_DEV_ENV=1 \
                  -e BASH_ENV=/home/circleci/bashenv/bash.sh \
                  -e CIRCLE_SHA1 \
                  -v $(pwd):/home/circleci/datadog \
                  -v /tmp/bashenv:/home/circleci/bashenv \
                  -v /rust:/rust \
                  $(if [ -n "${CARGO_TARGET_DIR:-}" ]; then echo -v ${CARGO_TARGET_DIR}:${CARGO_TARGET_DIR} -e CARGO_TARGET_DIR=${CARGO_TARGET_DIR}; fi) \
                  $image \
                  bash -c 'echo Started; sleep 10000' 2>&1 | tee /tmp/docker.out &
              tail -F /tmp/docker.out | grep -Em1 'Started|Error response from daemon'
              if ! grep -q "Error response from daemon" /tmp/docker.out; then
                container_name=$(docker ps | grep "$image" | awk '{ print $NF }' | head -1)
                [[ -z $container_name ]]
              fi
            do
              if [[ $((--retries)) -eq 0 ]]; then
                cat /tmp/docker.out
                echo ---
                echo "Could not start container $image"
                exit 1
              fi
              sleep 1
            done
            echo 'if [ -f /usr/bin/docker ]; then pid=$$; IFS= readarray -d "" args < <(cat /proc/$pid/cmdline); exec docker exec -w /home/circleci/datadog -i '"${container_name}"' "${args[@]}"; fi' | tee -a $BASH_ENV
            cp $BASH_ENV /tmp/bashenv/bash.sh
            chmod 777 /tmp/bashenv/bash.sh

executors:
  with_agent:
    environment:
      DDAGENT_HOSTNAME: 127.0.0.1
    parameters:
      docker_image:
        type: string
    docker:
      - image: << parameters.docker_image >>
      - <<: *IMAGE_DOCKER_DD_TEST_AGENT
  with_httpbin_and_request_replayer:
    environment:
      DDAGENT_HOSTNAME: 127.0.0.1
    parameters:
      docker_image:
        type: string
    docker:
      - image: << parameters.docker_image >>
      - <<: *IMAGE_DOCKER_DD_TEST_AGENT
      - <<: *IMAGE_DOCKER_HTTPBIN
      - <<: *IMAGE_DOCKER_REQUEST_REPLAYER
  with_integrations:
    environment:
      DDAGENT_HOSTNAME: 127.0.0.1
      COMPOSER_MEMORY_LIMIT: -1 # disable composer memory limit completely
    parameters:
      docker_image:
        type: string
    docker:
      - image: << parameters.docker_image >>
      - <<: *IMAGE_DOCKER_DD_TEST_AGENT
      - <<: *IMAGE_DOCKER_ELASTICSEARCH2
      - <<: *IMAGE_DOCKER_ELASTICSEARCH7
      - <<: *IMAGE_DOCKER_HTTPBIN
      - <<: *IMAGE_DOCKER_REDIS
      - <<: *IMAGE_DOCKER_MEMCHACED
      - <<: *IMAGE_DOCKER_MYSQL
      - <<: *IMAGE_DOCKER_RABBITMQ
      - <<: *IMAGE_DOCKER_MONGO
      - <<: *IMAGE_DOCKER_REQUEST_REPLAYER
      - <<: *IMAGE_DOCKER_SQLSRV

jobs:
  "Lint PHP 5":
    parameters:
      resource_class:
        type: string
        default: small
    <<: *BARE_DOCKER_MACHINE
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - <<: *STEP_CHECKOUT
      - <<: *STEP_ATTACH_WORKSPACE
      - run:
          command: |
            docker run --rm -v "$HOME/datadog:/src" -i php:5.4-cli bash \<<'CMD'
              set -eu
              cd /src/bridge
              for file in *.php; do
                if [ "$file" != "_generated_integrations.php" ]; then
                  php -l "$file"
                fi
              done
            CMD

  "Lint files":
    working_directory: ~/datadog
    docker:
      - image: cimg/php:8.1-node
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - <<: *STEP_CHECKOUT
      - <<: *STEP_ATTACH_WORKSPACE
      - lib_curl_workaround:
          command: sudo apt update; sudo apt -y install libcurl4-nss-dev
      - prepare_extension_and_composer_with_cache
      - restore_cache:
          <<: *CACHE_NPM_KEY
      - run:
          name: Installing dependencies with npm
          command: npm install eclint --no-package-lock --no-save
      - save_cache:
          <<: *CACHE_NPM_KEY
          paths:
          - node_modules/
      - run:
          name: Creating directory for phpcs results
          command: mkdir -p test-results/phpcs
      - run:
          name: Running eclint
          command: node_modules/.bin/eclint check '**/*' '!dockerfiles/**/*' '!tests/ext/sandbox/**' '!tests/ext/sandbox-prehook/*' '!tests/ext/background-sender/**/*' '!config.*' '!m4/*' '!tmp/**/*' '!vendor/**/*' '!ext/vendor/**/*' '!ext/.libs/*' '!src/dogstatsd/**' '!LICENSE' '!phpstan.*.neon' '!tests/overhead/**' '!tests/Frameworks/*/Version_*/**' '!tests/dockerfiles/**' '!tests/AutoInstrumentation/**' '!.composer/**/*' '!LICENSE.*' '!tooling/*' '!tests/randomized/**' '!**/tests/stubs/**' '!**/CMakeLists.txt' '!**/*_arginfo.h' || touch .failure
      - run:
          name: Running phpcs
          command: composer lint -- --report=junit | tee test-results/phpcs/results.xml || touch .failure
      - run:
          name: Check linting failure
          command: test -e .failure && exit 1 || true
      - run:
          name: Verify Version files
          command: make verify_all
      - <<: *STEP_STORE_TEST_RESULTS

  static_analysis:
    parameters:
      docker_image:
        type: string
        default: ""
      scenario:
        type: string
        default: ""
      composer_root:
        type: string
        default: "~/.composer"
    working_directory: ~/datadog
    docker:
      - image: << parameters.docker_image >>
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - <<: *STEP_CHECKOUT
      - <<: *STEP_ATTACH_WORKSPACE
      - lib_curl_workaround:
          command: sudo apt update; sudo apt -y install libcurl4-nss-dev
      - prepare_extension_and_composer_with_cache
      - run:
          name: Install phpstan
          command: |
            composer global require phpstan/phpstan:0.12.*
            composer global require psr/log
            composer scenario:update
      - run:
          name: Running phpstan
          command: composer scenario << parameters.scenario >> ; PATH=$PATH:$(composer --global config home)/vendor/bin composer static-analyze

  "Post-Install Hook":
    working_directory: ~/datadog
    docker:
      - image: datadog/dd-trace-ci:php-nginx-apache2
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Install git
          command: |
            apt-get update
            apt-get install -y git
      - <<: *STEP_CHECKOUT
      - <<: *STEP_ATTACH_WORKSPACE
      - run:
          name: Start Supervisor
          command: supervisord
          background: true
      - run:
          name: Copy post-install script
          command: |
            mkdir -p /src/ddtrace-scripts
            cp package/post-install.sh /src/ddtrace-scripts
      - run:
          name: Test post-install hook
          command: bash tests/PostInstallHook/run-tests.sh

  xdebug_tests:
    parameters:
      docker_image:
        type: string
      xdebug_version_one:
        type: string
      xdebug_version_two:
        type: string
        default: none
    working_directory: ~/datadog
    executor:
      name: with_agent
      docker_image: << parameters.docker_image >>
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - <<: *STEP_CHECKOUT
      - <<: *STEP_ATTACH_WORKSPACE
      - <<: *STEP_EXT_INSTALL
      - <<: *STEP_EXPORT_CI_ENV
      - <<: *STEP_PREPARE_TEST_RESULTS_DIR
      - run:
          name: Run xdebug tests
          command: |
            export REPORT_EXIT_STATUS=1
            export DD_TRACE_CLI_ENABLED=1
            cd tmp/build_extension
            targetdir() {
              if [[ ${1:0:1} -eq 2 ]]; then
                echo $1
              else
                echo "3.0.0"
              fi
            }
            php run-tests.php -g FAIL,XFAIL,BORK,WARN,LEAK,XLEAK,SKIP -p $(which php) --show-all -d zend_extension=xdebug-<< parameters.xdebug_version_one >>.so ../../tests/xdebug/$(targetdir << parameters.xdebug_version_one >>)
            if [[ ! "<<parameters.xdebug_version_two>>" == "none" ]]; then
              php run-tests.php -g FAIL,XFAIL,BORK,WARN,LEAK,XLEAK,SKIP -p $(which php) --show-all -d zend_extension=xdebug-<< parameters.xdebug_version_two >>.so ../../tests/xdebug/$(targetdir << parameters.xdebug_version_two >>)
            fi;
      - run:
          name: Run unit tests with xdebug
          command: |
            if [[ "<<parameters.xdebug_version_one>>" != "2.7.2" ]]; then
              TEST_EXTRA_INI='-d zend_extension=xdebug-<< parameters.xdebug_version_one >>.so' make test_unit PHPUNIT_OPTS="--log-junit test-results/php-unit/results_unit.xml"
            fi
      - <<: *STEP_PERSIST_TO_WORKSPACE
      - <<: *STEP_STORE_TEST_RESULTS

  test: &TEST_BASE
    parameters:
      php_major_minor:
        # Expected in the format: <major>.<minor>, e.g. 8.2
        type: string
      make_target:
        type: string
      switch_php_version:
        type: string
        default: none
      resource_class:
        type: string
        default: medium
    working_directory: ~/datadog
    <<: *BARE_DOCKER_MACHINE
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - <<: *STEP_CHECKOUT
      - <<: *STEP_ATTACH_WORKSPACE
      - setup_docker:
          docker_image: datadog/dd-trace-ci:php-<< parameters.php_major_minor >>_buster
          extra: with_httpbin_and_request_replayer
      - switch_php:
          php_version: << parameters.switch_php_version >>
      - prepare_extension_and_composer_with_cache
      - <<: *STEP_COMPOSER_TESTS_UPDATE
      - <<: *STEP_PREPARE_TEST_RESULTS_DIR
      - <<: *STEP_EXPORT_CI_ENV
      - <<: *STEP_WAIT_REQUEST_REPLAYER
      - <<: *STEP_RESOLVE_HTTPBIN_HOSTNAME_TO_IP
      - run:
          name: Run tests
          command: |
            set -euo pipefail
            make << parameters.make_target >> PHPUNIT_OPTS="--log-junit test-results/php-unit/results.xml" 2>&1 | tee /dev/stderr | { ! grep -qe "=== Total [0-9]+ memory leaks detected ==="; }
            rm -rf tmp/build_extension/tests/opcache/file_cache/* || true
      - <<: *STEP_PERSIST_TO_WORKSPACE
      - <<: *STEP_STORE_TEST_RESULTS
      - run:
          command: |
            mkdir -p /tmp/artifacts/core_dumps
            find tmp -name "core.*" | xargs -I % -n 1 cp % /tmp/artifacts/core_dumps
            cp -a tmp/build_extension/tests/$(if [[ << parameters.make_target >> == *opcache* ]]; then echo opcache; else echo ext; fi) /tmp/artifacts/tests
          when: on_fail
      - store_artifacts:
          path: /tmp/artifacts

  test_arm:
    machine:
      image: ubuntu-2004:202101-01
    resource_class: arm.medium
    parameters:
      php_major_minor:
        # Expected in the format: <major>.<minor>, e.g. 7.4
        type: string
      make_target:
        type: string
      switch_php_version:
        type: string
        default: debug
    working_directory: ~/datadog
    # environment:
    #   DDAGENT_HOSTNAME: 127.0.0.1
    #   DD_AGENT_HOST: 127.0.0.1
    #   DATADOG_HAVE_DEV_ENV: 1
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - <<: *STEP_CHECKOUT
      - <<: *STEP_ATTACH_WORKSPACE
      - run:
          name: Install php
          command: sudo apt update; sudo apt install -y php
      - run:
          name: Make executor script executable
          command: chmod a+x ./tooling/bin/run-in-docker-with-ext.sh
      - run:
          name: Fix mounted folder permissions mismatch (user 1000 vs user 3434 in docker)
          command: |
            sudo useradd -u 3434 docker-circleci
            sudo chown -R docker-circleci . tests
      # - <<: *STEP_WAIT_REQUEST_REPLAYER
      - run:
          name: Run tests
          command: |
            docker-compose run --rm \
              -e DDAGENT_HOSTNAME=127.0.0.1 \
              -e DD_AGENT_HOST=127.0.0.1 \
              -e DATADOG_HAVE_DEV_ENV=1 \
              -e PHP_VARIANT=<< parameters.switch_php_version >> \
              -e PHPUNIT_OPTS="--log-junit test-results/php-unit/results.xml" \
              << parameters.php_major_minor >>-buster-arm64 \
                ./tooling/bin/run-in-docker-with-ext.sh make fix_socket_permissions << parameters.make_target >>
      # - <<: *STEP_COMPOSER_TESTS_UPDATE
      # - <<: *STEP_PREPARE_TEST_RESULTS_DIR
      # - <<: *STEP_EXPORT_CI_ENV
      # - <<: *STEP_RESOLVE_HTTPBIN_HOSTNAME_TO_IP
      # - run:
      #     name: Run tests
      #     command: |
      #       set -euo pipefail
      #        make << parameters.make_target >> PHPUNIT_OPTS="--log-junit test-results/php-unit/results.xml" 2>&1 | tee /dev/stderr | { ! grep -qe "=== Total [0-9]+ memory leaks detected ==="; }
      - <<: *STEP_PERSIST_TO_WORKSPACE
      - <<: *STEP_STORE_TEST_RESULTS
      - run:
          command: |
            mkdir -p /tmp/artifacts/core_dumps
            find tmp -name "core.*" | xargs -I % -n 1 cp % /tmp/artifacts/core_dumps
            cp -a tmp/build_extension/tests/ext /tmp/artifacts/tests
          when: on_fail
      - store_artifacts:
          path: /tmp/artifacts

  coverage: &TEST_BASE
    parameters:
      php_major_minor:
        # Expected in the format: <major>.<minor>, e.g. 8.2
        type: string
      make_target:
        type: string
      switch_php_version:
        type: string
        default: none
      resource_class:
        type: string
        default: medium
    working_directory: ~/datadog
    <<: *BARE_DOCKER_MACHINE
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - <<: *STEP_CHECKOUT
      - <<: *STEP_ATTACH_WORKSPACE
      - setup_docker:
          docker_image: datadog/dd-trace-ci:php-<< parameters.php_major_minor >>_buster
          extra: with_httpbin_and_request_replayer
      - switch_php:
          php_version: << parameters.switch_php_version >>
      - <<: *STEP_EXPORT_CI_ENV
      - <<: *STEP_WAIT_REQUEST_REPLAYER
      - <<: *STEP_RESOLVE_HTTPBIN_HOSTNAME_TO_IP
      - run:
          name: Run tests
          command: |
            set -euo pipefail
            if [[ << parameters.switch_php_version >> == *asan* ]]; then export TEST_PHP_JUNIT=$(pwd)/asan-extension-test.xml; fi
            make << parameters.make_target >> 2>&1 | tee /dev/stderr | { ! grep -qe "=== Total [0-9]+ memory leaks detected ==="; }
      - when:
          # codecov uploader only on amd64
          condition:
            matches:
              pattern: "^[^.]+$"
              value: << parameters.resource_class >>
          steps:
            - run:
                name: Install CodeCov Uploader Dependencies
                command: |
                  sudo apt update
                  sudo apt install -y gpg
            - codecov/upload:
                file: tmp/coverage.info
                upload_name: "PHP<< parameters.php_major_minor >>.dd-trace-php"
      - run:
          command: |
            mkdir -p /tmp/artifacts/core_dumps
            find tmp -name "core.*" | xargs -I % -n 1 cp % /tmp/artifacts/core_dumps
            cp -a tmp/build_extension/tests/ext /tmp/artifacts/tests
          when: on_fail
      - store_artifacts:
          path: /tmp/artifacts

  asan: *TEST_BASE

  integration:
    working_directory: ~/datadog
    parameters:
      php_major_minor:
        # Expected in the format: <major>.<minor>, e.g. 8.2
        type: string
      make_target:
        type: string
      switch_php_version:
        type: string
        default: none
      resource_class:
        type: string
        default: medium
      sapi:
        type: string
        default: cli-server
      disable_runner_distributed_tracing:
        type: boolean
        default: false
    resource_class: << parameters.resource_class >>
    executor:
      name: with_integrations
      docker_image: datadog/dd-trace-ci:php-<< parameters.php_major_minor >>_buster
    environment:
      COMPOSER_PROCESS_TIMEOUT: 0
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - when:
          condition:
            and:
              - or:
                - equal: [ "8.0", << parameters.php_major_minor >> ]
                - equal: [ "8.1", << parameters.php_major_minor >> ]
              - not:
                equal: [ "test_composer", << parameters.make_target >> ]
          steps:
            - run:
                name: Updating composer to v2
                command: sudo composer self-update --2 --no-interaction
      - <<: *STEP_CHECKOUT
      - <<: *STEP_ATTACH_WORKSPACE
      - switch_php:
          php_version: << parameters.switch_php_version >>
      - install_extension
      - <<: *STEP_COMPOSER_CACHE_RESTORE
      - <<: *STEP_COMPOSER_UPDATE
      - <<: *STEP_COMPOSER_TESTS_UPDATE
      - <<: *STEP_PREPARE_TEST_RESULTS_DIR
      - <<: *STEP_EXPORT_CI_ENV
      - <<: *STEP_DISABLE_XDEBUG
      - <<: *STEP_WAIT_AGENT
      - <<: *STEP_WAIT_MYSQL
      - <<: *STEP_WAIT_REQUEST_REPLAYER
      - run:
          name: Run tests
          command: DD_TRACE_AGENT_TIMEOUT=1000 <<# parameters.disable_runner_distributed_tracing >> DD_DISTRIBUTED_TRACING=false <</ parameters.disable_runner_distributed_tracing >> DD_TRACE_TEST_SAPI=<< parameters.sapi >> make << parameters.make_target >> PHPUNIT_OPTS="--log-junit test-results/php-composer/results.xml"
      - run:
          command: |
            mkdir -p /tmp/artifacts
            find ~/datadog/tests -type f \( -name 'phpunit_error.log' -o -name 'nginx_*.log' -o -name 'apache_*.log' -o -name 'php_fpm_*.log' -o -name 'dd_php_error.log' -o -name 'core*' \) -exec cp --parents '{}' /tmp/artifacts \;
          when: on_fail
      - store_artifacts:
          path: /tmp/artifacts/
      - <<: *STEP_COMPOSER_CACHE_SAVE
      - <<: *STEP_PERSIST_TO_WORKSPACE
      - <<: *STEP_STORE_TEST_RESULTS

  php_language_tests:
    parameters:
      docker_image:
        type: string
      xfail_list:
        type: string
        default: none
    working_directory: ~/datadog
    environment:
      DDAGENT_HOSTNAME: 127.0.0.1
      DD_AGENT_HOST: 127.0.0.1
    executor:
      name: with_agent
      docker_image: << parameters.docker_image >>
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - <<: *STEP_CHECKOUT
      - <<: *STEP_ATTACH_WORKSPACE
      - prepare_extension_and_composer_with_cache
      - <<: *STEP_PREPARE_TEST_RESULTS_DIR
      - <<: *STEP_EXPORT_CI_ENV
      - run:
          name: Run tests
          command: |
            sudo rm -f /opt/php/debug/conf.d/memcached.ini
            if [[ ! "<<parameters.xfail_list>>" == "none" ]]; then
              cp "<<parameters.xfail_list>>" /usr/local/src/php/xfail_tests.list
              (
                cd /usr/local/src/php
                cat xfail_tests.list | xargs -n 1 -I{} find {} -name "*.phpt" -delete || true
              )
            fi
            cd /usr/local/src/php
            export DD_TRACE_CLI_ENABLED=true
            export DD_TRACE_STARTUP_LOGS=0
            export DD_TRACE_WARN_CALL_STACK_DEPTH=0
            export DD_TRACE_WARN_LEGACY_DD_TRACE=0
            export REPORT_EXIT_STATUS=1
            export TEST_PHP_JUNIT=/tmp/artifacts/tests/php-tests.xml
            mkdir -p /tmp/artifacts/tests
            # replace all hardcoded object ids in tests by %d as ddtrace creates its own objects
            php \<<'PHP'
            <?php
            foreach (explode("\0", trim(shell_exec("find . -type f -name '*.phpt' -print0"))) as $f) {
                $c = file_get_contents($f);
                $n = preg_replace(["/\)#[0-9]+ \(/", "/[0-9]+ is not a valid/"], [")#%d (", "%d is not a valid"], $c);
                if ($c !== $n) {
                    file_put_contents($f, str_replace("--EXPECT--", "--EXPECTF--", $n));
                }
            }
            PHP
            php run-tests.php -q \
              -p /usr/local/bin/php \
              --show-diff \
              -g FAIL,XFAIL,BORK,WARN,LEAK,XLEAK,SKIP \
              -d ddtrace.request_init_hook=/home/circleci/datadog/bridge/dd_wrap_autoloader.php
      - run:
          command: |
            cd /usr/local/src/php
            mkdir -p /tmp/artifacts/core_dumps
            find ./ -name "core.*" | xargs -I % -n 1 cp % /tmp/artifacts/core_dumps
            mkdir -p /tmp/artifacts/diffs
            find -type f -name '*.diff' -exec cp --parents '{}' /tmp/artifacts/diffs \;
          when: on_fail
      - store_test_results:
          path: /tmp/artifacts/tests/
      - store_artifacts:
          path: /tmp/artifacts/

  integration_tests:
    working_directory: ~/datadog
    parameters:
      php_major_minor:
        # Expected in the format: <major>.<minor>, e.g. 8.2
        type: string
      docker_image:
        type: string
      integration_testsuite:
        type: string
      lib_curl_command:
        type: string
        default: none
      switch_php_version:
        type: string
        default: none
      resource_class:
        type: string
        default: medium
      sapi:
        type: string
        default: cli-server
      disable_runner_distributed_tracing:
        type: boolean
        default: false
    resource_class: << parameters.resource_class >>
    executor:
      name: with_integrations
      docker_image: << parameters.docker_image >>
    environment:
      COMPOSER_PROCESS_TIMEOUT: 0
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - when:
          condition:
            or:
              - equal: [ "8.0", << parameters.php_major_minor >> ]
              - equal: [ "8.1", << parameters.php_major_minor >> ]
          steps:
            - run:
                name: Updating composer to v2
                command: sudo composer self-update --2 --no-interaction
      - <<: *STEP_CHECKOUT
      - <<: *STEP_ATTACH_WORKSPACE
      - switch_php:
          php_version: << parameters.switch_php_version >>
      - install_extension:
          lib_curl_command: << parameters.lib_curl_command >>
      - <<: *STEP_COMPOSER_CACHE_RESTORE
      - <<: *STEP_COMPOSER_UPDATE
      - <<: *STEP_COMPOSER_TESTS_UPDATE
      - <<: *STEP_EXPORT_CI_ENV
      - <<: *STEP_DISABLE_XDEBUG
      - <<: *STEP_WAIT_AGENT
      - <<: *STEP_WAIT_MYSQL
      - <<: *STEP_WAIT_REQUEST_REPLAYER
      - run:
          name: Run << parameters.integration_testsuite >> integration test
          command: DD_TRACE_AGENT_TIMEOUT=1000 <<# parameters.disable_runner_distributed_tracing >> DD_DISTRIBUTED_TRACING=false <</ parameters.disable_runner_distributed_tracing >> DD_TRACE_TEST_SAPI=<< parameters.sapi >> make << parameters.integration_testsuite >>
      - run:
          command: |
            mkdir -p /tmp/artifacts
            find ~/datadog/tests -type f \( -name 'phpunit_error.log' -o -name 'nginx_*.log' -o -name 'apache_*.log' -o -name 'php_fpm_*.log' -o -name 'dd_php_error.log' -o -name 'core*' \) -exec cp --parents '{}' /tmp/artifacts \;
          when: on_fail
      - store_artifacts:
          path: /tmp/artifacts/
      - <<: *STEP_COMPOSER_CACHE_SAVE
      - <<: *STEP_PERSIST_TO_WORKSPACE

  internal_integrations:
    parameters:
      docker_image:
        type: string
      switch_php_version:
        type: string
        default: none
      ext_name:
        type: string
    working_directory: ~/datadog
    environment:
      DDAGENT_HOSTNAME: 127.0.0.1
      DD_AGENT_HOST: 127.0.0.1
      DATADOG_HAVE_DEV_ENV: 1
    executor:
      name: with_httpbin_and_request_replayer
      docker_image: << parameters.docker_image >>
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - <<: *STEP_CHECKOUT
      - <<: *STEP_ATTACH_WORKSPACE
      - switch_php:
          php_version: << parameters.switch_php_version >>
      - <<: *STEP_PREPARE_TEST_RESULTS_DIR
      - <<: *STEP_EXPORT_CI_ENV
      - <<: *STEP_WAIT_REQUEST_REPLAYER
      - <<: *STEP_RESOLVE_HTTPBIN_HOSTNAME_TO_IP
      - run:
          name: Ensure ext/<< parameters.ext_name >> is missing
          command: |
            if php --ri=<< parameters.ext_name >> &> /dev/null
            then
              echo 'ext/<< parameters.ext_name >> is enabled but should not be installed'
              exit 1
            fi
      - run:
          name: Run << parameters.ext_name >> integration tests with ext/<< parameters.ext_name >> as shared lib + leak detection
          command: |
            make test_extension_ci \
              BUILD_DIR=$(pwd)/tmp/build_extension \
              JUNIT_RESULTS_DIR=$(pwd)/test-results \
              RUN_TESTS_EXTRA_ARGS="-d extension=mbstring.so -d extension=<< parameters.ext_name >>.so" \
              TESTS="tests/ext/integrations/<< parameters.ext_name >>"
            if [ "<< parameters.ext_name >>" = "curl" ]
            then
              for curlVersion in 7.72.0 7.77.0
              do
                make test_c \
                  BUILD_DIR=$(pwd)/tmp/build_extension \
                  JUNIT_RESULTS_DIR=$(pwd)/test-results \
                  RUN_TESTS_EXTRA_ARGS="-d extension=mbstring.so -d extension=<< parameters.ext_name >>-${curlVersion}.so" \
                  TESTS="tests/ext/integrations/<< parameters.ext_name >>"
              done
            fi
      - <<: *STEP_STORE_TEST_RESULTS
      - run:
          command: |
            mkdir -p /tmp/artifacts/core_dumps
            find tmp -name "core.*" | xargs -I % -n 1 cp % /tmp/artifacts/core_dumps
            cp -a tmp/build_extension/tests/ext /tmp/artifacts/tests
          when: on_fail
      - store_artifacts:
          path: /tmp/artifacts

  min_install_tests:
    parameters:
      php_version:
        type: string
    working_directory: ~/datadog
    environment:
      DDAGENT_HOSTNAME: 127.0.0.1
      DD_AGENT_HOST: 127.0.0.1
      DATADOG_HAVE_DEV_ENV: 1
    executor:
      name: with_httpbin_and_request_replayer
      docker_image: datadog/dd-trace-ci:php-<< parameters.php_version >>-shared-ext
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - <<: *STEP_CHECKOUT
      - <<: *STEP_ATTACH_WORKSPACE
      - <<: *STEP_PREPARE_TEST_RESULTS_DIR
      - <<: *STEP_EXPORT_CI_ENV
      - <<: *STEP_WAIT_REQUEST_REPLAYER
      - <<: *STEP_RESOLVE_HTTPBIN_HOSTNAME_TO_IP
      - run:
          name: Install .deb from artifacts
          command: |
            sudo dpkg -i ./build/packages/*$(if [ $(uname -m) = "aarch64" ]; then echo aarch64; else echo amd64; fi)*.deb
            php --ri=ddtrace
      - run:
          name: Run phpt tests against shippable package
          command: |
            switch-php debug
            export DDTRACE_PKG_SO="/opt/datadog-php/extensions/ddtrace-$(php -i | awk '/^PHP[ \t]+API[ \t]+=>/ { print $NF }')-debug.so"
            make run_tests TESTS="-d 'extension=$DDTRACE_PKG_SO'"
      - run:
          name: Run phpt tests against build from source
          command: |
            make test_c
      - <<: *STEP_STORE_TEST_RESULTS
      - run:
          command: |
            mkdir -p /tmp/artifacts/core_dumps
            find tmp -name "core.*" | xargs -I % -n 1 cp % /tmp/artifacts/core_dumps
            cp -a tmp/build_extension/tests/ext /tmp/artifacts/tests
          when: on_fail
      - store_artifacts:
          path: /tmp/artifacts

  framework_tests:
    working_directory: ~/datadog
    parameters:
      framework_target:
        type: string
        default: all
    executor:
      name: with_agent
      docker_image: cimg/php:7.3
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - <<: *STEP_CHECKOUT
      - <<: *STEP_ATTACH_WORKSPACE
      - setup_remote_docker
      - run: make -f dockerfiles/frameworks/Makefile << parameters.framework_target >>

  verify_alpine:
    working_directory: ~/datadog
    resource_class: small
    parameters:
      docker_image:
        type: string
      php_package:
        type: string
      install_type:
        type: string
        # Possible values: php_installer, native_package
        default: php_installer
    docker:
      - image: << parameters.docker_image >>
        environment:
          PHP_PACKAGE: << parameters.php_package >>
          OS_NAME: alpine
          DD_AGENT_HOST: request-replayer
          DD_TRACE_AGENT_PORT: 80
          DD_TRACE_AGENT_FLUSH_INTERVAL: 1000
          INSTALL_TYPE: << parameters.install_type >>
          VERIFY_APACHE: 'no'
      - <<: *IMAGE_DOCKER_REQUEST_REPLAYER
    steps:
      - run:
          # see https://support.circleci.com/hc/en-us/articles/360016505753-Resolve-Certificate-Signed-By-Unknown-Authority-error-in-Alpine-images?flash_digest=39b76521a337cecacac0cc10cb28f3747bb5fc6a
          name: Install ca-certificates
          command: apk add --no-cache ca-certificates
      - run:
          name: Install git
          command: apk add git
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - <<: *STEP_CHECKOUT
      - <<: *STEP_ATTACH_WORKSPACE
      - run:
          name: Validate alpine package
          command: ./dockerfiles/verify_packages/verify.sh

  verify_centos:
    working_directory: ~/datadog
    resource_class: small
    parameters:
      docker_image:
        type: string
      configuration:
        type: string
      php_package:
        type: string
        default: ""
      install_type:
        type: string
        # Possible values: php_installer, native_package
        default: php_installer
    docker:
      - image: << parameters.docker_image >>
        environment:
          PHP_PACKAGE: << parameters.php_package >>
          DD_AGENT_HOST: request-replayer
          DD_TRACE_AGENT_PORT: 80
          DD_TRACE_AGENT_FLUSH_INTERVAL: 1000
          INSTALL_TYPE: << parameters.install_type >>
      - <<: *IMAGE_DOCKER_REQUEST_REPLAYER
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Install git
          command: |
            yum update -y
            yum install -y git
      - <<: *STEP_CHECKOUT
      - <<: *STEP_ATTACH_WORKSPACE
      - run:
          name: Validate centos package
          command: << parameters.configuration >> ./dockerfiles/verify_packages/verify.sh

  verify_centos_6:
    working_directory: ~/datadog
    resource_class: small
    parameters:
      install_type:
        type: string
        # Possible values: php_installer, native_package
        default: php_installer
    machine:
      image: ubuntu-2004:202111-02
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Install git
          command: |
            yum update -y
            yum install -y git
      - <<: *STEP_CHECKOUT
      - <<: *STEP_ATTACH_WORKSPACE
      - run: mkdir -p test-results
      - run:
          name: Test installing packages on target systems
          command: make -f dockerfiles/verify_packages/Makefile INSTALL_TYPE=<< parameters.install_type >> verify_centos_6
      - store_test_results:
          path: test-results

  verify_debian:
    working_directory: ~/datadog
    resource_class: small
    parameters:
      docker_image:
        type: string
      install_mode:
        type: string
      verify_apache:
        # yes|no
        type: string
        default: "yes"
      install_type:
        type: string
        # Possible values: php_installer, native_package
        default: php_installer
      configuration:
        type: string
    docker:
      - image: << parameters.docker_image >>
        environment:
          DD_AGENT_HOST: request-replayer
          DD_TRACE_AGENT_PORT: 80
          DD_TRACE_AGENT_FLUSH_INTERVAL: 1000
          VERIFY_APACHE: << parameters.verify_apache >>
          INSTALL_MODE: << parameters.install_mode >>
          INSTALL_TYPE: << parameters.install_type >>
      - <<: *IMAGE_DOCKER_REQUEST_REPLAYER
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Install git
          command: |
            apt-get update
            apt-get install -y git
      - <<: *STEP_CHECKOUT
      - <<: *STEP_ATTACH_WORKSPACE
      - run:
          name: Validate debian package
          command: << parameters.configuration >> bash ./dockerfiles/verify_packages/verify.sh

  verify_tar_gz:
    working_directory: ~/datadog
    parameters:
      php_major_minor:
        type: string
      resource_class:
        type: string
        default: medium
    <<: *BARE_DOCKER_MACHINE
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Install git
          command: |
            sudo apt-get update
            sudo apt-get install -y git
      - <<: *STEP_CHECKOUT
      - <<: *STEP_ATTACH_WORKSPACE
      - setup_docker:
          docker_image: debian:buster
      - run:
          name: Validate .tar.gz package
          command: PHP_VERSION=<< parameters.php_major_minor >> bash ./dockerfiles/verify_packages/verify_tar_gz_root.sh

  verify_no_json_ext:
    working_directory: ~/datadog
    resource_class: small
    docker:
      - image: alpine:3.12
    steps:
      - run:
          # see https://support.circleci.com/hc/en-us/articles/360016505753-Resolve-Certificate-Signed-By-Unknown-Authority-error-in-Alpine-images?flash_digest=39b76521a337cecacac0cc10cb28f3747bb5fc6a
          name: Install ca-certificates
          command: apk add --no-cache ca-certificates
      - run:
          name: Install git
          command: apk add git
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - <<: *STEP_CHECKOUT
      - <<: *STEP_ATTACH_WORKSPACE
      - run:
          name: Test
          command: ./dockerfiles/verify_packages/verify_no_ext_json.sh

  installer_tests:
    working_directory: ~/datadog
    machine:
      image: ubuntu-2004:202111-02
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - <<: *STEP_CHECKOUT
      - <<: *STEP_ATTACH_WORKSPACE
      - run:
          # In order to hard-code the proper version required in tests, we need to regenerate the 'released' installer
          # scripts which are saved to build/packages
          name: Let testing images to write to build/packages dir
          command: chmod a+w build/packages
      - run:
          name: Run tests
          command: make -C dockerfiles/verify_packages test_installer

  randomized_tests:
    working_directory: ~/datadog
    machine:
      image: ubuntu-2004:202111-02
    resource_class: large
    environment:
      - RANDOMIZED_RESTRICT_PLATFORMS: centos7
    parameters:
      batch:
        # Batch is only used to run a number of this jobs in parallel via a testing matrix.
        type: integer
    steps: &randomized_tests_steps
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - <<: *STEP_CHECKOUT
      - <<: *STEP_ATTACH_WORKSPACE
      - run:
          command: ls -al
      - run:
          name: Install required packages
          command: sudo apt update && sudo apt install -y php git
      - run:
          name: "Increase virtual memory limit for elasticsearch"
          command: sudo sysctl -w vm.max_map_count=262144
      - run:
          name: Copy tracer package
          command: make -C tests/randomized library.local
      - run:
          name: Generate scenarios
          command: make -C tests/randomized generate PLATFORMS=$RANDOMIZED_RESTRICT_PLATFORMS
      - run:
          name: Execute tests
          command: make -C tests/randomized test CONCURRENT_JOBS=5 DURATION=1m30s
      - run:
          name: Fix PHP-FPM logs permissions before storing artifacts
          command: sudo chown -R circleci:circleci tests/randomized/.tmp.scenarios/.results
      - run:
          name: Analyze results
          command: make -C tests/randomized analyze
      - store_artifacts:
          path: 'tests/randomized/.tmp.scenarios/.results'

  randomized_tests_arm:
    working_directory: ~/datadog
    machine:
      image: ubuntu-2004:202101-01
    resource_class: arm.xlarge
    environment:
      - RANDOMIZED_RESTRICT_PLATFORMS: centos7
    parameters:
      batch:
        # Batch is only used to run a number of this jobs in parallel via a testing matrix.
        type: integer
    steps: *randomized_tests_steps

  randomized_tests_asan:
    working_directory: ~/datadog
    machine:
      image: ubuntu-2004:202111-02
    resource_class: xlarge
    environment:
      - RANDOMIZED_RESTRICT_PLATFORMS: buster
    parameters:
      batch:
        # Batch is only used to run a number of this jobs in parallel via a testing matrix.
        type: integer
    steps: *randomized_tests_steps

  randomized_tests_arm_asan:
    working_directory: ~/datadog
    machine:
      image: ubuntu-2004:202101-01
    resource_class: arm.xlarge
    environment:
      - RANDOMIZED_RESTRICT_PLATFORMS: buster
    parameters:
      batch:
        # Batch is only used to run a number of this jobs in parallel via a testing matrix.
        type: integer
    steps: *randomized_tests_steps

  pecl_build:
    working_directory: ~/datadog
    executor:
      name: with_agent
      docker_image: "datadog/dd-trace-ci:php-7.4_buster"
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - <<: *STEP_CHECKOUT
      - <<: *STEP_ATTACH_WORKSPACE
      - run:
          name: Make PECL build
          command: |
            make build_pecl_package
            mkdir -p ./pecl && cp datadog_trace-*.tgz ./pecl
      #- store_artifacts:
      #    path: pecl
      - persist_to_workspace:
          root: .
          paths: [pecl]

  pecl_tests:
    parameters:
      docker_image:
        type: string
      showdiff:
        type: boolean
        default: true
    working_directory: ~/datadog
    executor:
      name: with_httpbin_and_request_replayer
      docker_image: << parameters.docker_image >>
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - <<: *STEP_CHECKOUT
      - <<: *STEP_ATTACH_WORKSPACE
      - run:
          name: Install from PECL build
          command: |
            cp ./pecl/datadog_trace-*.tgz ./datadog_trace.tgz
            sudo pecl install datadog_trace.tgz
            echo "extension=ddtrace.so" | sudo tee $(php -i | awk -F"=> " '/Scan this dir for additional .ini files/ {print $2}')/ddtrace.ini
            php --ri=ddtrace
      - <<: *STEP_WAIT_REQUEST_REPLAYER
      - <<: *STEP_RESOLVE_HTTPBIN_HOSTNAME_TO_IP
      - run:
          name: Run phpt tests with PECL
          command: |
            sudo \
            TERM=dumb \
            HTTPBIN_HOSTNAME=${HTTPBIN_HOSTNAME} \
            DATADOG_HAVE_DEV_ENV=1 \
            DD_TRACE_CLI_ENABLED=1 \
            pecl run-tests <<# parameters.showdiff >> --showdiff <</ parameters.showdiff >> --ini=" -d ddtrace.request_init_hook=" -p datadog_trace
      - run:
          name: Gather .diff files for artifacts
          command: |
            mkdir -p /tmp/artifacts
            find $(pecl config-get test_dir) -type f -name '*.diff' -exec cp --parents '{}' /tmp/artifacts \;
          when: on_fail
      - store_artifacts: { path: '/tmp/artifacts' }

  ExtensionComponents:
    working_directory: ~/datadog
    parameters:
      docker_image:
        type: string
      cmake_version:
        type: string
      catch2_version:
        type: string
    docker:
      - image: << parameters.docker_image >>
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - <<: *STEP_CHECKOUT
      - <<: *STEP_ATTACH_WORKSPACE
      - run:
          name: Install cmake << parameters.cmake_version >>
          command: |
            if [ -d "/opt/cmake/<< parameters.cmake_version >>" ]
            then
              echo 'cmake << parameters.cmake_version >> already installed'
              exit 0
            fi
            if [ -e /etc/alpine-release ]
            then
              # We build from source on Alpine (slow)
              mkdir -p /tmp/cmake /opt/cmake/<< parameters.cmake_version >>
              cd /tmp/cmake
              curl -OL https://github.com/Kitware/CMake/releases/download/v<< parameters.cmake_version >>/cmake-<< parameters.cmake_version >>.tar.gz
              tar -xf *.tar.gz --strip 1
              ./bootstrap --prefix=/opt/cmake/<< parameters.cmake_version >> --parallel=2 && make -j 2 && make install
            else
              # We use prebuilt Linux packages everywhere else (fast)
              cd /tmp && curl -OL https://github.com/Kitware/CMake/releases/download/v<< parameters.cmake_version >>/cmake-<< parameters.cmake_version >>-Linux-x86_64.tar.gz
              mkdir -p /opt/cmake/<< parameters.cmake_version >>
              cd /opt/cmake/<< parameters.cmake_version >> && tar -xf /tmp/cmake-<< parameters.cmake_version >>-Linux-x86_64.tar.gz --strip 1
            fi

      - run:
          name: Install Catch2
          command: |
            if [ -d "/opt/catch2" ]
            then
              echo 'catch2 already installed'
              exit 0
            fi
            export PATH="/opt/cmake/<< parameters.cmake_version >>/bin:$PATH"
            cd /tmp
            curl -OL https://github.com/catchorg/Catch2/archive/v<< parameters.catch2_version >>.tar.gz
            mkdir catch2
            cd catch2
            tar -xf ../v<< parameters.catch2_version >>.tar.gz --strip 1
            cmake -Bbuild -H. -DBUILD_TESTING=OFF -DCMAKE_INSTALL_PREFIX=/opt/catch2
            cmake --build build/ --target install

      - run:
          name: Build and test Datadog::Php::Components (ASan)
          command: |
            export PATH="/opt/cmake/<< parameters.cmake_version >>/bin:$PATH"
            if [ -f "/opt/libuv/lib/pkgconfig/libuv.pc" ] ; then
              export PKG_CONFIG_PATH="/opt/libuv/lib/pkgconfig:$PKG_CONFIG_PATH"
            fi
            mkdir -p /tmp/build/datadog_php_components_asan
            cd /tmp/build/datadog_php_components_asan
            if [ -f "/etc/debian_version" ]
            then
              toolchain="-DCMAKE_TOOLCHAIN_FILE=~/datadog/cmake/asan.cmake"
            fi
            CMAKE_PREFIX_PATH=/opt/catch2 cmake \
              $toolchain \
              -DCMAKE_BUILD_TYPE=Debug \
              -DDATADOG_PHP_TESTING=ON \
              ~/datadog/components
            make -j all
            make test

      - run:
          name: Build and test Datadog::Php::Components (UBSan)
          command: |
            if [ ! -f "/etc/debian_version" ]
            then
              echo 'UBSan only supported on Buster for now'
              exit 0
            fi
            export PATH="/opt/cmake/<< parameters.cmake_version >>/bin:$PATH"
            mkdir -p /tmp/build/datadog_php_components_ubsan
            cd /tmp/build/datadog_php_components_ubsan
            CMAKE_PREFIX_PATH=/opt/catch2 cmake \
              -DCMAKE_TOOLCHAIN_FILE=~/datadog/cmake/ubsan.cmake \
              -DCMAKE_BUILD_TYPE=Debug \
              -DDATADOG_PHP_TESTING=ON \
              ~/datadog/components
            make -j all

            # channel is non-deterministic, so run tests a few more times. At
            # the moment, Catch2 tests are not automatically adding labels, so
            # run all tests instead of just channel's:
            # https://github.com/catchorg/Catch2/issues/1590
            make test ARGS="--output-on-failure --repeat until-fail:10"

      - run:
          command: |
            mkdir -p /tmp/artifacts
            cp /tmp/build/datadog_php_components_asan/Testing/Temporary/LastTest.log /tmp/artifacts/LastTestASan.log
            cp /tmp/build/datadog_php_components_ubsan/Testing/Temporary/LastTest.log /tmp/artifacts/LastTestUBSan.log
          when: on_fail
      - store_artifacts:
          path: /tmp/artifacts

  Tea:
    working_directory: ~/datadog
    parameters:
      os:
        type: string
      php_version:
        type: string
      cmake_version:
        type: string
      catch2_version:
        type: string
    docker:
      - image: datadog/dd-trace-ci:php-<< parameters.php_version >>_<< parameters.os >>
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - <<: *STEP_CHECKOUT
      - <<: *STEP_ATTACH_WORKSPACE
      - run:
          name: Install cmake << parameters.cmake_version >>
          command: |
            if [ -d "/opt/cmake/<< parameters.cmake_version >>" ]
            then
              echo 'cmake << parameters.cmake_version >> already installed'
              exit 0
            fi
            cd /tmp && curl -OL https://github.com/Kitware/CMake/releases/download/v<< parameters.cmake_version >>/cmake-<< parameters.cmake_version >>-Linux-x86_64.tar.gz
            sudo mkdir -p /opt/cmake/<< parameters.cmake_version >>
            cd /opt/cmake/<< parameters.cmake_version >> && sudo tar -xf /tmp/cmake-<< parameters.cmake_version >>-Linux-x86_64.tar.gz --strip 1
            PATH="/opt/cmake/<< parameters.cmake_version >>/bin:$PATH"
      - run:
          name: Install Catch2
          command: |
            if [ -d "/opt/catch2" ]
            then
              echo 'catch2 already installed'
              exit 0
            fi
            cd /tmp
            curl -OL https://github.com/catchorg/Catch2/archive/v<< parameters.catch2_version >>.tar.gz
            mkdir catch2
            cd catch2
            tar -xf ../v<< parameters.catch2_version >>.tar.gz --strip 1
            cmake -Bbuild -H. -DBUILD_TESTING=OFF -DCMAKE_INSTALL_PREFIX=/opt/catch2
            cmake --build build/ --target install

      - run:
          name: TEA (build, test, & install on all PHP builds)
          command: |
            for phpBuild in $(ls /opt/php)
            do
              switch-php ${phpBuild}
              toolchain=""
              if [ "${phpBuild}" = "debug-zts-asan" ]
              then
                toolchain="-DCMAKE_TOOLCHAIN_FILE=~/datadog/cmake/asan.cmake"
              fi
              mkdir -p /tmp/build/tea-${phpBuild}
              cd /tmp/build/tea-${phpBuild}
              CMAKE_PREFIX_PATH=/opt/catch2 \
              cmake \
                ${toolchain} \
                -DCMAKE_INSTALL_PREFIX=/opt/tea/${phpBuild} \
                -DCMAKE_BUILD_TYPE=Debug \
                -DBUILD_TEA_TESTING=ON \
                -DPHP_CONFIG=$(which php-config) \
                ~/datadog/tea
              make -j all
              make test
              grep -e "=== Total [0-9]+ memory leaks detected ===" Testing/Temporary/LastTest.log && exit 1 || true
              make install
            done

      - run:
          name: Zend Abstract Interface (build & test on all PHP builds)
          command: |
            for phpBuild in $(ls /opt/php)
            do
              switch-php ${phpBuild}
              toolchain=""
              if [ "${phpBuild}" = "debug-zts-asan" ]
              then
                toolchain="-DCMAKE_TOOLCHAIN_FILE=~/datadog/cmake/asan.cmake"
              fi
              mkdir -p /tmp/build/zai-${phpBuild}
              cd /tmp/build/zai-${phpBuild}
              CMAKE_PREFIX_PATH=/opt/catch2 \
              Tea_ROOT=/opt/tea/${phpBuild} \
              cmake \
                ${toolchain} \
                -DCMAKE_BUILD_TYPE=Debug \
                -DBUILD_ZAI_TESTING=ON \
                -DPHP_CONFIG=$(which php-config) \
                ~/datadog/zend_abstract_interface
              make -j all
              make test
              grep -e "=== Total [0-9]+ memory leaks detected ===" Testing/Temporary/LastTest.log && exit 1 || true
            done

      - run:
          name: Build and test Zend Abstract Interface (debug + UBSan)
          command: |
            switch-php debug
            mkdir -p /tmp/build/zai-debug-ubsan
            cd /tmp/build/zai-debug-ubsan
            CMAKE_PREFIX_PATH=/opt/catch2 \
            Tea_ROOT=/opt/tea/debug \
            cmake \
              -DCMAKE_TOOLCHAIN_FILE=~/datadog/cmake/ubsan.cmake \
              -DCMAKE_BUILD_TYPE=Debug \
              -DBUILD_ZAI_TESTING=ON \
              -DPHP_CONFIG=$(which php-config) \
              ~/datadog/zend_abstract_interface
            make -j all
            make test
            grep -e "=== Total [0-9]+ memory leaks detected ===" Testing/Temporary/LastTest.log && exit 1 || true

      - run:
          name: Extension Tea Tests
          command: |
            for phpBuild in $(ls /opt/php)
            do
              switch-php ${phpBuild}
              toolchain=""
              if [ "${phpBuild}" = "debug-zts-asan" ]
              then
                toolchain="-DCMAKE_TOOLCHAIN_FILE=~/datadog/cmake/asan.cmake"
              fi

              # build ddtrace.so
              cd ~/datadog
              make clean
              make install

              # Build ext Tea tests
              builddir="/tmp/build/ext-tea-${phpBuild}"
              mkdir -p "${builddir}"
              cd "${builddir}"
              export CMAKE_PREFIX_PATH=/opt/catch2
              export Tea_ROOT=/opt/tea/${phpBuild}
              cmake ${toolchain} -DCMAKE_BUILD_TYPE=Debug -S ~/datadog/tests/tea
              cmake --build . --parallel
              make test ARGS="--output-on-failure"
              grep -e "=== Total [0-9]+ memory leaks detected ===" Testing/Temporary/LastTest.log && exit 1 || true
            done

      - run:
          command: |
            mkdir -p /tmp/artifacts
            cp --parents /tmp/build/zai-*/Testing/Temporary/LastTest.log /tmp/artifacts/
          when: on_fail
      - store_artifacts:
          path: /tmp/artifacts

  ZaiSharedExts:
    working_directory: ~/datadog
    parameters:
      php_version:
        type: string
    docker:
      - image: datadog/dd-trace-ci:php-<< parameters.php_version >>-shared-ext
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - <<: *STEP_CHECKOUT
      - <<: *STEP_ATTACH_WORKSPACE
      - run:
          name: Switch PHP to nts
          command: |
            switch-php nts

      - run:
          name: TEA (build & install on nts)
          command: |
            mkdir -p /tmp/build/tea-nts
            cd /tmp/build/tea-nts
            CMAKE_PREFIX_PATH=/opt/catch2 \
            cmake \
              -DCMAKE_INSTALL_PREFIX=/opt/tea/nts \
              -DCMAKE_BUILD_TYPE=Debug \
              -DBUILD_TEA_TESTING=ON \
              -DPHP_CONFIG=$(which php-config) \
              ~/datadog/tea
            make -j all
            make install

      # Starting in PHP 8.0, ext/json is a core extension
      - when:
          condition:
            or:
              - equal: [ "7.0", << parameters.php_version >> ]
              - equal: [ "7.1", << parameters.php_version >> ]
              - equal: [ "7.2", << parameters.php_version >> ]
              - equal: [ "7.3", << parameters.php_version >> ]
              - equal: [ "7.4", << parameters.php_version >> ]
          steps:
            - run:
                name: Ensure ext/json is loaded as shared lib
                command: |
                  if php --ri=json &> /dev/null
                  then
                    echo 'ext/json is enabled but should not be installed'
                    exit 1
                  fi
                  echo "extension=json.so" | sudo tee $(php -i | awk -F"=> " '/Scan this dir for additional .ini files/ {print $2}')/json.ini

      - run:
          name: Ensure ext/curl is loaded as shared lib
          command: |
            if php --ri=curl &> /dev/null
            then
              echo 'ext/curl is enabled but should not be installed'
              exit 1
            fi
            echo "extension=curl.so" | sudo tee $(php -i | awk -F"=> " '/Scan this dir for additional .ini files/ {print $2}')/curl.ini
      - run:
          name: Build and test Zend Abstract Interface (nts)
          command: |
            mkdir -p /tmp/build/zai-nts
            cd /tmp/build/zai-nts
            CMAKE_PREFIX_PATH=/opt/catch2 \
            Tea_ROOT=/opt/tea/nts \
            cmake \
              -DCMAKE_BUILD_TYPE=Debug \
              -DBUILD_ZAI_TESTING=ON \
              -DPHP_CONFIG=$(which php-config) \
              -DRUN_SHARED_EXTS_TESTS=1 \
              ~/datadog/zend_abstract_interface
            make -j all
            TEA_INI_IGNORE=0 make test
            grep -e "=== Total [0-9]+ memory leaks detected ===" Testing/Temporary/LastTest.log && exit 1 || true

      - run:
          command: |
            mkdir -p /tmp/artifacts
            cp --parents /tmp/build/zai-*/Testing/Temporary/LastTest.log /tmp/artifacts/
          when: on_fail
      - store_artifacts:
          path: /tmp/artifacts

  compile_alpine:
    working_directory: ~/datadog
    parameters:
      php_major_minor:
        # Expected in the format: <major>.<minor>, e.g. 8.2
        type: string
      resource_class:
        type: string
        default: medium
    <<: *BARE_DOCKER_MACHINE
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - <<: *STEP_CHECKOUT
      - <<: *STEP_ATTACH_WORKSPACE
      - setup_docker:
          docker_image: datadog/dd-trace-ci:php-compile-extension-alpine-<< parameters.php_major_minor >>
      - run:
          name: Build extension
          command: |
            # Backtraces on Alpine are apparently sketchy, and removed in Alpine 3.17:
            # https://gitlab.alpinelinux.org/alpine/aports/-/merge_requests/36722
            # Ensure libexecinfo is _not_ installed, so support isn't detected
            # by config.m4
            alpine_version=$(cat /etc/os-release | awk -F= '$1 == "VERSION_ID" { print $2 }')
            alpine_major_version=$(echo $version | cut -d . -f 1)
            alpine_minor_version=$(echo $version | cut -d . -f 2)
            if [ $alpine_major_version -eq 3 ] && [ $alpine_minor_version -lt 17 ] ; then
                apk update && apk del libexecinfo libexecinfo-dev
            fi
            build-dd-trace-php
            mv extensions extensions_$(uname -m)
      - persist_to_workspace:
          root: '.'
          paths: ['./extensions_*']

  compile_extension_asan:
    working_directory: ~/datadog
    parameters:
      docker_image:
        type: string
      so_suffix:
        type: string
        default: unknown
      resource_class:
        type: string
        default: medium # mostly for more RAM for ramdisk
    <<: *BARE_DOCKER_MACHINE
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - <<: *STEP_CHECKOUT
      - <<: *STEP_ATTACH_WORKSPACE
      - setup_docker:
          docker_image: << parameters.docker_image >>
      - run: mkdir -p extensions_$(uname -m)
      - run:
          name: Build extension basic .so
          command: |
            set -eo pipefail
            switch-php debug-zts-asan
            make
            cp -v tmp/build_extension/.libs/ddtrace.so extensions_$(uname -m)/ddtrace-<< parameters.so_suffix >>-debug-zts.so
      - persist_to_workspace:
          root: '.'
          paths: ['./extensions_*']

  "cache cargo deps":
    working_directory: ~/datadog
    parameters:
      docker_image:
        type: string
      triplet:
        type: string
      resource_class:
        type: string
        default: medium # mostly for more RAM for ramdisk
    <<: *BARE_DOCKER_MACHINE
    steps:
      - <<: *STEP_CHECKOUT
      - setup_docker:
          docker_image: << parameters.docker_image >>
      - restore_cache:
          name: Restore Cargo Package Cache
          keys:
            - profiling-cargo-cache-<< parameters.triplet >>-{{ checksum "profiling/Cargo.toml" }}
      - run:
          name: cargo fetch
          command: |
            cd profiling
            # On occasion, we've observed the .package-cache being in the cache.
            # If it's there, it will cause commands to stall, waiting for the file to be released.
            if [ -e '/rust/cargo/.package-cache' ] ; then
                echo "WARNING: .package-cache was part of the cache and shouldn't be!"
                rm -vf '/rust/cargo/.package-cache'
            fi

            cargo fetch -v --target << parameters.triplet >>
            chmod -R 777 '/rust/cargo'

            # ensure the .package-cache isn't there
            rm -vf '/rust/cargo/.package-cache'

      - save_cache:
          name: Save Cargo Package Cache
          key: profiling-cargo-cache-<< parameters.triplet >>-{{ checksum "profiling/Cargo.toml" }}
          paths:
            - /rust/cargo

  "cargo build --release":
    working_directory: ~/datadog
    parameters:
      docker_image:
        type: string
      abi_no:
        type: string
      triplet:
        type: string
      resource_class:
        type: string
        default: xlarge # mostly for more RAM for ramdisk
    <<: *BARE_DOCKER_MACHINE
    environment:
      - CARGO_TARGET_DIR: /mnt/ramdisk/cargo
    steps:
      - <<: *STEP_CHECKOUT
      - setup_docker:
          docker_image: << parameters.docker_image >>
      - restore_cache:
          name: Restore Cargo Package Cache
          keys:
            - profiling-cargo-cache-<< parameters.triplet >>-{{ checksum "profiling/Cargo.toml" }}
      - <<: *STEP_APPEND_BUILD_ID
      - run:
          name: Build Profiler
          command: |
            if [ -d '/opt/rh/devtoolset-7' ] ; then
                set +eo pipefail
                source scl_source enable devtoolset-7
                set -eo pipefail
            fi
            set -u
            libdir=$PWD/datadog-profiling/<< parameters.triplet >>/lib/php/<< parameters.abi_no >>
            mkdir -vp "${libdir}"
            command -v switch-php && switch-php "${PHP_VERSION}"
            cd profiling
            cargo build --release
            cp -v "${CARGO_TARGET_DIR}/release/libdatadog_php_profiling.so" "${libdir}/datadog-profiling.so"
      - persist_to_workspace:
          root: .
          paths:
            - datadog-profiling

  "profiling tests":
    working_directory: ~/datadog
    parameters:
      docker_image:
        type: string
      abi_no:
        type: string
      triplet:
        type: string
      resource_class:
        type: string
        default: xlarge # mostly for more RAM for ramdisk
    <<: *BARE_DOCKER_MACHINE
    environment:
      - CARGO_TARGET_DIR: /mnt/ramdisk/cargo
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - <<: *STEP_CHECKOUT
      - <<: *STEP_ATTACH_WORKSPACE
      - setup_docker:
          docker_image: << parameters.docker_image >>
      - restore_cache:
          name: Restore Cargo Package Cache
          keys:
            - profiling-cargo-cache-<< parameters.triplet >>-{{ checksum "profiling/Cargo.toml" }}
      - run:
          name: cargo tests
          command: |
            if [ -d '/opt/rh/devtoolset-7' ] ; then
                set +eo pipefail
                source scl_source enable devtoolset-7
                set -eo pipefail
            fi
            set -u
            command -v switch-php && switch-php "${PHP_VERSION}"
            cd profiling
            cargo test --release --features stack_walking_tests
      - run:
          name: phpt tests
          command: |
            set -u
            command -v switch-php && switch-php "${PHP_VERSION}"
            set -e
            libdir=$PWD/datadog-profiling/<< parameters.triplet >>/lib/php/<< parameters.abi_no >>
            cd profiling/tests
            # don't anticipate there being more than one
            run_tests_php=$(find $(php-config --prefix) -name run-tests.php)
            cp -v "${run_tests_php}" .
            export TEST_PHP_EXECUTABLE=$(which php)
            php run-tests.php -d "extension=${libdir}/datadog-profiling.so" --show-diff -g "FAIL,XFAIL,BORK,WARN,LEAK,XLEAK,SKIP" "phpt"

  compile_extension_centos:
    working_directory: ~/datadog
    parameters:
      resource_class:
        type: string
        default: medium
      docker_image:
        type: string
      so_suffix:
        type: string
        default: unknown
      catch_warnings:
        type: boolean
        default: true
      php_version:
        type: string
    <<: *BARE_DOCKER_MACHINE
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - <<: *STEP_CHECKOUT
      - <<: *STEP_ATTACH_WORKSPACE
      - setup_docker:
          docker_image: << parameters.docker_image >>
      - run: mkdir -p extensions_$(uname -m)
      - run:
          name: Build ndebug, nts configuration
          command: |
            set +eo pipefail; source scl_source enable devtoolset-7; set -eo pipefail
            switch-php << parameters.php_version >>
            make clean && make -j all ECHO_ARG="-e" CFLAGS="-std=gnu11 -O2 -g -Wall -Wextra <<# parameters.catch_warnings >> -Werror <</ parameters.catch_warnings >>"
            cp -v tmp/build_extension/.libs/ddtrace.so extensions_$(uname -m)/ddtrace-<< parameters.so_suffix >>.so
      - run:
          name: Build debug, nts configuration
          command: |
            set +eo pipefail; source scl_source enable devtoolset-7; set -eo pipefail
            switch-php << parameters.php_version >>-debug
            make clean && make -j all ECHO_ARG="-e" CFLAGS="-std=gnu11 -O0 -g -Wall -Wextra <<# parameters.catch_warnings >> -Werror <</ parameters.catch_warnings >>"
            cp -v tmp/build_extension/.libs/ddtrace.so extensions_$(uname -m)/ddtrace-<< parameters.so_suffix >>-debug.so
      - run:
          name: Build zts configuration
          command: |
            set +eo pipefail; source scl_source enable devtoolset-7; set -eo pipefail
            switch-php << parameters.php_version >>-zts
            make clean && make -j all ECHO_ARG="-e" CFLAGS="-std=gnu11 -O2 -g -Wall -Wextra <<# parameters.catch_warnings >> -Werror <</ parameters.catch_warnings >>"
            cp -v tmp/build_extension/.libs/ddtrace.so extensions_$(uname -m)/ddtrace-<< parameters.so_suffix >>-zts.so
      - persist_to_workspace:
          root: '.'
          paths: [ './extensions_*' ]

  "Prepare Code":
    working_directory: ~/datadog
    docker: [ image: 'cimg/php:7.3' ]
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
            - source-v1-{{ .Branch }}-
            - source-v1-
      - <<: *STEP_CHECKOUT
      - save_cache:
          key: source-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"
      - <<: *STEP_ATTACH_WORKSPACE
      - <<: *STEP_APPEND_BUILD_ID
      - <<: *STEP_COMPOSER_SELF_UPDATE
      - <<: *STEP_COMPOSER_UPDATE
      - <<: *STEP_COMPOSER_GENERATE
      - run:
          name: Showing folder containing generated files
          command: ls -al ~/datadog/bridge
      - persist_to_workspace:
          root: '.'
          paths:
            - './bridge/_generated*.php'
            # Persist files below because we generate a new version number.
            - './src/DDTrace/Tracer.php'
            - './ext/version.h'
            - './profiling/Cargo.toml'

  "package extension":
    working_directory: ~/datadog
    docker: [ image: 'datadog/docker-library:ddtrace_php_fpm_packaging' ]
    parameters:
      asan_build:
        type: boolean
        default: false
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - <<: *STEP_CHECKOUT
      - <<: *STEP_ATTACH_WORKSPACE
      - unless:
          condition: << parameters.asan_build >>
          steps:
            - run:
                name: Fetch PHP 5 packages
                command: |
                  set -eu
                  sudo apt-get install jq
                  PIPELINE_ID=$(curl 'https://circleci.com/api/v2/project/gh/DataDog/dd-trace-php/pipeline?branch=PHP-5' | jq -r '.items[0].id')
                  WORKFLOW_ID=$(curl "https://circleci.com/api/v2/pipeline/$PIPELINE_ID/workflow" | jq -r '.items[]|select(.name == "build_packages").id' | head -1)
                  JOB_ID=$(curl "https://circleci.com/api/v2/workflow/$WORKFLOW_ID/job" | jq -r '.items[]|select(.name == "package extension").id')
                  curl -Lo php5.tar.gz "https://output.circle-artifacts.com/output/job/$JOB_ID/artifacts/0/datadog-php-tracer-1.0.0-nightly.x86_64.tar.gz"
                  tar xzf php5.tar.gz
                  mv opt/datadog-php/extensions/* extensions_x86_64/
            - run:
                name: Package Profiler
                command: |
                  # The layout matches what the dd-prof-php releases had to minimize
                  # transition work.
                  for triplet in x86_64-unknown-linux-gnu x86_64-alpine-linux-musl aarch64-unknown-linux-gnu aarch64-alpine-linux-musl; do
                    # Add licensing. TODO: generate rust libs to third-party CSV.
                    cp -v profiling/LICENSE* profiling/NOTICE "datadog-profiling/${triplet}/"
                    mkdir -vp "datadog-profiling/${triplet}/bin"
                    # Add undocumented installer currently used by relenv
                    cp -v profiling/datadog-profiling-install.sh "datadog-profiling/${triplet}/bin/"
                  done
                  tar -czf "datadog-profiling.tar.gz" "datadog-profiling/"
      - run:
          name: Build packages
          command: |
            <<# parameters.asan_build >>export DDTRACE_MAKE_PACKAGES_ASAN=1<</ parameters.asan_build >>
            make packages
      - run:
          name: Display sha256sums
          command: cd build/packages && find . -type f -exec sha256sum {} + && cd -
      - run:
          name: Spot-check shape of library name
          command: |
            version=$(awk -F\' '/const VERSION/ { print $2 }' < src/DDTrace/Tracer.php)
            filename="dd-library-php-${version}-x86_64-linux-gnu.tar.gz"
            if ! [[ -f "build/packages/$filename" ]] ; then
              echo "Expected file 'build/packages/$filename' to exist!"
              exit 1
            fi

            if ! [[ "$CIRCLE_BRANCH" =~ "ddtrace-" ]] ; then
              githash="${CIRCLE_SHA1?}"
              echo "Non-release branch detected. Checking for git sha1: $githash."
              if echo "$filename" | grep -q "+$githash" ; then
                echo "Confirmed: '$filename' contains git sha1 hash '$githash'."
              else
                echo "'$filename' didn't contain git sha1 hash '$githash'."
                exit 1
              fi
            fi

      - store_artifacts: { path: 'build/packages', destination: / }
      - store_artifacts: { path: 'packages.tar.gz', destination: '/all/packages.tar.gz' }
      - store_artifacts: { path: 'pecl', destination: '/pecl' }
      - persist_to_workspace:
          root: '.'
          paths: ['./build/packages', 'dockerfiles/verify_packages']

  "x-profiling phpt tests on Alpine":
    working_directory: ~/datadog
    parameters:
      php_major_minor:
        type: string
    docker:
      - image: datadog/dd-trace-ci:php-compile-extension-alpine-<< parameters.php_major_minor >>
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - <<: *STEP_CHECKOUT
      - <<: *STEP_ATTACH_WORKSPACE
      - run:
          name: Run cross-product profiling phpt tests
          command: |
              set -eu
              apk update
              apk add autoconf coreutils gcc make
              cd ./build/packages
              installable_bundle=$(find . -maxdepth 1 -name 'dd-library-php-*-x86_64-linux-musl.tar.gz')
              php datadog-setup.php --file "${installable_bundle}" --php-bin php --enable-profiling
              cd -
              # run phpize just to get run-tests.php
              phpize
              php run-tests.php -p $(which php) --show-diff -g "FAIL,XFAIL,BORK,WARN,LEAK,XLEAK,SKIP" tests/ext/profiling

  placeholder:
    docker:
      - image: busybox
    steps:
      - run: echo "."

  system_tests:
    machine:
      # https://support.circleci.com/hc/en-us/articles/360007324514-How-can-I-use-Docker-volume-mounting-on-CircleCI-
      image: ubuntu-2004:current
    parameters:
      build:
        type: string
      run:
        type: string
    resource_class: large
    working_directory: ~/datadog
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
      - <<: *STEP_CHECKOUT
      - <<: *STEP_ATTACH_WORKSPACE
      - run:
          # TODO: removes this step once host-in-runner is merged on system tests
          name: Install good version of docker-compose
          command: |
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose

      - run:
          name: Install python 3.9
          command: |
            sudo apt-get update
            sudo apt-get install python3.9-venv

      - run:
          name: versions
          command: |
            docker --version
            docker-compose --version
      - run:
          name: Clone System Tests repo
          command: git clone https://github.com/DataDog/system-tests.git
      - run:
          name: Copy .tar.gz file to system test binaries folder
          command: |
            ls -la build/packages
            installable_bundle=$(find build/packages -maxdepth 1 -name 'datadog-php-tracer-*.x86_64.tar.gz' -o -name 'dd-library-php-*-x86_64-linux-gnu.tar.gz' | xargs)
            echo using $installable_bundle
            cp $installable_bundle build/packages/datadog-setup.php system-tests/binaries/
      - run:
          name: Build
          command: << parameters.build >>
      - run:
          name: Run
          command: << parameters.run >>
      - store_artifacts:
          path: system-tests/logs
          destination: system-tests.tar.gz

workflows:
  version: 2

  components:
    jobs:
      # We need to prepare code because centos 6's git is too old for CircleCI, true story:
      # > error: unknown switch `B'
      - "Prepare Code"
      - ExtensionComponents:
          requires: [ 'Prepare Code' ]
          matrix:
            parameters:
              docker_image:
                # Don't need PHP, just basic toolchain
                - "datadog/dd-trace-ci:centos-7"
                - "datadog/dd-trace-ci:alpine"
                - "datadog/dd-trace-ci:buster"
              cmake_version:
                - "3.19.8"
                - "3.21.4"
              catch2_version:
                - "2.13.7"

  zend_abstract_interface:
    jobs:
      - "Prepare Code"
      - Tea:
          requires: [ 'Prepare Code' ]
          matrix:
            parameters:
              os:
                # TODO Add CentOS & Alpine
                - "buster"
              php_version:
                - "7.0"
                - "7.1"
                - "7.2"
                - "7.3"
                - "7.4"
                - "8.0"
                - "8.1"
                - "8.2"
              cmake_version:
                - "3.19.7"
                - "3.20.1"
              catch2_version:
                - "2.13.5"

  zend_abstract_interface_shared_exts:
    jobs:
      - "Prepare Code"
      - ZaiSharedExts:
          requires: [ 'Prepare Code' ]
          matrix:
            parameters:
              php_version:
                - "7.4"
                - "8.0"

  build_packages:
    jobs:
      - "Prepare Code"

      # In the event the cache is broken, all cargo jobs will end up fetching
      # dependencies. Although this is a bit wasteful, when the cache isn't
      # broken this saves us about 30+ secs of build time on the critical path.
      # Since the tracer folks are unlikely to break the cache, they will save
      # time in their CI cycles and only profiler folks will have to pay.
      - "cache cargo deps":
          name: "cache cargo deps - x86_64-alpine-linux-musl"
          docker_image: "datadog/dd-trace-ci:php-compile-extension-alpine-8.1"
          triplet: "x86_64-alpine-linux-musl"
      - "cache cargo deps":
          name: "cache cargo deps - aarch64-alpine-linux-musl"
          docker_image: "datadog/dd-trace-ci:php-compile-extension-alpine-8.1"
          triplet: "aarch64-alpine-linux-musl"
          resource_class: "arm.medium"
      - "cargo build --release":
          name: "Profiler PHP v7.1 - x86_64-alpine-linux-musl"
          docker_image: "datadog/dd-trace-ci:php-compile-extension-alpine-7.1"
          abi_no: "20160303"
          triplet: "x86_64-alpine-linux-musl"
      - "cargo build --release":
          name: "Profiler PHP v7.1 - aarch64-alpine-linux-musl"
          docker_image: "datadog/dd-trace-ci:php-compile-extension-alpine-7.1"
          abi_no: "20160303"
          triplet: "aarch64-alpine-linux-musl"
          resource_class: "arm.medium"
      - "cargo build --release":
          name: "Profiler PHP v7.2 - x86_64-alpine-linux-musl"
          docker_image: "datadog/dd-trace-ci:php-compile-extension-alpine-7.2"
          abi_no: "20170718"
          triplet: "x86_64-alpine-linux-musl"
      - "cargo build --release":
          name: "Profiler PHP v7.2 - aarch64-alpine-linux-musl"
          docker_image: "datadog/dd-trace-ci:php-compile-extension-alpine-7.2"
          abi_no: "20170718"
          triplet: "aarch64-alpine-linux-musl"
          resource_class: "arm.medium"
      - "cargo build --release":
          name: "Profiler PHP v7.3 - x86_64-alpine-linux-musl"
          docker_image: "datadog/dd-trace-ci:php-compile-extension-alpine-7.3"
          abi_no: "20180731"
          triplet: "x86_64-alpine-linux-musl"
      - "cargo build --release":
          name: "Profiler PHP v7.3 - aarch64-alpine-linux-musl"
          docker_image: "datadog/dd-trace-ci:php-compile-extension-alpine-7.3"
          abi_no: "20180731"
          triplet: "aarch64-alpine-linux-musl"
          resource_class: "arm.medium"
      - "cargo build --release":
          name: "Profiler PHP v7.4 - x86_64-alpine-linux-musl"
          docker_image: "datadog/dd-trace-ci:php-compile-extension-alpine-7.4"
          abi_no: "20190902"
          triplet: "x86_64-alpine-linux-musl"
      - "cargo build --release":
          name: "Profiler PHP v7.4 - aarch64-alpine-linux-musl"
          docker_image: "datadog/dd-trace-ci:php-compile-extension-alpine-7.4"
          abi_no: "20190902"
          triplet: "aarch64-alpine-linux-musl"
          resource_class: "arm.medium"
      - "cargo build --release":
          name: "Profiler PHP v8.0 - x86_64-alpine-linux-musl"
          docker_image: "datadog/dd-trace-ci:php-compile-extension-alpine-8.0"
          abi_no: "20200930"
          triplet: "x86_64-alpine-linux-musl"
      - "cargo build --release":
          name: "Profiler PHP v8.0 - aarch64-alpine-linux-musl"
          docker_image: "datadog/dd-trace-ci:php-compile-extension-alpine-8.0"
          abi_no: "20200930"
          triplet: "aarch64-alpine-linux-musl"
          resource_class: "arm.medium"
      - "cargo build --release":
          name: "Profiler PHP v8.1 - x86_64-alpine-linux-musl"
          docker_image: "datadog/dd-trace-ci:php-compile-extension-alpine-8.1"
          abi_no: "20210902"
          triplet: "x86_64-alpine-linux-musl"
      - "cargo build --release":
          name: "Profiler PHP v8.1 - aarch64-alpine-linux-musl"
          docker_image: "datadog/dd-trace-ci:php-compile-extension-alpine-8.1"
          abi_no: "20210902"
          triplet: "aarch64-alpine-linux-musl"
          resource_class: "arm.medium"
      - "cargo build --release":
          name: "Profiler PHP v8.2 - x86_64-alpine-linux-musl"
          docker_image: "datadog/dd-trace-ci:php-compile-extension-alpine-8.2"
          abi_no: "20220829"
          triplet: "x86_64-alpine-linux-musl"
      - "cargo build --release":
          name: "Profiler PHP v8.2 - aarch64-alpine-linux-musl"
          docker_image: "datadog/dd-trace-ci:php-compile-extension-alpine-8.2"
          abi_no: "20220829"
          triplet: "aarch64-alpine-linux-musl"
          resource_class: "arm.medium"

      # These don't actually need the other job to complete, but this way
      # there are fewer resources used when the build step fails.
      - "profiling tests":
          requires: [ "Profiler PHP v7.1 - x86_64-alpine-linux-musl" ]
          name: "Profiler test PHP v7.1 - x86_64-alpine-linux-musl"
          docker_image: "datadog/dd-trace-ci:php-compile-extension-alpine-7.1"
          abi_no: "20160303"
          triplet: "x86_64-alpine-linux-musl"
      - "profiling tests":
          requires: [ "Profiler PHP v7.1 - aarch64-alpine-linux-musl" ]
          name: "Profiler test PHP v7.1 - aarch64-alpine-linux-musl"
          docker_image: "datadog/dd-trace-ci:php-compile-extension-alpine-7.1"
          abi_no: "20160303"
          triplet: "aarch64-alpine-linux-musl"
          resource_class: "arm.medium"
      - "profiling tests":
          requires: [ "Profiler PHP v7.2 - x86_64-alpine-linux-musl" ]
          name: "Profiler test PHP v7.2 - x86_64-alpine-linux-musl"
          docker_image: "datadog/dd-trace-ci:php-compile-extension-alpine-7.2"
          abi_no: "20170718"
          triplet: "x86_64-alpine-linux-musl"
      - "profiling tests":
          requires: [ "Profiler PHP v7.2 - aarch64-alpine-linux-musl" ]
          name: "Profiler test PHP v7.2 - aarch64-alpine-linux-musl"
          docker_image: "datadog/dd-trace-ci:php-compile-extension-alpine-7.2"
          abi_no: "20170718"
          triplet: "aarch64-alpine-linux-musl"
          resource_class: "arm.medium"
      - "profiling tests":
          requires: [ "Profiler PHP v7.3 - x86_64-alpine-linux-musl" ]
          name: "Profiler test PHP v7.3 - x86_64-alpine-linux-musl"
          docker_image: "datadog/dd-trace-ci:php-compile-extension-alpine-7.3"
          abi_no: "20180731"
          triplet: "x86_64-alpine-linux-musl"
      - "profiling tests":
          requires: [ "Profiler PHP v7.3 - aarch64-alpine-linux-musl" ]
          name: "Profiler test PHP v7.3 - aarch64-alpine-linux-musl"
          docker_image: "datadog/dd-trace-ci:php-compile-extension-alpine-7.3"
          abi_no: "20180731"
          triplet: "aarch64-alpine-linux-musl"
          resource_class: "arm.medium"
      - "profiling tests":
          requires: [ "Profiler PHP v7.4 - x86_64-alpine-linux-musl" ]
          name: "Profiler test PHP v7.4 - x86_64-alpine-linux-musl"
          docker_image: "datadog/dd-trace-ci:php-compile-extension-alpine-7.4"
          abi_no: "20190902"
          triplet: "x86_64-alpine-linux-musl"
      - "profiling tests":
          requires: [ "Profiler PHP v7.4 - aarch64-alpine-linux-musl" ]
          name: "Profiler test PHP v7.4 - aarch64-alpine-linux-musl"
          docker_image: "datadog/dd-trace-ci:php-compile-extension-alpine-7.4"
          abi_no: "20190902"
          triplet: "aarch64-alpine-linux-musl"
          resource_class: "arm.medium"
      - "profiling tests":
          requires: [ "Profiler PHP v8.0 - x86_64-alpine-linux-musl" ]
          name: "Profiler test PHP v8.0 - x86_64-alpine-linux-musl"
          docker_image: "datadog/dd-trace-ci:php-compile-extension-alpine-8.0"
          abi_no: "20200930"
          triplet: "x86_64-alpine-linux-musl"
      - "profiling tests":
          requires: [ "Profiler PHP v8.0 - aarch64-alpine-linux-musl" ]
          name: "Profiler test PHP v8.0 - aarch64-alpine-linux-musl"
          docker_image: "datadog/dd-trace-ci:php-compile-extension-alpine-8.0"
          abi_no: "20200930"
          triplet: "aarch64-alpine-linux-musl"
          resource_class: "arm.medium"
      - "profiling tests":
          requires: [ "Profiler PHP v8.1 - x86_64-alpine-linux-musl" ]
          name: "Profiler test PHP v8.1 - x86_64-alpine-linux-musl"
          docker_image: "datadog/dd-trace-ci:php-compile-extension-alpine-8.1"
          abi_no: "20210902"
          triplet: "x86_64-alpine-linux-musl"
      - "profiling tests":
          requires: [ "Profiler PHP v8.1 - aarch64-alpine-linux-musl" ]
          name: "Profiler test PHP v8.1 - aarch64-alpine-linux-musl"
          docker_image: "datadog/dd-trace-ci:php-compile-extension-alpine-8.1"
          abi_no: "20210902"
          triplet: "aarch64-alpine-linux-musl"
          resource_class: "arm.medium"
      - "profiling tests":
          requires: [ "Profiler PHP v8.2 - x86_64-alpine-linux-musl" ]
          name: "Profiler test PHP v8.2 - x86_64-alpine-linux-musl"
          docker_image: "datadog/dd-trace-ci:php-compile-extension-alpine-8.2"
          abi_no: "20220829"
          triplet: "x86_64-alpine-linux-musl"
      - "profiling tests":
          requires: [ "Profiler PHP v8.2 - aarch64-alpine-linux-musl" ]
          name: "Profiler test PHP v8.2 - aarch64-alpine-linux-musl"
          docker_image: "datadog/dd-trace-ci:php-compile-extension-alpine-8.2"
          abi_no: "20220829"
          triplet: "aarch64-alpine-linux-musl"
          resource_class: "arm.medium"

      - "cache cargo deps":
          name: "cache cargo deps - x86_64-unknown-linux-gnu"
          docker_image: "datadog/dd-trace-ci:centos-7"
          triplet: "x86_64-unknown-linux-gnu"
      - "cache cargo deps":
          name: "cache cargo deps - aarch64-unknown-linux-gnu"
          docker_image: "datadog/dd-trace-ci:centos-7"
          triplet: "aarch64-unknown-linux-gnu"
          resource_class: "arm.medium"
      - "cargo build --release":
          name: "Profiler PHP v7.1 - x86_64-unknown-linux-gnu"
          docker_image: "datadog/dd-trace-ci:php-7.1_centos-7"
          abi_no: "20160303"
          triplet: "x86_64-unknown-linux-gnu"
      - "cargo build --release":
          name: "Profiler PHP v7.1 - aarch64-unknown-linux-gnu"
          docker_image: "datadog/dd-trace-ci:php-7.1_centos-7"
          abi_no: "20160303"
          triplet: "aarch64-unknown-linux-gnu"
          resource_class: "arm.medium"
      - "cargo build --release":
          name: "Profiler PHP v7.2 - x86_64-unknown-linux-gnu"
          docker_image: "datadog/dd-trace-ci:php-7.2_centos-7"
          abi_no: "20170718"
          triplet: "x86_64-unknown-linux-gnu"
      - "cargo build --release":
          name: "Profiler PHP v7.2 - aarch64-unknown-linux-gnu"
          docker_image: "datadog/dd-trace-ci:php-7.2_centos-7"
          abi_no: "20170718"
          triplet: "aarch64-unknown-linux-gnu"
          resource_class: "arm.medium"
      - "cargo build --release":
          name: "Profiler PHP v7.3 - x86_64-unknown-linux-gnu"
          docker_image: "datadog/dd-trace-ci:php-7.3_centos-7"
          abi_no: "20180731"
          triplet: "x86_64-unknown-linux-gnu"
      - "cargo build --release":
          name: "Profiler PHP v7.3 - aarch64-unknown-linux-gnu"
          docker_image: "datadog/dd-trace-ci:php-7.3_centos-7"
          abi_no: "20180731"
          triplet: "aarch64-unknown-linux-gnu"
          resource_class: "arm.medium"
      - "cargo build --release":
          name: "Profiler PHP v7.4 - x86_64-unknown-linux-gnu"
          docker_image: "datadog/dd-trace-ci:php-7.4_centos-7"
          abi_no: "20190902"
          triplet: "x86_64-unknown-linux-gnu"
      - "cargo build --release":
          name: "Profiler PHP v7.4 - aarch64-unknown-linux-gnu"
          docker_image: "datadog/dd-trace-ci:php-7.4_centos-7"
          abi_no: "20190902"
          triplet: "aarch64-unknown-linux-gnu"
          resource_class: "arm.medium"
      - "cargo build --release":
          name: "Profiler PHP v8.0 - x86_64-unknown-linux-gnu"
          docker_image: "datadog/dd-trace-ci:php-8.0_centos-7"
          abi_no: "20200930"
          triplet: "x86_64-unknown-linux-gnu"
      - "cargo build --release":
          name: "Profiler PHP v8.0 - aarch64-unknown-linux-gnu"
          docker_image: "datadog/dd-trace-ci:php-8.0_centos-7"
          abi_no: "20200930"
          triplet: "aarch64-unknown-linux-gnu"
          resource_class: "arm.medium"
      - "cargo build --release":
          name: "Profiler PHP v8.1 - x86_64-unknown-linux-gnu"
          docker_image: "datadog/dd-trace-ci:php-8.1_centos-7"
          abi_no: "20210902"
          triplet: "x86_64-unknown-linux-gnu"
      - "cargo build --release":
          name: "Profiler PHP v8.1 - aarch64-unknown-linux-gnu"
          docker_image: "datadog/dd-trace-ci:php-8.1_centos-7"
          abi_no: "20210902"
          triplet: "aarch64-unknown-linux-gnu"
          resource_class: "arm.medium"
      - "cargo build --release":
          name: "Profiler PHP v8.2 - x86_64-unknown-linux-gnu"
          docker_image: "datadog/dd-trace-ci:php-8.2_centos-7"
          abi_no: "20220829"
          triplet: "x86_64-unknown-linux-gnu"
      - "cargo build --release":
          name: "Profiler PHP v8.2 - aarch64-unknown-linux-gnu"
          docker_image: "datadog/dd-trace-ci:php-8.2_centos-7"
          abi_no: "20220829"
          triplet: "aarch64-unknown-linux-gnu"
          resource_class: "arm.medium"

      # These don't actually need the other job to complete, but this way
      # there are fewer resources used when the build step fails.
      - "profiling tests":
          requires: [ "Profiler PHP v7.1 - x86_64-unknown-linux-gnu" ]
          name: "Profiler test PHP v7.1 - x86_64-unknown-linux-gnu"
          docker_image: "datadog/dd-trace-ci:php-7.1_centos-7"
          abi_no: "20160303"
          triplet: "x86_64-unknown-linux-gnu"
      - "profiling tests":
          requires: [ "Profiler PHP v7.1 - aarch64-unknown-linux-gnu" ]
          name: "Profiler test PHP v7.1 - aarch64-unknown-linux-gnu"
          docker_image: "datadog/dd-trace-ci:php-7.1_centos-7"
          abi_no: "20160303"
          triplet: "aarch64-unknown-linux-gnu"
          resource_class: "arm.medium"
      - "profiling tests":
          requires: [ "Profiler PHP v7.2 - x86_64-unknown-linux-gnu" ]
          name: "Profiler test PHP v7.2 - x86_64-unknown-linux-gnu"
          docker_image: "datadog/dd-trace-ci:php-7.2_centos-7"
          abi_no: "20170718"
          triplet: "x86_64-unknown-linux-gnu"
      - "profiling tests":
          requires: [ "Profiler PHP v7.2 - aarch64-unknown-linux-gnu" ]
          name: "Profiler test PHP v7.2 - aarch64-unknown-linux-gnu"
          docker_image: "datadog/dd-trace-ci:php-7.2_centos-7"
          abi_no: "20170718"
          triplet: "aarch64-unknown-linux-gnu"
          resource_class: "arm.medium"
      - "profiling tests":
          requires: [ "Profiler PHP v7.3 - x86_64-unknown-linux-gnu" ]
          name: "Profiler test PHP v7.3 - x86_64-unknown-linux-gnu"
          docker_image: "datadog/dd-trace-ci:php-7.3_centos-7"
          abi_no: "20180731"
          triplet: "x86_64-unknown-linux-gnu"
      - "profiling tests":
          requires: [ "Profiler PHP v7.3 - aarch64-unknown-linux-gnu" ]
          name: "Profiler test PHP v7.3 - aarch64-unknown-linux-gnu"
          docker_image: "datadog/dd-trace-ci:php-7.3_centos-7"
          abi_no: "20180731"
          triplet: "aarch64-unknown-linux-gnu"
          resource_class: "arm.medium"
      - "profiling tests":
          requires: [ "Profiler PHP v7.4 - x86_64-unknown-linux-gnu" ]
          name: "Profiler test PHP v7.4 - x86_64-unknown-linux-gnu"
          docker_image: "datadog/dd-trace-ci:php-7.4_centos-7"
          abi_no: "20190902"
          triplet: "x86_64-unknown-linux-gnu"
      - "profiling tests":
          requires: [ "Profiler PHP v7.4 - aarch64-unknown-linux-gnu" ]
          name: "Profiler test PHP v7.4 - aarch64-unknown-linux-gnu"
          docker_image: "datadog/dd-trace-ci:php-7.4_centos-7"
          abi_no: "20190902"
          triplet: "aarch64-unknown-linux-gnu"
          resource_class: "arm.medium"
      - "profiling tests":
          requires: [ "Profiler PHP v8.0 - x86_64-unknown-linux-gnu" ]
          name: "Profiler test PHP v8.0 - x86_64-unknown-linux-gnu"
          docker_image: "datadog/dd-trace-ci:php-8.0_centos-7"
          abi_no: "20200930"
          triplet: "x86_64-unknown-linux-gnu"
      - "profiling tests":
          requires: [ "Profiler PHP v8.0 - aarch64-unknown-linux-gnu" ]
          name: "Profiler test PHP v8.0 - aarch64-unknown-linux-gnu"
          docker_image: "datadog/dd-trace-ci:php-8.0_centos-7"
          abi_no: "20200930"
          triplet: "aarch64-unknown-linux-gnu"
          resource_class: "arm.medium"
      - "profiling tests":
          requires: [ "Profiler PHP v8.1 - x86_64-unknown-linux-gnu" ]
          name: "Profiler test PHP v8.1 - x86_64-unknown-linux-gnu"
          docker_image: "datadog/dd-trace-ci:php-8.1_centos-7"
          abi_no: "20210902"
          triplet: "x86_64-unknown-linux-gnu"
      - "profiling tests":
          requires: [ "Profiler PHP v8.1 - aarch64-unknown-linux-gnu" ]
          name: "Profiler test PHP v8.1 - aarch64-unknown-linux-gnu"
          docker_image: "datadog/dd-trace-ci:php-8.1_centos-7"
          abi_no: "20210902"
          triplet: "aarch64-unknown-linux-gnu"
          resource_class: "arm.medium"
      - "profiling tests":
          requires: [ "Profiler PHP v8.2 - x86_64-unknown-linux-gnu" ]
          name: "Profiler test PHP v8.2 - x86_64-unknown-linux-gnu"
          docker_image: "datadog/dd-trace-ci:php-8.2_centos-7"
          abi_no: "20220829"
          triplet: "x86_64-unknown-linux-gnu"
      - "profiling tests":
          requires: [ "Profiler PHP v8.2 - aarch64-unknown-linux-gnu" ]
          name: "Profiler test PHP v8.2 - aarch64-unknown-linux-gnu"
          docker_image: "datadog/dd-trace-ci:php-8.2_centos-7"
          abi_no: "20220829"
          triplet: "aarch64-unknown-linux-gnu"
          resource_class: "arm.medium"

      - compile_alpine:
          requires: [ 'Prepare Code' ]
          matrix:
            parameters:
              php_major_minor:
                - '7.0'
                - '7.1'
                - '7.2'
                - '7.3'
                - '7.4'
                - '8.0'
                - '8.1'
                - '8.2'
              resource_class:
                - "medium"
                - "arm.medium"
      - compile_extension_centos:
          requires: [ 'Prepare Code' ]
          name: "Compile x86_64 PHP 70 nts + zts + debug"
          php_version: "7.0"
          docker_image: "datadog/dd-trace-ci:php-7.0_centos-7"
          so_suffix: "20151012"
      - compile_extension_centos:
          requires: [ 'Prepare Code' ]
          name: "Compile aarch64 PHP 70 nts + zts + debug"
          php_version: "7.0"
          docker_image: "datadog/dd-trace-ci:php-7.0_centos-7"
          so_suffix: "20151012"
          resource_class: "arm.medium"
      - compile_extension_centos:
          requires: [ 'Prepare Code' ]
          name: "Compile x86_64 PHP 71 nts + zts + debug"
          php_version: "7.1"
          docker_image: "datadog/dd-trace-ci:php-7.1_centos-7"
          so_suffix: "20160303"
      - compile_extension_centos:
          requires: [ 'Prepare Code' ]
          name: "Compile aarch64 PHP 71 nts + zts + debug"
          php_version: "7.1"
          docker_image: "datadog/dd-trace-ci:php-7.1_centos-7"
          so_suffix: "20160303"
          resource_class: "arm.medium"
      - compile_extension_centos:
          requires: [ 'Prepare Code' ]
          name: "Compile x86_64 PHP 72 nts + zts + debug"
          php_version: "7.2"
          docker_image: "datadog/dd-trace-ci:php-7.2_centos-7"
          so_suffix: "20170718"
      - compile_extension_centos:
          requires: [ 'Prepare Code' ]
          name: "Compile aarch64 PHP 72 nts + zts + debug"
          php_version: "7.2"
          docker_image: "datadog/dd-trace-ci:php-7.2_centos-7"
          so_suffix: "20170718"
          resource_class: "arm.medium"
      - compile_extension_centos:
          requires: [ 'Prepare Code' ]
          name: "Compile x86_64 PHP 73 nts + zts + debug"
          php_version: "7.3"
          docker_image: "datadog/dd-trace-ci:php-7.3_centos-7"
          so_suffix: "20180731"
          catch_warnings: false # On debug builds: unused parameter '__zend_filename'
      - compile_extension_centos:
          requires: [ 'Prepare Code' ]
          name: "Compile aarch64 PHP 73 nts + zts + debug"
          php_version: "7.3"
          docker_image: "datadog/dd-trace-ci:php-7.3_centos-7"
          so_suffix: "20180731"
          catch_warnings: false # On debug builds: unused parameter '__zend_filename'
          resource_class: "arm.medium"
      - compile_extension_centos:
          requires: [ 'Prepare Code' ]
          name: "Compile x86_64 PHP 74 nts + zts + debug"
          php_version: "7.4"
          docker_image: "datadog/dd-trace-ci:php-7.4_centos-7"
          so_suffix: "20190902"
      - compile_extension_centos:
          requires: [ 'Prepare Code' ]
          name: "Compile aarch64 PHP 74 nts + zts + debug"
          php_version: "7.4"
          docker_image: "datadog/dd-trace-ci:php-7.4_centos-7"
          so_suffix: "20190902"
          resource_class: "arm.medium"
      - compile_extension_centos:
          requires: [ 'Prepare Code' ]
          name: "Compile x86_64 PHP 80 nts + zts + debug"
          docker_image: "datadog/dd-trace-ci:php-8.0_centos-7"
          php_version: "8.0"
          so_suffix: "20200930"
      - compile_extension_centos:
          requires: [ 'Prepare Code' ]
          name: "Compile aarch64 PHP 80 nts + zts + debug"
          docker_image: "datadog/dd-trace-ci:php-8.0_centos-7"
          php_version: "8.0"
          so_suffix: "20200930"
          resource_class: "arm.medium"
      - compile_extension_centos:
          requires: [ 'Prepare Code' ]
          name: "Compile x86_64 PHP 81 nts + zts + debug"
          docker_image: "datadog/dd-trace-ci:php-8.1_centos-7"
          php_version: "8.1"
          so_suffix: "20210902"
      - compile_extension_centos:
          requires: [ 'Prepare Code' ]
          name: "Compile aarch64 PHP 81 nts + zts + debug"
          docker_image: "datadog/dd-trace-ci:php-8.1_centos-7"
          php_version: "8.1"
          so_suffix: "20210902"
          resource_class: "arm.medium"
      - compile_extension_centos:
          requires: [ 'Prepare Code' ]
          name: "Compile x86_64 PHP 82 nts + zts + debug"
          docker_image: "datadog/dd-trace-ci:php-8.2_centos-7"
          php_version: "8.2"
          so_suffix: "20220829"
      - compile_extension_centos:
          requires: [ 'Prepare Code' ]
          name: "Compile aarch64 PHP 82 nts + zts + debug"
          docker_image: "datadog/dd-trace-ci:php-8.2_centos-7"
          php_version: "8.2"
          so_suffix: "20220829"
          resource_class: "arm.medium"
      - pecl_build:
          requires: [ 'Prepare Code' ]
          name: "Build PECL"

      - "package extension":
          requires:
            - compile_alpine
            - "Compile x86_64 PHP 70 nts + zts + debug"
            - "Compile aarch64 PHP 70 nts + zts + debug"
            - "Compile x86_64 PHP 71 nts + zts + debug"
            - "Compile aarch64 PHP 71 nts + zts + debug"
            - "Compile x86_64 PHP 72 nts + zts + debug"
            - "Compile aarch64 PHP 72 nts + zts + debug"
            - "Compile x86_64 PHP 73 nts + zts + debug"
            - "Compile aarch64 PHP 73 nts + zts + debug"
            - "Compile x86_64 PHP 74 nts + zts + debug"
            - "Compile aarch64 PHP 74 nts + zts + debug"
            - "Compile x86_64 PHP 80 nts + zts + debug"
            - "Compile aarch64 PHP 80 nts + zts + debug"
            - "Compile x86_64 PHP 81 nts + zts + debug"
            - "Compile aarch64 PHP 81 nts + zts + debug"
            - "Compile x86_64 PHP 82 nts + zts + debug"
            - "Compile aarch64 PHP 82 nts + zts + debug"
            - "Build PECL"

            - "Profiler PHP v7.1 - x86_64-alpine-linux-musl"
            - "Profiler PHP v7.2 - x86_64-alpine-linux-musl"
            - "Profiler PHP v7.3 - x86_64-alpine-linux-musl"
            - "Profiler PHP v7.4 - x86_64-alpine-linux-musl"
            - "Profiler PHP v8.0 - x86_64-alpine-linux-musl"
            - "Profiler PHP v8.1 - x86_64-alpine-linux-musl"
            - "Profiler PHP v8.2 - x86_64-alpine-linux-musl"

            - "Profiler PHP v7.1 - x86_64-unknown-linux-gnu"
            - "Profiler PHP v7.2 - x86_64-unknown-linux-gnu"
            - "Profiler PHP v7.3 - x86_64-unknown-linux-gnu"
            - "Profiler PHP v7.4 - x86_64-unknown-linux-gnu"
            - "Profiler PHP v8.0 - x86_64-unknown-linux-gnu"
            - "Profiler PHP v8.1 - x86_64-unknown-linux-gnu"
            - "Profiler PHP v8.2 - x86_64-unknown-linux-gnu"

            - "Profiler PHP v7.1 - aarch64-alpine-linux-musl"
            - "Profiler PHP v7.2 - aarch64-alpine-linux-musl"
            - "Profiler PHP v7.3 - aarch64-alpine-linux-musl"
            - "Profiler PHP v7.4 - aarch64-alpine-linux-musl"
            - "Profiler PHP v8.0 - aarch64-alpine-linux-musl"
            - "Profiler PHP v8.1 - aarch64-alpine-linux-musl"
            - "Profiler PHP v8.2 - aarch64-alpine-linux-musl"

            - "Profiler PHP v7.1 - aarch64-unknown-linux-gnu"
            - "Profiler PHP v7.2 - aarch64-unknown-linux-gnu"
            - "Profiler PHP v7.3 - aarch64-unknown-linux-gnu"
            - "Profiler PHP v7.4 - aarch64-unknown-linux-gnu"
            - "Profiler PHP v8.0 - aarch64-unknown-linux-gnu"
            - "Profiler PHP v8.1 - aarch64-unknown-linux-gnu"
            - "Profiler PHP v8.2 - aarch64-unknown-linux-gnu"

      - compile_extension_asan:
          requires: [ 'Prepare Code' ]
          name: "Compile x86_64 PHP 74 debug-zts-asan"
          docker_image: "datadog/dd-trace-ci:php-7.4_buster"
          so_suffix: "20190902"
      - compile_extension_asan:
          requires: [ 'Prepare Code' ]
          name: "Compile aarch64 PHP 74 debug-zts-asan"
          docker_image: "datadog/dd-trace-ci:php-7.4_buster"
          so_suffix: "20190902"
          resource_class: "arm.medium"
      - compile_extension_asan:
          requires: [ 'Prepare Code' ]
          name: "Compile x86_64 PHP 80 debug-zts-asan"
          docker_image: "datadog/dd-trace-ci:php-8.0_buster"
          so_suffix: "20200930"
      - compile_extension_asan:
          requires: [ 'Prepare Code' ]
          name: "Compile aarch64 PHP 80 debug-zts-asan"
          docker_image: "datadog/dd-trace-ci:php-8.0_buster"
          so_suffix: "20200930"
          resource_class: "arm.medium"
      - compile_extension_asan:
          requires: [ 'Prepare Code' ]
          name: "Compile x86_64 PHP 81 debug-zts-asan"
          docker_image: "datadog/dd-trace-ci:php-8.1_buster"
          so_suffix: "20210902"
      - compile_extension_asan:
          requires: [ 'Prepare Code' ]
          name: "Compile aarch64 PHP 81 debug-zts-asan"
          docker_image: "datadog/dd-trace-ci:php-8.1_buster"
          so_suffix: "20210902"
          resource_class: "arm.medium"
      - compile_extension_asan:
          requires: [ 'Prepare Code' ]
          name: "Compile x86_64 PHP 82 debug-zts-asan"
          docker_image: "datadog/dd-trace-ci:php-8.2_buster"
          so_suffix: "20220829"
      - compile_extension_asan:
          requires: [ 'Prepare Code' ]
          name: "Compile aarch64 PHP 82 debug-zts-asan"
          docker_image: "datadog/dd-trace-ci:php-8.2_buster"
          so_suffix: "20220829"
          resource_class: "arm.medium"

      - "package extension":
          name: "package extension zts-debug-asan"
          asan_build: true
          requires:
            - "Compile x86_64 PHP 74 debug-zts-asan"
            - "Compile aarch64 PHP 74 debug-zts-asan"
            - "Compile x86_64 PHP 80 debug-zts-asan"
            - "Compile aarch64 PHP 80 debug-zts-asan"
            - "Compile x86_64 PHP 81 debug-zts-asan"
            - "Compile aarch64 PHP 81 debug-zts-asan"
            - "Compile x86_64 PHP 82 debug-zts-asan"
            - "Compile aarch64 PHP 82 debug-zts-asan"

      - "x-profiling phpt tests on Alpine":
          requires: [ 'package extension' ]
          matrix:
            parameters:
              php_major_minor:
                - '7.1'
                - '7.2'
                - '7.3'
                - '7.4'
                - '8.0'
                - '8.1'
                - '8.2'

      - randomized_tests:
          requires: [ 'package extension' ]
          matrix:
            parameters:
              batch: [ 1, 2, 3, 4, 5 ]
      - randomized_tests_arm:
          requires: [ 'package extension' ]
          matrix:
            parameters:
              batch: [ 1, 2, 3, 4, 5 ]
      - randomized_tests_asan:
          requires: [ 'package extension zts-debug-asan' ]
          matrix:
            parameters:
              batch: [ 6, 7, 8, 9, 10 ]
      - randomized_tests_arm_asan:
          requires: [ 'package extension zts-debug-asan' ]
          matrix:
            parameters:
              batch: [ 6, 7, 8, 9, 10 ]
      - installer_tests:
          requires: [ 'package extension' ]
      - placeholder:
          requires: [ 'package extension' ]
          name: Framework tests
      - framework_tests:
          requires: [ "Framework tests" ]
          framework_target: flow
          name: "Flow testsuite"
      - framework_tests:
          requires: [ "Framework tests" ]
          framework_target: flow_no_ddtrace
          name: "Flow baseline testsuite"
      # The dd-trace-ci:php-framework-laravel docker image needs to be modified to handle the laravel queue integration
      #- framework_tests:
      #    requires: [ "Framework tests" ]
      #    framework_target: laravel
      #    name: "Laravel testsuite"
      - framework_tests:
          requires: [ "Framework tests" ]
          framework_target: laravel_no_ddtrace
          name: "Laravel baseline testsuite"
      # Symfony path needs to be updated as symfony/contracts 2.0 has been released and it changes
      # test files where the patch is applied.
      # - framework_tests:
      #     requires: [ "Framework tests" ]
      #     framework_target: symfony
      #     name: "Symfony testsuite"
      # - framework_tests:
      #     requires: [ "Framework tests" ]
      #     framework_target: symfony_no_ddtrace
      #     name: "Symfony baseline testsuite"
      - framework_tests:
          requires: [ "Framework tests" ]
          framework_target: mongodb-driver
          name: "Mongodb driver testsuite"
      - framework_tests:
          requires: [ "Framework tests" ]
          framework_target: mongodb-driver_no_ddtrace
          name: "Mongodb driver baseline testsuite"
      - framework_tests:
          requires: [ "Framework tests" ]
          framework_target: phpredis3
          name: "PHPRedis 3 testsuite"
      - framework_tests:
          requires: [ "Framework tests" ]
          framework_target: phpredis3_no_ddtrace
          name: "PHPRedis 3 baseline testsuite"
      - framework_tests:
          requires: [ "Framework tests" ]
          framework_target: phpredis4
          name: "PHPRedis 4 testsuite"
      - framework_tests:
          requires: [ "Framework tests" ]
          framework_target: phpredis4_no_ddtrace
          name: "PHPRedis 4 baseline testsuite"
      - framework_tests:
          requires: [ "Framework tests" ]
          framework_target: phpredis5
          name: "PHPRedis 5 testsuite"
      - framework_tests:
          requires: [ "Framework tests" ]
          framework_target: phpredis5_no_ddtrace
          name: "PHPRedis 5 baseline testsuite"
      - framework_tests:
          requires: [ "Framework tests" ]
          framework_target: wordpress
          name: "WordPress testsuite"
      - framework_tests:
          requires: [ "Framework tests" ]
          framework_target: wordpress_no_ddtrace
          name: "WordPress baseline testsuite"
      - verify_alpine:
          requires: [ "package extension" ]
          matrix:
            parameters:
              php_package:
                - php php-fpm php-json
              install_type:
                - php_installer
                - native_package
              docker_image:
                - alpine:3.8
                - alpine:3.9
                - alpine:3.10
                - alpine:3.11
                - alpine:3.12
                - alpine:3.15
                - alpine:3.16
                - alpine:latest
      - verify_alpine:
          requires: [ "package extension" ]
          matrix:
            parameters:
              php_package:
                - php7 php7-fpm php7-json
              install_type:
                - php_installer
                - native_package
              docker_image:
                - alpine:3.7
                - alpine:3.8
                - alpine:3.9
                - alpine:3.9
                - alpine:3.10
                - alpine:3.11
                - alpine:3.12
                - alpine:3.15
      - verify_alpine:
          requires: [ "package extension" ]
          php_package: ''
          matrix:
            parameters:
              install_type:
                - php_installer
                - native_package
              docker_image:
                - php:7.0-fpm-alpine
                - php:7.1-fpm-alpine
                - php:7.2-fpm-alpine
                - php:7.3-fpm-alpine
                - php:7.4-fpm-alpine
                - php:8.0-fpm-alpine
                - php:8.1-fpm-alpine
                - php:8.2-rc-fpm-alpine
      - verify_centos:
          requires: [ "package extension" ]
          matrix:
            parameters:
              docker_image:
                - centos:7
              install_type:
                - php_installer
                - native_package
              configuration:
                - PHP_MAJOR=7 PHP_MINOR=0
                - PHP_MAJOR=7 PHP_MINOR=1
                - PHP_MAJOR=7 PHP_MINOR=2
                - PHP_MAJOR=7 PHP_MINOR=3
                - PHP_MAJOR=7 PHP_MINOR=4
                - PHP_MAJOR=8 PHP_MINOR=0
                - PHP_MAJOR=8 PHP_MINOR=1
                - PHP_MAJOR=8 PHP_MINOR=2
      - verify_debian:
          requires: [ "package extension" ]
          matrix:
            parameters:
              install_type:
                - php_installer
                - native_package
              install_mode:
                - sury
              docker_image:
                - debian:buster
                - debian:bullseye
              configuration:
                - PHP_VERSION=7.0
                - PHP_VERSION=7.1
                - PHP_VERSION=7.2
                - PHP_VERSION=7.3
                - PHP_VERSION=7.4
                - PHP_VERSION=8.0
                - PHP_VERSION=8.1
                - PHP_VERSION=8.2

      - verify_tar_gz:
          requires: [ "package extension" ]
          name: "Verify x86_64 .tar.gz"
          php_major_minor: "7.0"
      - verify_tar_gz:
          requires: [ "package extension" ]
          name: "Verify aarch64 .tar.gz"
          php_major_minor: "8.1"
          resource_class: "arm.medium"
        # There is little value in testing several versions, since all the packages are already verified on the
        # respective platforms using the native packages. Let's save some CPU cycles.

      - verify_no_json_ext:
          requires: [ "package extension" ]

      - pecl_tests:
          requires: [ "Build PECL" ]
          name: "PHP 70 PECL tests"
          docker_image: "datadog/dd-trace-ci:php-7.0_buster"
      - pecl_tests:
          requires: [ "Build PECL" ]
          name: "PHP 71 PECL tests"
          docker_image: "datadog/dd-trace-ci:php-7.1_buster"
      - pecl_tests:
          requires: [ "Build PECL" ]
          name: "PHP 72 PECL tests"
          docker_image: "datadog/dd-trace-ci:php-7.2_buster"
      - pecl_tests:
          requires: [ "Build PECL" ]
          name: "PHP 73 PECL tests"
          docker_image: "datadog/dd-trace-ci:php-7.3_buster"
      - pecl_tests:
          requires: [ "Build PECL" ]
          name: "PHP 74 PECL tests"
          docker_image: "datadog/dd-trace-ci:php-7.4_buster"
      - pecl_tests:
          requires: [ "Build PECL" ]
          name: "PHP 80 PECL tests"
          docker_image: "datadog/dd-trace-ci:php-8.0_buster"
      - pecl_tests:
          requires: [ "Build PECL" ]
          name: "PHP 81 PECL tests"
          docker_image: "datadog/dd-trace-ci:php-8.1_buster"
      - pecl_tests:
          requires: [ "Build PECL" ]
          name: "PHP 82 PECL tests"
          docker_image: "datadog/dd-trace-ci:php-8.2_buster"
      - integration_tests:
          requires: [ 'Prepare Code' ]
          name: "PHP 72 web tests with apache (+ opcache)"
          resource_class: medium+
          sapi: apache2handler
          integration_testsuite: "test_web"
          docker_image: "datadog/dd-trace-ci:php-7.2_buster"
          php_major_minor: "7.2"
      - integration_tests:
          requires: [ 'Prepare Code' ]
          name: "PHP 72 web tests with nginx + FastCGI"
          resource_class: medium+
          sapi: cgi-fcgi
          integration_testsuite: "test_web"
          docker_image: "datadog/dd-trace-ci:php-7.2_buster"
          php_major_minor: "7.2"
      - integration_tests:
          requires: [ 'Prepare Code' ]
          name: "PHP 73 web tests with nginx + FastCGI"
          resource_class: medium+
          sapi: cgi-fcgi
          integration_testsuite: "test_web"
          docker_image: "datadog/dd-trace-ci:php-7.3_buster"
          php_major_minor: "7.3"
      - integration_tests:
          requires: [ 'Prepare Code' ]
          name: "PHP 74 web tests with apache (+ opcache)"
          resource_class: medium+
          sapi: apache2handler
          integration_testsuite: "test_web"
          docker_image: "datadog/dd-trace-ci:php-7.4_buster"
          php_major_minor: "7.4"
      - integration_tests:
          requires: [ 'Prepare Code' ]
          name: "PHP 74 web tests with nginx + FastCGI"
          resource_class: medium+
          sapi: cgi-fcgi
          integration_testsuite: "test_web"
          docker_image: "datadog/dd-trace-ci:php-7.4_buster"
          php_major_minor: "7.4"
      - integration_tests:
          requires: [ 'Prepare Code' ]
          name: "PHP 80 web tests with apache (+ opcache)"
          resource_class: medium+
          sapi: apache2handler
          integration_testsuite: "test_web"
          docker_image: "datadog/dd-trace-ci:php-8.0_buster"
          php_major_minor: "8.0"
      - integration_tests:
          requires: [ 'Prepare Code' ]
          name: "PHP 80 web tests with nginx + FastCGI"
          resource_class: medium+
          sapi: cgi-fcgi
          integration_testsuite: "test_web"
          docker_image: "datadog/dd-trace-ci:php-8.0_buster"
          php_major_minor: "8.0"
      - integration_tests:
          requires: [ 'Prepare Code' ]
          name: "PHP 81 web tests with apache (+ opcache)"
          resource_class: medium+
          sapi: apache2handler
          integration_testsuite: "test_web"
          docker_image: "datadog/dd-trace-ci:php-8.1_buster"
          php_major_minor: "8.1"
      - integration_tests:
          requires: [ 'Prepare Code' ]
          name: "PHP 81 web tests with nginx + FastCGI"
          resource_class: medium+
          sapi: cgi-fcgi
          integration_testsuite: "test_web"
          docker_image: "datadog/dd-trace-ci:php-8.1_buster"
          php_major_minor: "8.1"
      - integration_tests:
          requires: [ 'Prepare Code' ]
          name: "PHP 82 web tests with apache (+ opcache)"
          resource_class: medium+
          sapi: apache2handler
          integration_testsuite: "test_web"
          docker_image: "datadog/dd-trace-ci:php-8.2_buster"
          php_major_minor: "8.2"
      - integration_tests:
          requires: [ 'Prepare Code' ]
          name: "PHP 82 web tests with nginx + FastCGI"
          resource_class: medium+
          sapi: cgi-fcgi
          integration_testsuite: "test_web"
          docker_image: "datadog/dd-trace-ci:php-8.2_buster"
          php_major_minor: "8.2"
      - integration_tests:
          requires: [ 'Prepare Code' ]
          name: "PHP 74 custom autoloaded web tests with nginx + PHP-FPM"
          resource_class: medium+
          sapi: fpm-fcgi
          integration_testsuite: "test_web_custom"
          docker_image: "datadog/dd-trace-ci:php-7.4_buster"
          php_major_minor: "7.4"

      - min_install_tests:
          requires: [ 'package extension' ]
          name: "PHP min install tests"
          matrix:
            parameters:
              php_version:
                - '8.0'

      - system_tests:
          requires: [ 'package extension' ]
          name: "System tests"
          build: |
            cd system-tests
            ./build.sh php
          run: |
            cd system-tests
            DD_API_KEY=$SYSTEM_TESTS_DD_API_KEY ./run.sh

      - system_tests:
          requires: [ 'package extension' ]
          name: "Parametric tests"
          build: |
            cd system-tests/parametric
            export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin
            sudo apt-get install -y python-is-python3
            pip install wheel && pip install -r requirements.txt
          run: |
            cd system-tests/parametric
            export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin
            CLIENTS_ENABLED=php ./run.sh

  build:
    jobs:

      - "Prepare Code"

      - test:
          requires: [ 'Prepare Code' ]
          matrix:
            parameters:
              php_major_minor:
                - "7.0"
                - "7.1"
                - "7.2"
                - "7.3"
                - "7.4"
                - "8.0"
                - "8.1"
                - "8.2"
              make_target:
                - test_coverage
                - test_extension_ci
                - test_unit
                - test_api_unit
                - test_c2php
                - test_c_disabled
                - test_internal_api_randomized
                - test_opcache
      - coverage:
          requires: [ 'Prepare Code' ]
          matrix:
            parameters:
              php_major_minor:
                - "7.0"
                - "7.1"
                - "7.2"
                - "7.3"
                - "7.4"
                - "8.0"
                - "8.1"
                - "8.2"
              make_target:
                - test_coverage
      - asan:
          requires: [ 'Prepare Code' ]
          matrix:
            parameters:
              php_major_minor:
                - '7.4'
                - '8.0'
                - '8.1'
                - '8.2'
              switch_php_version:
                - debug-zts-asan
              resource_class:
                - medium
                - arm.medium
              make_target:
                - test_c
                - test_with_init_hook
                - test_internal_api_randomized
                - test_opcache
            exclude:
                # apparently for no discernible reason, on x86 asan builds PHP 7.4. fails to allocate opcache shared memory
              - php_major_minor: '7.4'
                resource_class: medium
                make_target: test_opcache
                switch_php_version: debug-zts-asan

      - integration:
          requires: [ 'Prepare Code' ]
          resource_class: medium+
          matrix:
            parameters:
              php_major_minor:
                - '7.0'
                - '7.1'
                - '7.2'
                - '7.3'
                - '7.4'
                - '8.0'
                - '8.1'
                - '8.2'
              make_target:
                - test_composer
                - test_integration
                - test_integrations
                - test_distributed_tracing
                - test_auto_instrumentation

      - integration:
          requires: [ 'Prepare Code' ]
          # Due to Symfony OOM during composer update
          resource_class: xlarge
          matrix:
            parameters:
              php_major_minor:
                - '7.0'
                - '7.1'
                - '7.2'
                - '7.3'
                - '7.4'
                - '8.0'
                - '8.1'
                - '8.2'
              make_target:
                - test_web

      - integration:
          requires: [ 'Prepare Code' ]
          resource_class: medium+
          sapi: fpm-fcgi
          disable_runner_distributed_tracing: true
          matrix:
            parameters:
              php_major_minor:
                - '7.0'
                - '7.1'
                - '7.2'
                - '7.3'
                - '7.4'
                - '8.0'
                - '8.1'
                - '8.2'
              make_target:
                - test_distributed_tracing

      - integration:
          # NOTE: test_integrations_phpredis5 is not included in the PHP 8.0 integrations tests because of this bug that
          # only shows up in debug builds of PHP (https://github.com/phpredis/phpredis/issues/1869).
          # Since we run tests using php debug builds, we have to run test_integrations_phpredis5 in a separate runner
          # and switch to a non-debug PHP build.
          # Once the fix for https://github.com/phpredis/phpredis/issues/1869 is released, we can remove this additional
          # runner and add back again test_integrations_phpredis5 to the PHP 8.0 test suite.
          requires: [ 'Prepare Code' ]
          matrix:
            parameters:
              php_major_minor:
                - '8.0'
                - '8.1'
                - '8.2'
              switch_php_version:
                - nts
              make_target:
                - test_integrations_phpredis5

      - xdebug_tests:
          requires: [ 'Prepare Code' ]
          name: "PHP 70 Xdebug tests"
          docker_image: "datadog/dd-trace-ci:php-7.0_buster"
          xdebug_version_one: "2.7.2"
      - xdebug_tests:
          requires: [ 'Prepare Code' ]
          name: "PHP 71 Xdebug tests"
          docker_image: "datadog/dd-trace-ci:php-7.1_buster"
          xdebug_version_one: "2.9.5"
          xdebug_version_two: "2.9.2"
      # - unit_tests: # disabled due to posisbly leaking tests
      #     requires: [ 'Prepare Code' ]
      #     name: "PHP 70 Unit tests-zts"
      #     docker_image: "datadog/docker-library:ddtrace_alpine_php-7.0-zts-debug"
      - xdebug_tests:
          requires: [ 'Prepare Code' ]
          name: "PHP 72 Xdebug tests"
          docker_image: "datadog/dd-trace-ci:php-7.2_buster"
          xdebug_version_one: "2.9.5"
          xdebug_version_two: "2.9.2"
      - xdebug_tests:
          requires: [ 'Prepare Code' ]
          name: "PHP 73 Xdebug tests"
          docker_image: "datadog/dd-trace-ci:php-7.3_buster"
          xdebug_version_one: "2.9.5"
          xdebug_version_two: "2.9.2"
      - xdebug_tests:
          requires: [ 'Prepare Code' ]
          name: "PHP 74 Xdebug tests"
          docker_image: "datadog/dd-trace-ci:php-7.4_buster"
          xdebug_version_one: "2.9.5"
          xdebug_version_two: "2.9.2"
      - xdebug_tests:
          requires: [ 'Prepare Code' ]
          name: "PHP 80 Xdebug tests"
          docker_image: "datadog/dd-trace-ci:php-8.0_buster"
          xdebug_version_one: "3.0.0"
      - xdebug_tests:
          requires: [ 'Prepare Code' ]
          name: "PHP 81 Xdebug tests"
          docker_image: "datadog/dd-trace-ci:php-8.1_buster"
          xdebug_version_one: "3.1.0"
      - xdebug_tests:
          requires: [ 'Prepare Code' ]
          name: "PHP 82 Xdebug tests"
          docker_image: "datadog/dd-trace-ci:php-8.2_buster"
          xdebug_version_one: "3.2.0RC1"
      - placeholder:
          requires: [ 'Prepare Code' ]
          name: Language tests
      - php_language_tests:
          requires: [ 'Language tests' ]
          name: "PHP 82 language tests"
          xfail_list: dockerfiles/ci/xfail_tests/8.2.list
          docker_image: "datadog/dd-trace-ci:php-8.2_buster"
      - php_language_tests:
          requires: [ 'Language tests' ]
          name: "PHP 81 language tests"
          xfail_list: dockerfiles/ci/xfail_tests/8.1.list
          docker_image: "datadog/dd-trace-ci:php-8.1_buster"
      - php_language_tests:
          requires: [ 'Language tests' ]
          name: "PHP 80 language tests"
          xfail_list: dockerfiles/ci/xfail_tests/8.0.list
          docker_image: "datadog/dd-trace-ci:php-8.0_buster"
      - php_language_tests:
          requires: [ 'Language tests' ]
          name: "PHP 74 language tests"
          xfail_list: dockerfiles/ci/xfail_tests/7.4.list
          docker_image: "datadog/dd-trace-ci:php-7.4_buster"
      - php_language_tests:
          requires: [ 'Language tests' ]
          name: "PHP 73 language tests"
          xfail_list: dockerfiles/ci/xfail_tests/7.3.list
          docker_image: "datadog/dd-trace-ci:php-7.3_buster"
      - php_language_tests:
          requires: [ 'Language tests' ]
          name: "PHP 72 language tests"
          xfail_list: dockerfiles/ci/xfail_tests/7.2.list
          docker_image: "datadog/dd-trace-ci:php-7.2_buster"
      - php_language_tests:
          requires: [ 'Language tests' ]
          name: "PHP 71 language tests"
          xfail_list: dockerfiles/ci/xfail_tests/7.1.list
          docker_image: "datadog/dd-trace-ci:php-7.1_buster"
      - php_language_tests:
          requires: [ 'Language tests' ]
          name: "PHP 70 language tests"
          xfail_list: dockerfiles/ci/xfail_tests/7.0.list
          docker_image: "datadog/dd-trace-ci:php-7.0_buster"
      - internal_integrations:
          requires: [ 'Prepare Code' ]
          name: "PHP 80 curl integration tests a shared lib"
          ext_name: "curl"
          docker_image: "datadog/dd-trace-ci:php-8.0-shared-ext"
      - "Lint files":
          requires: [ 'Prepare Code' ]
      - "Lint PHP 5":
          requires: [ 'Prepare Code' ]
      - static_analysis:
          requires: [ 'Prepare Code' ]
          name: "Static Analysis 71"
          docker_image: cimg/php:7.1
          scenario: opentracing_beta6
      - static_analysis:
          requires: [ 'Prepare Code' ]
          name: "Static Analysis 80"
          docker_image: cimg/php:8.0
          scenario: opentracing10
      - "Post-Install Hook":
          requires: [ 'Prepare Code' ]
