plugins {
    id 'groovy'
    id 'application'
    id 'de.undercouch.download' version '4.0.4'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'ch.qos.logback:logback-classic:1.4.7'
    implementation 'org.slf4j:jul-to-slf4j:1.7.36'

    implementation 'org.apache.groovy:groovy:4.0.16'
    implementation 'com.google.guava:guava:32.1.3-jre'
    implementation 'org.msgpack:msgpack-core:0.9.6'
    implementation 'io.javalin:javalin:5.4.2'

    implementation platform('org.testcontainers:testcontainers-bom:1.16.2')
    implementation "org.testcontainers:junit-jupiter"
    implementation 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
    implementation 'com.flipkart.zjsonpatch:zjsonpatch:0.4.13'
}

test {
}
tasks['test'].enabled(false)

ext.testMatrix = ['7.0', '7.1', '7.2', '7.3', '7.4', '8.0', '8.1', '8.2', '8.3'].collectMany {
    [[it, 'release'], [it, 'release-zts']]
}
ext.uuid = "id -u".execute().text.trim()

apply from: "$rootDir/gradle/images.gradle"

def dockerPullTask(String tag) {
    String taskName = "dockerPull-${tag}"
    if (tasks.findByName(taskName) != null) {
        return tasks[taskName]
    }

    tasks.register("dockerPull-${tag}", Exec) {
        String imageName = "datadog/dd-appsec-php-ci:$tag"
        description = "Pull ${imageName} from Docker Hub"

        onlyIf {
            Process proc = ['docker', 'image', 'inspect', imageName].execute()
            proc.waitForOrKill(5_000)
            proc.exitValue() != 0
        }

        commandLine 'docker', 'pull', imageName
    }
}

def creationDateOf(String image) {
    Process proc = ['docker', 'image', 'inspect', '--format="{{.Created}}"',  image].execute()
    proc.waitForOrKill(5_000)
    if (proc.exitValue() != 0) {
        return 0
    }
    def imageModifiedStr = proc.text.trim().replace('"', '')
    Date volumeDate = Date.from(OffsetDateTime.parse(imageModifiedStr).toInstant())
    volumeDate.time
}

def createVolumeTask = { String volumeName ->
    String taskName = "createVolume-$volumeName"
    if (tasks.findByName(taskName) != null) {
        return tasks[taskName]
    }
    tasks.register(taskName, Exec) { Exec it ->
        onlyIf {
            Process proc = ['docker', 'volume', 'inspect', volumeName].execute()
            proc.waitForOrKill(5_000)
            proc.exitValue() != 0
        }
        it.commandLine 'docker', 'volume', 'create', volumeName
        doLast {
            exec {
                commandLine 'docker', 'run', '--rm', '-v', "${volumeName}:/vol", 'busybox', 'sh', '-c',
                        "chown -R ${uuid} /vol"
            }
        }
    }
}

task downloadComposerOld(type: Download) {
    src 'https://getcomposer.org/download/latest-2.2.x/composer.phar'
    dest 'build/composer-2.2.x.phar'
    overwrite false
    doLast {
        exec {
            commandLine 'chmod', '+x', outputFiles.first().toString()
        }
    }
}

task downloadComposer(type: Download) {
    src 'https://getcomposer.org/download/2.6.6/composer.phar'
    dest 'build/composer-2.6.6.phar'
    overwrite false
    doLast {
        exec {
            commandLine 'chmod', '+x', outputFiles.first().toString()
        }
    }
}

def buildRunInDockerTask = { Map options ->
    String baseName = options.get('baseName')
    def version = options.get('version')
    def variant = options.get('variant')
    String imageTag = "${options.get('baseTag', 'php')}-$version-$variant"
    String imageName = "$ext.repo:$imageTag"
    def pullTask = dockerPullTask(imageTag)

    def volumes = [:]
    def binds = [
            ("${projectDir}/../../..".toString()):  '/project'
    ]

    if (options.get('needsTracer', true)) {
        volumes["php-tracer-${version}-${variant}"] = [
                mountPoint: '/project/tmp',
        ]
    }
    if (options.get('needsAppsec', true)) {
        volumes["php-appsec-${version}-${variant}"] = [
                mountPoint: '/appsec',
        ]
    }
    if (options.get('needsHunterCache', true)) {
        if (project.hasProperty('localHunterCache')) {
            binds[project.getProperty('localHunterCache')] = '/root/.hunter'
        } else {
            volumes['php-appsec-hunter-cache'] = [
                    mountPoint: '/root/.hunter',
            ]
        }
    }
    if (options.get('needsCargoCache', true)) {
        volumes['php-tracer-cargo-cache'] = [
                mountPoint: '/root/.cargo/registry',
        ]
    }

    def composerDlTask
    if (options.get('composer', false)) {
        if (version in ['7.0', '7.1']) {
            composerDlTask = tasks['downloadComposerOld']
        } else {
            composerDlTask = tasks['downloadComposer']
        }
        String composerFile = composerDlTask.outputFiles.first()
        binds[composerFile] = '/usr/local/bin/composer'
    }

    volumes.keySet().each { volumeName ->
        volumes[volumeName]['task'] = createVolumeTask(volumeName)
    }

    def t = tasks.register("$baseName-$version-$variant", Exec) {
        if (options['description']) {
            description = "${options['description']} for PHP $version $variant"

            def inputsSpec = options.get('inputs', [:])
            inputsSpec.get('dirs', []).each {
                inputs.dir it
            }
            inputsSpec.get('files', []).each {
                inputs.file it
            }

            if (!options['outputs']) {
                outputs.upToDateWhen { false }
            } else {
                String volumeName = "${options['outputs']['volume']}-${version}-${variant}"
                def files = options['outputs']['files']
                outputs.upToDateWhen {
                    Process proc = ['docker', 'run', '--rm', '--mount',
                                    "type=volume,src=$volumeName,dst=/vol",
                                    'busybox', 'sh', '-c',
                                    "stat -c %Y ${files.collect { "'/vol/$it'" }.join(' ')} | sort -n | head -1"]
                            .execute()

                    proc.waitForOrKill(5_000)
                    if (proc.exitValue() != 0) {
                        return false
                    }
                    def procOutput = proc.text.trim()
                    if (procOutput == '') {
                        return false
                    }
                    long outputsTime = procOutput.toLong() * 1000
                    long latestInputDate = inputs.files.collect { it.lastModified() }.max()
                    if (latestInputDate > outputsTime) {
                        return false
                    }

                    long imageTime = creationDateOf(imageName)
                    imageTime < outputsTime
                }
            }

            def commandLine = [
                    'docker', 'run', '--init', '--rm',
                    '--entrypoint', '/bin/bash',
                    '--user', uuid,
                    '-e', 'HOME=/tmp',
            ]
            binds.each { source, dest ->
                commandLine.addAll(['--mount', "type=bind,src=${source},dst=${dest}"])
            }
            volumes.each { volumeName, volumeSpec ->
                commandLine << '--mount'
                commandLine << "type=volume,src=${volumeName},dst=${volumeSpec['mountPoint']}"
                dependsOn volumeSpec['task']
            }
            commandLine << imageName
            dependsOn pullTask

            commandLine.addAll(options['command'])
            it.commandLine commandLine

            if (composerDlTask) {
                dependsOn composerDlTask
            }
        }
    }

    if (options.containsKey('outputs') && options['outputs'].containsKey('volume')) {
        String taskName = "cleanVolume-${options['outputs']['volume']}-${version}-${variant}"
        if (!tasks.findByName(taskName)) {
            def task = tasks.register(taskName, Exec) {
                description = "Clean volume ${options['outputs']['volume']} for PHP $version $variant"
                commandLine 'docker', 'volume', 'rm', '-f', "${options['outputs']['volume']}-${version}-${variant}"
            }
            tasks['clean'].dependsOn task
        }
    }

    t
}

def buildTracerTask = { String version, String variant ->
    buildRunInDockerTask(
            baseName: 'buildTracer',
            baseTag: 'php',
            version: version,
            variant: variant,
            needsAppsec: false,
            description: 'Build tracer for PHP',
            inputs: [
                    dirs: ['../../../ext', '../../../zend_abstract_interface'],
            ],
            outputs: [
                    volume: 'php-tracer',
                    files: ['build_extension/modules/ddtrace.so'],
            ],
            command: [
                    '-e', '-c',
                    '''
                    cd /project
                    PHPRC= make /project/tmp/build_extension/modules/ddtrace.so
                    '''
            ]
    )
}

def buildAppSecTask = { String version, String variant ->
    buildRunInDockerTask(
            baseName: 'buildAppsec',
            baseTag: 'php',
            version: version,
            variant: variant,
            needsTracer: false,
            description: 'Build appsec for PHP',
            inputs: [
                    dirs: [
                            '../../../cmake',
                            '../../../zend_abstract_interface',
                            '../../cmake',
                            '../../third_party',
                            '../../src'],
                    files: ['../../CMakeLists.txt'],
            ],
            outputs: [
                    volume: 'php-appsec',
                    files: ['ddappsec.so', 'ddappsec-helper'],
            ],
            command: [
                    '-e', '-c',
                    '''
                    git config --global --add safe.directory '*'
                    cd /appsec
                    test -f CMakeCache.txt || \\
                        cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo \\
                              -DCMAKE_INSTALL_PREFIX=/appsec \\
                              -DDD_APPSEC_ENABLE_PATCHELF_LIBC=ON \\
                              -DCMAKE_TOOLCHAIN_FILE=/build/Toolchain.cmake \\
                              -DDD_APPSEC_TESTING=ON /project/appsec
                    make -j extension ddappsec-helper && \\
                        touch ddappsec.so ddappsec-helper
                '''
            ]
    )
}

def runUnitTestsTask = { String phpVersion, String variant ->
    def env = ''
    if (project.hasProperty('tests')) {
        env = "TESTS='${project.getProperty('tests')}' "
    }
    def task = buildRunInDockerTask(
            baseName: 'xtest',
            baseTag: 'php',
            version: phpVersion,
            variant: variant,
            description: 'Build appsec for PHP',
            command: [
                    '-e', '-c',
                    """
                    cd /appsec
                    ${env}make -j xtest
                    """
            ]
    )

    task.configure {
        dependsOn "buildTracer-$phpVersion-$variant"
        dependsOn "buildAppsec-$phpVersion-$variant"
    }
}

def runMainTask = { String phpVersion, String variant ->
    tasks.create("runMain$phpVersion-$variant", JavaExec) {
        mainClass = project.property('testClass')
        classpath = sourceSets.test.runtimeClasspath
        standardInput = System.in

        if (project.hasProperty('XDEBUG')) {
            systemProperty 'XDEBUG', '1'
        }
        systemProperty 'PHP_VERSION', phpVersion
        systemProperty 'VARIANT', variant

        dependsOn "buildTracer-$phpVersion-$variant"
        dependsOn "buildAppsec-$phpVersion-$variant"
    }
}

testMatrix.each { spec ->
    String phpVersion = spec[0]
    String variant = spec[1]

    buildTracerTask(phpVersion, variant)
    buildAppSecTask(phpVersion, variant)
    runUnitTestsTask(phpVersion, variant)
    if (project.hasProperty('testClass')) {
        runMainTask(phpVersion, variant)
    }

    def task = tasks.register("test${phpVersion}-$variant", Test) {
        group = 'Verification'
        description = "Run tests for PHP ${phpVersion} ${variant}"

        it.outputs.upToDateWhen { false }

        it.useJUnitPlatform {
            includeEngines('junit-jupiter')
            excludeEngines('junit-vintage')
        }

        it.systemProperty 'PHP_VERSION', phpVersion
        it.systemProperty 'VARIANT', variant
        if (project.hasProperty('XDEBUG')) {
            it.systemProperty 'XDEBUG', '1'
        }

        dependsOn "buildTracer-${phpVersion}-${variant}"
        dependsOn "buildAppsec-${phpVersion}-${variant}"

        if (version in ['7.0', '7.1']) {
            dependsOn downloadComposerOld
        } else {
            dependsOn downloadComposer
        }
    }

    tasks['check'].dependsOn task
}

task downloadCaches(type: Download) {
    src 'https://sqreen-ci-java.s3.amazonaws.com/php-appsec-volume-caches.tar.gz'
    dest 'build/php-appsec-volume-caches.tar.gz'
    overwrite false
}

task loadCaches(type: Exec) {
    description = "Load the docker caches"
    inputs.file "${project.buildDir}/php-appsec-volume-caches.tar.gz"

    commandLine 'docker', 'run', '--rm',
            '-v', 'php-tracer-cargo-cache:/caches/php-tracer-cargo-cache',
            '-v', 'php-appsec-hunter-cache:/caches/php-appsec-hunter-cache',
            '-v', "${project.buildDir}:/build",
            'busybox',
            'sh', '-c',
            "tar -xzf /build/php-appsec-volume-caches.tar.gz -C /caches && \
                chown -R ${uuid} /caches"

    dependsOn downloadCaches
    dependsOn 'createVolume-php-tracer-cargo-cache'
    dependsOn 'createVolume-php-appsec-hunter-cache'
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

// vim: set et sw=4 ts=4:
