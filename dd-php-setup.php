<?php

// echo "Extensions: " . ini_get('extension_dir') . "\n";
// echo "Binary: " . PHP_BINARY . "\n";

// echo "Hello\n";

const INI_CONF = 'Scan this dir for additional .ini files';
const EXTENSION_DIR = 'extension_dir';
const THREAD_SAFETY = 'Thread Safety';
const PHP_EXTENSION = 'PHP Extension';
const IS_DEBUG = 'Debug Build';
const SUPPORTED_PHP_VERSIONS = ['5.4', '5.5', '5.6', '7.0', '7.1', '7.2', '7.3', '7.4', '8.0', '8.1'];

function main()
{
    if (is_truthy(getenv('DD_TEST_EXECUTION'))) {
        return;
    }

    $options = parse_validate_user_options();
    exit();
    $version = '0.63.0';
    $url = "https://github.com/DataDog/dd-trace-php/releases/download/$version/datadog-php-tracer-$version.x86_64.tar.gz";

    $tmpDir = sys_get_temp_dir() . '/dd-library';
    $tmpDirTarGz = $tmpDir . '/dd-trace-php.tar.gz';
    $tmpSourcesDir = $tmpDir . '/opt/datadog-php/dd-trace-sources';
    $tmpExtensionsDir = $tmpDir . '/opt/datadog-php/extensions';

    $installDir = sys_get_temp_dir() . '/__true__opt/datadog/dd-library/' . $version;
    $installDirSourcesDir = $installDir . '/dd-trace-sources';
    $installDirWrapperPath = $installDirSourcesDir . '/bridge/dd_wrap_autoloader.php';
    $installDirExtensionsDir = $installDir . '/extensions';

    // preparing tmp folders
    execute_or_exit("Cannot create directory '$tmpDir'", "mkdir -p $tmpDir");
    execute_or_exit("Cannot clear '$tmpDir'", "rm -rf $tmpDir/*.*");

    // downloading the specific .tar.gz archive and extract to tmp folder
    // only relevant files will be copied
    download($url, $tmpDirTarGz);
    execute_or_exit("Cannot extract the archive", "tar -xf $tmpDirTarGz -C $tmpDir");

    // copying sources to the final destination
    execute_or_exit("Cannot create directory '$installDirSourcesDir'", "mkdir -p $installDirSourcesDir");
    execute_or_exit("Cannot copy files from '$tmpSourcesDir' to '$installDirSourcesDir'", "cp -r $tmpSourcesDir/* $installDirSourcesDir");
    execute_or_exit("Cannot create directory '$installDirExtensionsDir'", "mkdir -p $installDirExtensionsDir");
    execute_or_exit("Cannot copy files from '$tmpExtensionsDir' to '$installDirExtensionsDir'", "cp -r $tmpExtensionsDir/* $installDirExtensionsDir");

    $phpProperties = ini_values();
    error_log('Ini values: ' . var_export($phpProperties, true));
    $extensionVersion = $phpProperties[PHP_EXTENSION];
    $extensionSuffix = is_truthy($phpProperties[IS_DEBUG]) ? '-debug' : (is_truthy(THREAD_SAFETY) ? '-zts' : '');
    $extensionRealPath = $installDirExtensionsDir . '/ddtrace-' . $extensionVersion . $extensionSuffix . '.so';
    error_log('AAA: ' . var_export($extensionRealPath, true));
    $extensionFileName = 'ddtrace' . $extensionSuffix . '.so';
    $extensionDestination = $phpProperties[EXTENSION_DIR] . '/' . $extensionFileName;
    copy($extensionRealPath, $extensionDestination);

    // ini
    $installIni = <<<EOD
    ; this file was automatically generated. Do not edit this file. Edit 99-ddtrace-custom.ini instead.
    extension=$extensionFileName
    ddtrace.request_init_hook=$installDirWrapperPath
    EOD;
    $customIni = <<<EOD
    ; add ddtrace settings to this file. This file will not be overwritten during updates.
    EOD;
    file_put_contents($phpProperties[INI_CONF] . '/98-ddtrace.ini', $installIni);
    $customIniFilePath = $phpProperties[INI_CONF] . '/99-ddtrace-custom.ini';
    if (!file_exists($customIniFilePath)) {
        file_put_contents($customIniFilePath, $customIni);
    }
}

main();

/**
 * Parses command line options provided by the user.
 * @return array
 */
function parse_validate_user_options()
{
    $shortOptions = "h";
    $longOptions = [
        'help',
        'file:',
        'install-dir:',
        'php-bin:',
        'url:',
        'version:',
    ];
    $options = getopt($shortOptions, $longOptions);

    // Help and exit
    if (key_exists('h', $options) || key_exists('help', $options)) {
        print_help_and_exit();
    }

    $normalizedOptions = [];

    // One and only one among --version, --url and --file must be provided
    $installables = array_intersect(['version', 'url', 'file'], array_keys($options));
    if (count($installables) === 0 || count($installables) > 1) {
        print_error_and_exit('One and only one among --version, --url and --file must be provided');
    }
    if (isset($options['version'])) {
        if (is_array($options['version'])) {
            print_error_and_exit('Only one --version can be provided');
        }
        $normalizedOptions['version'] = $options['version'];
    } else if (isset($options['url'])) {
        if (is_array($options['url'])) {
            print_error_and_exit('Only one --url can be provided');
        }
        $normalizedOptions['url'] = $options['url'];
    } else if (isset($options['file'])) {
        if (is_array($options['file'])) {
            print_error_and_exit('Only one --file can be provided');
        }
        $normalizedOptions['file'] = $options['file'];
    }

    error_log('Options: ' . var_export($normalizedOptions, true));
    return $normalizedOptions;
}

function print_help_and_exit()
{
    echo <<<EOD

    Usage:
        php get-dd-trace.php --php-bin=php ...
        php get-dd-trace.php --php-bin=php-fpm ...
        php get-dd-trace.php --php-bin=/usr/local/sbin/php-fpm ...
        php get-dd-trace.php --php-bin=php --php-bin=/usr/local/sbin/php-fpm ...

    Options:
        -h, --help              Print this help text and exit
        --install-dir=<path>    Install to a specific directory. Default: '/opt/datadog'
        --version=<0.1.2>       Install a specific version. If set --url and --file are ignored.
        --url=<url>             Install the tracing library from a url. If set --file is ignored.
        --file=<file>           Install the tracing library from a local file.

    EOD;
    exit(0);
}

function print_error_and_exit($message)
{
    echo "ERROR: $message\n";
    exit(1);
}

function write_file($path, $content, $override = false)
{
    if ($override || !file_exists($path)) {
        file_put_contents($path, $content);
    }
}

function pick_binaries_interactive(array $php_binaries)
{
    echo "Multiple PHP binaries detected. Please select the binaries the datadog library will be installed to:\n\n";
    $commands = array_keys($php_binaries);
    for ($index = 0; $index < count($commands); $index++) {
        $command = $commands[$index];
        $fullPath = $php_binaries[$commands[$index]];
        echo "  " . str_pad($index + 1, 2, ' ', STR_PAD_LEFT) . ". " . ($command !== $fullPath ? "$command --> " : "") . $fullPath . "\n";
    }
    echo "\n";
    ob_flush();
    flush();

    $userInput = readline("Select binaries unsing their number. Multiple binaries separated by space (example: 1 3): ");
    $choices = array_map('intval', array_filter(explode(' ', $userInput)));

    $pickedBinaries = [];
    foreach ($choices as $choice) {
        $index = $choice - 1; // we render to the user as 1-indexed
        if ($index >= count($commands) || $index < 0) {
            echo "\nERROR: Wrong choice: $choice\n\n";
            return pick_binaries_interactive($php_binaries);
        }
        $pickedBinaries[$commands[$index]] = $php_binaries[$commands[$index]];
    }

    return $pickedBinaries;
}

function execute_or_exit($exitMessage, $command)
{
    $result = exec($command);
    if (false === $result) {
        echo "ERROR: " . $exitMessage;
        exit(1);
    }

    return $result;
}

global $progress_counter;

function download($url, $destination)
{
    global $progress_counter;
    $fp = fopen($destination, 'w+');
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_TIMEOUT, 50);
    curl_setopt($ch, CURLOPT_FILE, $fp);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
    curl_setopt($ch, CURLOPT_PROGRESSFUNCTION, 'on_download_progress');
    curl_setopt($ch, CURLOPT_NOPROGRESS, false);
    $progress_counter = 0;
    curl_exec($ch);
    curl_close($ch);
    fclose($fp);
}

function on_download_progress($curlHandle, $download_size, $downloaded)
{
    global $progress_counter;

    if ($download_size === 0) {
        return 0;
    }
    $ratio = $downloaded / $download_size;
    if ($ratio == 1) {
        return 0;
    }

    // Max 20 dots to show progress
    if ($ratio >= ($progress_counter + (1 / 20))) {
        $progress_counter = $ratio;
        echo ".";
    }

    ob_flush();
    flush();
    return 0;
}

function ini_values($binary, array $properties)
{
    // $properties = [INI_CONF, EXTENSION_DIR, THREAD_SAFETY, PHP_EXTENSION, IS_DEBUG];
    $lines = [];
    exec(PHP_BINARY . " -i", $lines);
    $found = [];
    foreach ($lines as $line) {
        $parts = explode('=>', $line);
        if (count($parts) === 2 || count($parts) === 3) {
            $key = trim($parts[0]);
            if (in_array($key, $properties)) {
                $found[$key] = trim(count($parts) === 2 ? $parts[1] : $parts[2]);
            }
        }
    }
    return $found;
}

function is_truthy($value)
{
    $normalized = trim(strtolower($value));
    return in_array($normalized, ['1', 'true', 'yes', 'enabled']);
}

/**
 *
 * @param array $phpVersions
 * @param string $prefix Default ''. Used for testing purposes only.
 * @return array
 */
function search_php_binaries(array $phpVersions, $prefix = '')
{
    $results = [];

    // First, we search in $PATH, for php, php7, php74, php7.4, php7.4-fpm, etc....
    foreach (build_known_command_names_matrix($phpVersions) as $command) {
        $path = exec("command -v $command");
        if (false === $path || empty($path)) {
            // command is not defined
            continue;
        }

        // Resolving symlinks
        $resolvedPath = exec("readlink -f $path");
        $results[$command] = $resolvedPath;
    }

    // Then we search in known possible locations for popular installable paths on different systems.
    $standardPaths = [
        $prefix . '/usr/bin',
        $prefix . '/usr/sbin',
    ];
    $remiSafePaths = array_map(function ($phpVersion) use ($prefix) {
        list($major, $minor) = explode('.', $phpVersion);
        return "${prefix}/opt/remi/php${major}${minor}/root/usr/sbin";
    }, $phpVersions);

    foreach (($standardPaths + $remiSafePaths) as $knownPath) {
        $pathsFound = [];
        exec("find -L $knownPath -type f -executable -regextype sed -regex '.*/php\(-fpm\)\?\([0-9][\.]\?[0-9]\?\)\?\(-fpm\)\?' 2>/dev/null", $pathsFound);
        foreach ($pathsFound as $path) {
            $resolved = exec("readlink -f $path");
            if (in_array($resolved, array_values($results))) {
                continue;
            }
            $results[$resolved] = $resolved;
        }
    }

    return $results;
}

function build_known_command_names_matrix(array $phpVersions)
{
    $results = ['php', 'php-fpm'];

    foreach ($phpVersions as $phpVersion) {
        list($major, $minor) = explode('.', $phpVersion);
        $results[] = "php${major}";
        $results[] = "php${major}${minor}";
        $results[] = "php${major}.${minor}";
        $results[] = "php${major}-fpm";
        $results[] = "php${major}${minor}-fpm";
        $results[] = "php${major}.${minor}-fpm";
        $results[] = "php-fpm${major}";
        $results[] = "php-fpm${major}${minor}";
        $results[] = "php-fpm${major}.${minor}";
    }

    return $results;
}
