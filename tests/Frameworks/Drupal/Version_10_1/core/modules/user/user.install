<?php

/**
 * @file
 * Install, update and uninstall functions for the user module.
 */

use Drupal\Core\StringTranslation\PluralTranslatableMarkup;

/**
 * Implements hook_schema().
 */
function user_schema() {
  $schema['users_data'] = [
    'description' => 'Stores module data as key/value pairs per user.',
    'fields' => [
      'uid' => [
        'description' => 'The {users}.uid this record affects.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
      'module' => [
        'description' => 'The name of the module declaring the variable.',
        'type' => 'varchar_ascii',
        'length' => DRUPAL_EXTENSION_NAME_MAX_LENGTH,
        'not null' => TRUE,
        'default' => '',
      ],
      'name' => [
        'description' => 'The identifier of the data.',
        'type' => 'varchar_ascii',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ],
      'value' => [
        'description' => 'The value.',
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
      ],
      'serialized' => [
        'description' => 'Whether value is serialized.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'default' => 0,
      ],
    ],
    'primary key' => ['uid', 'module', 'name'],
    'indexes' => [
      'module' => ['module'],
      'name' => ['name'],
    ],
    'foreign keys' => [
      'data_user' => [
        'table' => 'users',
        'columns' => [
          'uid' => 'uid',
        ],
      ],
    ],
  ];

  return $schema;
}

/**
 * Implements hook_install().
 */
function user_install() {
  $storage = \Drupal::entityTypeManager()->getStorage('user');
  // Insert a row for the anonymous user.
  $storage
    ->create([
      'uid' => 0,
      'status' => 0,
      'name' => '',
    ])
    ->save();

  // We need some placeholders here as name and mail are unique.
  // This will be changed by the settings form in the installer.
  $storage
    ->create([
      'uid' => 1,
      'name' => 'placeholder-for-uid-1',
      'mail' => 'placeholder-for-uid-1',
      'status' => TRUE,
    ])
    ->save();
}

/**
 * Implements hook_update_last_removed().
 */
function user_update_last_removed() {
  return 9301;
}

/**
 * Remove non-existent permissions created by migrations.
 */
function user_update_10000() {
  $cleaned_roles = [];
  $existing_permissions = array_keys(\Drupal::service('user.permissions')
    ->getPermissions());
  $config_factory = \Drupal::configFactory();
  $role_ids = $config_factory->listAll('user.role.');
  foreach ($role_ids as $role_id) {
    $role_config = $config_factory->getEditable($role_id);
    $removed_permissions = array_diff($role_config->get('permissions'), $existing_permissions);
    if (!empty($removed_permissions)) {
      $cleaned_roles[] = $role_config->get('label');
      \Drupal::logger('update')->notice(
        'The role %role has had the following non-existent permission(s) removed: %permissions.',
        [
          '%role' => $role_config->get('label'),
          '%permissions' => implode(', ', $removed_permissions),
        ]
      );
      $permissions = array_intersect($role_config->get('permissions'), $existing_permissions);
      $role_config->set('permissions', $permissions);
      $role_config->save();
    }
  }

  if (!empty($cleaned_roles)) {
    return new PluralTranslatableMarkup(
      count($cleaned_roles),
      'The role %role_list has had non-existent permissions removed. Check the logs for details.',
      'The roles %role_list have had non-existent permissions removed. Check the logs for details.',
      ['%role_list' => implode(', ', $cleaned_roles)]
    );
  }
}
