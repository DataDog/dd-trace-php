<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminCreateCreditMemoConfigurableProductTest">
        <annotations>
            <stories value="Credit memo entity"/>
            <title value="Create Credit Memo for Offline Payment Methods"/>
            <description value="Create CreditMemo return to stock only one unit of configurable product"/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-28444"/>
            <group value="sales"/>
            <group value="mtf_migrated"/>
        </annotations>
        <before>
            <createData entity="Simple_US_Customer" stepKey="createCustomer"/>
            <createData entity="ApiCategory" stepKey="createCategory"/>

            <!-- Create the configurable product and add it to the category -->
            <createData entity="ApiConfigurableProduct" stepKey="createConfigProduct">
                <requiredEntity createDataKey="createCategory"/>
                <field key="price">40</field>
            </createData>

            <!-- Create an attribute with two options to be used in the first child product -->
            <createData entity="productAttributeWithTwoOptions" stepKey="createConfigProductAttribute"/>
            <createData entity="productAttributeOption1" stepKey="createConfigProductAttributeOption1">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </createData>
            <createData entity="productAttributeOption2" stepKey="createConfigProductAttributeOption2">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </createData>

            <!-- Add the attribute we just created to default attribute set -->
            <createData entity="AddToDefaultSet" stepKey="createConfigAddToAttributeSet">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </createData>

            <!-- Get the option of the attribute we created -->
            <getData entity="ProductAttributeOptionGetter" index="1" stepKey="getConfigAttributeOption1">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </getData>
            <getData entity="ProductAttributeOptionGetter" index="2" stepKey="getConfigAttributeOption2">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </getData>

            <!-- Create a simple product and give it the attribute with option -->
            <createData entity="ApiSimpleOneQty10" stepKey="createConfigChildProduct1">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
                <requiredEntity createDataKey="getConfigAttributeOption1"/>
                <field key="price">40</field>
            </createData>
            <createData entity="ApiSimpleTwoQty10" stepKey="createConfigChildProduct2">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
                <requiredEntity createDataKey="getConfigAttributeOption2"/>
                <field key="price">40</field>
            </createData>

            <!-- Create the configurable product -->
            <createData entity="ConfigurableProductTwoOptions" stepKey="createConfigProductOption">
                <requiredEntity createDataKey="createConfigProduct"/>
                <requiredEntity createDataKey="createConfigProductAttribute"/>
                <requiredEntity createDataKey="getConfigAttributeOption1"/>
                <requiredEntity createDataKey="getConfigAttributeOption2"/>
            </createData>

            <!-- Add simple product to the configurable product -->
            <createData entity="ConfigurableProductAddChild" stepKey="createConfigProductAddChild1">
                <requiredEntity createDataKey="createConfigProduct"/>
                <requiredEntity createDataKey="createConfigChildProduct1"/>
            </createData>
            <createData entity="ConfigurableProductAddChild" stepKey="createConfigProductAddChild2">
                <requiredEntity createDataKey="createConfigProduct"/>
                <requiredEntity createDataKey="createConfigChildProduct2"/>
            </createData>

            <!-- Enable payment method one of "Check/Money Order" and  shipping method one of "Flat Rate" -->
            <magentoCLI command="config:set {{enabledCheckMoneyOrder.label}} {{enabledCheckMoneyOrder.value}}" stepKey="enableCheckMoneyOrder"/>
            <createData entity="FlatRateShippingMethodConfig" stepKey="enableFlatRate"/>
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>
        </before>
        <after>
            <!-- Delete data -->
            <deleteData createDataKey="createCustomer" stepKey="deleteCustomer"/>
            <deleteData createDataKey="createConfigProduct" stepKey="deleteConfigProduct"/>
            <deleteData createDataKey="createConfigChildProduct1" stepKey="deleteConfigChildProduct1"/>
            <deleteData createDataKey="createConfigChildProduct2" stepKey="deleteConfigChildProduct2"/>
            <deleteData createDataKey="createConfigProductAttribute" stepKey="deleteConfigProductAttribute"/>
            <deleteData createDataKey="createCategory" stepKey="deleteApiCategory"/>
            <actionGroup ref="AdminOpenProductIndexPageActionGroup" stepKey="navigateToProductIndex"/>
            <actionGroup ref="ClearFiltersAdminDataGridActionGroup" stepKey="clearProductGridFilters"/>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logout"/>
            <!-- Reindex invalidated indices after product attribute has been created/deleted -->
            <magentoCron groups="index" stepKey="reindexInvalidatedIndices"/>
        </after>
        <!-- Create Order -->
        <actionGroup ref="NavigateToNewOrderPageExistingCustomerActionGroup" stepKey="navigateToNewOrderPage">
            <argument name="customer" value="$createCustomer$"/>
        </actionGroup>

        <!--Add configurable product to order-->
        <actionGroup ref="AddConfigurableProductToOrderFromAdminActionGroup" stepKey="addConfigurableProductToOrder">
            <argument name="product" value="$createConfigProduct$"/>
            <argument name="attribute" value="$createConfigProductAttribute$"/>
            <argument name="option" value="$getConfigAttributeOption1$"/>
        </actionGroup>

        <actionGroup ref="FillOrderCustomerInformationActionGroup" stepKey="fillCustomerInfo">
            <argument name="customer" value="$createCustomer$"/>
            <argument name="address" value="US_Address_TX"/>
        </actionGroup>
        <actionGroup ref="OrderSelectFlatRateShippingActionGroup" stepKey="selectFlatRate"/>
        <click selector="{{OrdersGridSection.submitOrder}}" stepKey="submitOrder"/>
        <waitForPageLoad stepKey="waitForSubmitOrderPage"/>
        <waitForElementVisible selector="{{AdminMessagesSection.success}}" stepKey="waitForSuccessMessageForOrderAppears"/>
        <see selector="{{AdminMessagesSection.success}}" userInput="You created the order." stepKey="seeSuccessMessageForOrder"/>

        <!-- Create Invoice -->
        <actionGroup ref="StartCreateInvoiceFromOrderPageActionGroup" stepKey="startInvoice"/>
        <actionGroup ref="SubmitInvoiceActionGroup" stepKey="clickSubmitInvoice"/>

        <!-- Go to Sales > Orders > find out placed order and open -->
        <actionGroup ref="AdminOpenOrderByEntityIdActionGroup" stepKey="openOrder">
            <argument name="entityId" value="{$grabOrderIdClickSubmitInvoice}"/>
        </actionGroup>

        <!-- Click 'Credit Memo' button and fill data from dataset: partial refund -->
        <actionGroup ref="AdminOpenAndFillCreditMemoRefundAndBackToStockActionGroup" stepKey="fillCreditMemoRefund">
            <argument name="itemQtyToRefund" value="1"/>
            <argument name="shippingRefund" value="5"/>
        </actionGroup>

        <!-- On order's page click 'Refund offline' button -->
        <actionGroup ref="SubmitCreditMemoActionGroup" stepKey="clickRefundOffline"/>

        <!-- Assert product Qty decreased after CreditMemo -->
        <actionGroup ref="AdminAssertProductQtyInGridActionGroup" stepKey="assertQtyDecreased">
            <argument name="productSku" value="$createConfigChildProduct1.sku$"/>
            <argument name="expectedQty" value="10.000"/>
        </actionGroup>
    </test>
</tests>
