<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="StorefrontCheckBundleProductOptionTierPricesTest">
        <annotations>
            <features value="Bundle"/>
            <stories value="View bundle products"/>
            <title value="Check tier prices for bundle options"/>
            <description value="Check tier prices for bundle options"/>
            <testCaseId value="MAGETWO-98968"/>
            <useCaseId value="MAGETWO-98603"/>
            <severity value="AVERAGE"/>
            <group value="catalog"/>
            <group value="bundle"/>
        </annotations>
        <before>
            <!-- Create Dynamic Bundle product -->
            <actionGroup ref="AdminCreateApiDynamicBundleProductAllOptionTypesActionGroup" stepKey="createBundleProduct"/>

            <!-- Add tier prices to simple products -->
            <!-- Simple product 1 -->
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>
            <actionGroup ref="AdminProductPageOpenByIdActionGroup" stepKey="openAdminEditPageProduct1">
                <argument name="productId" value="$$simpleProduct1CreateBundleProduct.id$$"/>
            </actionGroup>
            <actionGroup ref="ProductSetAdvancedPricingActionGroup" stepKey="addTierPriceProduct1">
                <argument name="group" value="ALL GROUPS"/>
                <argument name="quantity" value="5"/>
                <argument name="price" value="Discount"/>
                <argument name="amount" value="50"/>
            </actionGroup>
            <!-- Simple product 2 -->
            <actionGroup ref="AdminProductPageOpenByIdActionGroup" stepKey="openAdminEditPageProduct2">
                <argument name="productId" value="$$simpleProduct2CreateBundleProduct.id$$"/>
            </actionGroup>
            <actionGroup ref="ProductSetAdvancedPricingActionGroup" stepKey="addTierPriceProduct2">
                <argument name="group" value="ALL GROUPS"/>
                <argument name="quantity" value="7"/>
                <argument name="price" value="Discount"/>
                <argument name="amount" value="25"/>
            </actionGroup>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logoutAsAdmin"/>

            <magentoCLI stepKey="runCronIndex" command="cron:run --group=index"/>
        </before>
        <after>
            <deleteData createDataKey="createBundleProductCreateBundleProduct" stepKey="deleteDynamicBundleProduct"/>
            <deleteData createDataKey="simpleProduct1CreateBundleProduct" stepKey="deleteSimpleProduct1"/>
            <deleteData createDataKey="simpleProduct2CreateBundleProduct" stepKey="deleteSimpleProduct2"/>
        </after>

        <!-- Go to storefront product page -->
        <amOnPage url="{{StorefrontProductPage.url($$createBundleProductCreateBundleProduct.custom_attributes[url_key]$$)}}" stepKey="navigateToBundleProductPage"/>
        <click selector="{{StorefrontBundledSection.addToCart}}" stepKey="clickCustomize"/>

        <!--"Drop-down" type option-->
        <!-- Check Tier Prices for product 1 -->
        <selectOption selector="{{StorefrontBundledSection.dropDownOptionOneProducts('Drop-down Option')}}" userInput="$$simpleProduct1CreateBundleProduct.name$$ +$$$simpleProduct1CreateBundleProduct.price$$.00" stepKey="selectDropDownOptionProduct1"/>
        <seeOptionIsSelected selector="{{StorefrontBundledSection.dropDownOptionOneProducts('Drop-down Option')}}" userInput="$$simpleProduct1CreateBundleProduct.name$$ +$$$simpleProduct1CreateBundleProduct.price$$.00" stepKey="checkDropDownOptionProduct1"/>
        <grabTextFrom selector="{{StorefrontBundledSection.dropDownOptionTierPrices('Drop-down Option')}}" stepKey="DropDownTierPriceTextProduct1"/>
        <assertStringContainsString stepKey="assertDropDownTierPriceTextProduct1">
            <expectedResult type="string">Buy 5 for $5.00 each and save 50%</expectedResult>
            <actualResult type="variable">DropDownTierPriceTextProduct1</actualResult>
        </assertStringContainsString>
        <!-- Check Tier Prices for product 2 -->
        <selectOption selector="{{StorefrontBundledSection.dropDownOptionOneProducts('Drop-down Option')}}" userInput="$$simpleProduct2CreateBundleProduct.name$$ +$$$simpleProduct2CreateBundleProduct.price$$.00" stepKey="selectDropDownOptionProduct2"/>
        <seeOptionIsSelected selector="{{StorefrontBundledSection.dropDownOptionOneProducts('Drop-down Option')}}" userInput="$$simpleProduct2CreateBundleProduct.name$$ +$$$simpleProduct2CreateBundleProduct.price$$.00" stepKey="checkDropDownOptionProduct2"/>
        <grabTextFrom selector="{{StorefrontBundledSection.dropDownOptionTierPrices('Drop-down Option')}}" stepKey="dropDownTierPriceTextProduct2"/>
        <assertStringContainsString stepKey="assertDropDownTierPriceTextProduct2">
            <expectedResult type="string">Buy 7 for $15.00 each and save 25%</expectedResult>
            <actualResult type="variable">dropDownTierPriceTextProduct2</actualResult>
        </assertStringContainsString>

        <!--"Radio Buttons" type option-->
        <!-- Check Tier Prices for product 1 -->
        <grabTextFrom selector="{{StorefrontBundledSection.radioButtonOptionLabel('Radio Buttons Option', '$$simpleProduct1CreateBundleProduct.name$$')}}" stepKey="radioButtonsOptionTierPriceTextProduct1"/>
        <assertStringContainsString stepKey="assertRadioButtonsOptionTierPriceTextProduct1">
            <expectedResult type="string">Buy 5 for $5.00 each and save 50%</expectedResult>
            <actualResult type="variable">radioButtonsOptionTierPriceTextProduct1</actualResult>
        </assertStringContainsString>
        <!-- Check Tier Prices for product 2 -->
        <grabTextFrom selector="{{StorefrontBundledSection.radioButtonOptionLabel('Radio Buttons Option', '$$simpleProduct2CreateBundleProduct.name$$')}}" stepKey="radioButtonsOptionTierPriceTextProduct2"/>
        <assertStringContainsString stepKey="assertRadioButtonsOptionTierPriceTextProduct2">
            <expectedResult type="string">Buy 7 for $15.00 each and save 25%</expectedResult>
            <actualResult type="variable">radioButtonsOptionTierPriceTextProduct2</actualResult>
        </assertStringContainsString>

        <!--"Checkbox" type option-->
        <!-- Check Tier Prices for product 1 -->
        <grabTextFrom selector="{{StorefrontBundledSection.checkboxOptionLabel('Checkbox Option', '$$simpleProduct1CreateBundleProduct.name$$')}}" stepKey="checkBoxOptionTierPriceTextProduct1"/>
        <assertStringContainsString stepKey="assertCheckBoxOptionTierPriceTextProduct1">
            <expectedResult type="string">Buy 5 for $5.00 each and save 50%</expectedResult>
            <actualResult type="variable">checkBoxOptionTierPriceTextProduct1</actualResult>
        </assertStringContainsString>
        <!-- Check Tier Prices for product 2 -->
        <grabTextFrom selector="{{StorefrontBundledSection.checkboxOptionLabel('Checkbox Option', '$$simpleProduct2CreateBundleProduct.name$$')}}" stepKey="checkBoxOptionTierPriceTextProduct2"/>
        <assertStringContainsString stepKey="assertCheckBoxOptionTierPriceTextProduct2">
            <expectedResult type="string">Buy 7 for $15.00 each and save 25%</expectedResult>
            <actualResult type="variable">checkBoxOptionTierPriceTextProduct2</actualResult>
        </assertStringContainsString>
    </test>
</tests>
