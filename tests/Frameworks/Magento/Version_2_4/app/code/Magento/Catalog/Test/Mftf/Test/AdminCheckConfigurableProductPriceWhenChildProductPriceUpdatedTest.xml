<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminCheckConfigurableProductPriceWhenChildProductPriceUpdatedTest">
        <annotations>
            <stories value="Configurable Product"/>
            <title value="Check price of configurable product when one child product price is updated"/>
            <description value="Login as admin and check the configurable product price when one child product child product price is updated"/>
            <severity value="CRITICAL"/>
            <group value="product"/>
        </annotations>
        <before>
            <!-- Login as Admin -->
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginToAdminPanel"/>

            <!-- Create Default Category -->
            <createData entity="_defaultCategory" stepKey="createCategory"/>

            <!-- Create an attribute with two options to be used in the child product -->
            <createData entity="productAttributeWithTwoOptions" stepKey="createConfigProductAttribute"/>
            <createData entity="productAttributeOption1" stepKey="createConfigProductAttributeOption1">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </createData>
            <createData entity="productAttributeOption2" stepKey="createConfigProductAttributeOption2">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </createData>

            <!-- Add the attribute just created to default attribute set -->
            <createData entity="AddToDefaultSet" stepKey="createConfigAddToAttributeSet">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </createData>

            <!-- Get the first option of the attribute created -->
            <getData entity="ProductAttributeOptionGetter" index="1" stepKey="getConfigAttributeOption1">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </getData>

            <!-- Get the second option of the attribute created -->
            <getData entity="ProductAttributeOptionGetter" index="2" stepKey="getConfigAttributeOption2">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </getData>

            <!-- Create Configurable product -->
            <createData entity="BaseConfigurableProduct" stepKey="createConfigProduct">
                <requiredEntity createDataKey="createCategory"/>
            </createData>

            <!-- Create a simple product and give it the attribute with the first option -->
            <createData entity="ApiSimpleOne" stepKey="createConfigChildProduct1">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
                <requiredEntity createDataKey="getConfigAttributeOption1"/>
                <field key="price">10.00</field>
            </createData>

            <!--Create a simple product and give it the attribute with the second option -->
            <createData entity="ApiSimpleTwo" stepKey="createConfigChildProduct2">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
                <requiredEntity createDataKey="getConfigAttributeOption2"/>
                <field key="price">20.00</field>
            </createData>

            <!-- Create the configurable product -->
            <createData entity="ConfigurableProductTwoOptions" stepKey="createConfigProductOption">
                <requiredEntity createDataKey="createConfigProduct"/>
                <requiredEntity createDataKey="createConfigProductAttribute"/>
                <requiredEntity createDataKey="getConfigAttributeOption1"/>
                <requiredEntity createDataKey="getConfigAttributeOption2"/>
            </createData>

            <!-- Add the first simple product to the configurable product -->
            <createData entity="ConfigurableProductAddChild" stepKey="createConfigProductAddChild1">
                <requiredEntity createDataKey="createConfigProduct"/>
                <requiredEntity createDataKey="createConfigChildProduct1"/>
            </createData>

            <!-- Add the second simple product to the configurable product -->
            <createData entity="ConfigurableProductAddChild" stepKey="createConfigProductAddChild2">
                <requiredEntity createDataKey="createConfigProduct"/>
                <requiredEntity createDataKey="createConfigChildProduct2"/>
            </createData>

            <!--Open Index Management Page and Select Index mode "Update by Schedule" -->
            <magentoCLI stepKey="setIndexerMode" command="indexer:set-mode" arguments="schedule" />

            <!-- Run cron -->
            <magentoCron stepKey="runIndexCronJobs" groups="index"/>
            <comment userInput="Adding the comment to replace CliCacheFlushActionGroup action group ('cache:flush' command) for preserving Backward Compatibility" stepKey="flushCache"/>

            <!-- Wait till cron job runs for schedule updates -->
            <wait time="60" stepKey="waitForUpdateStarts"/>
        </before>
        <after>
            <magentoCLI stepKey="setIndexerMode" command="indexer:set-mode" arguments="realtime" />
            <comment userInput="Adding the comment to replace CliIndexerReindexActionGroup action group ('indexer:reindex' commands) for preserving Backward Compatibility" stepKey="indexerReindex"/>

            <!-- Delete Created Data -->
            <deleteData createDataKey="createCategory" stepKey="deleteCategory"/>
            <deleteData createDataKey="createConfigProduct" stepKey="deleteConfigProduct"/>
            <deleteData createDataKey="createConfigChildProduct1" stepKey="deleteConfigChildProduct1"/>
            <deleteData createDataKey="createConfigChildProduct2" stepKey="deleteConfigChildProduct2"/>
            <deleteData createDataKey="createConfigProductAttribute" stepKey="deleteAttribute"/>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logout"/>

            <!-- Reindex invalidated indices after product attribute has been created/deleted -->
            <magentoCron groups="index" stepKey="reindexInvalidatedIndices"/>
        </after>

        <!-- Open Product in Store Front Page -->
        <actionGroup ref="StorefrontOpenProductEntityPageActionGroup" stepKey="openProductInStoreFront">
            <argument name="product" value="$createConfigProduct$"/>
        </actionGroup>
        <comment userInput="Comment is added to preserve the step key for backward compatibility" stepKey="waitForProductToLoad"/>

        <!-- Verify category,Configurable product and initial price -->
        <actionGroup ref="StorefrontAssertCategoryNameIsShownInMenuActionGroup" stepKey="seeCategoryInFrontPage">
            <argument name="categoryName" value="$$createCategory.name$$"/>
        </actionGroup>
        <actionGroup ref="StorefrontAssertProductNameOnProductPageActionGroup" stepKey="seeProductNameInStoreFront">
            <argument name="productName" value="$$createConfigProduct.name$$"/>
        </actionGroup>
        <actionGroup ref="StorefrontAssertProductPriceOnProductPageActionGroup" stepKey="seeInitialPriceInStoreFront">
            <argument name="productPrice" value="$$createConfigChildProduct1.price$$"/>
        </actionGroup>
        <actionGroup ref="StorefrontAssertProductSkuOnProductPageActionGroup" stepKey="seeProductSkuInStoreFront">
            <argument name="productSku" value="$$createConfigProduct.sku$$"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontProductStockStatusOnProductPageActionGroup" stepKey="seeProductStatusInStoreFront">
            <argument name="productStockStatus" value="In Stock"/>
        </actionGroup>

        <!-- Verify First Child Product attribute option is displayed -->
        <see selector="{{StorefrontProductInfoMainSection.productOptionSelect($$createConfigProductAttribute.default_value$$)}}" userInput="$$getConfigAttributeOption1.label$$" stepKey="seeOption1"/>

        <!-- Select product Attribute option1, option2 and option3 and verify changes in the price -->
        <actionGroup ref="StorefrontProductPageSelectDropDownOptionValueActionGroup" stepKey="selectOption1">
            <argument name="attributeLabel" value="$$createConfigProductAttribute.default_value$$"/>
            <argument name="optionLabel" value="$$getConfigAttributeOption1.label$$"/>
        </actionGroup>
        <actionGroup ref="StorefrontAssertProductPriceOnProductPageActionGroup" stepKey="seeChildProduct1PriceInStoreFront">
            <argument name="productPrice" value="$$createConfigChildProduct1.price$$"/>
        </actionGroup>
        <actionGroup ref="StorefrontProductPageSelectDropDownOptionValueActionGroup" stepKey="selectOption2">
            <argument name="attributeLabel" value="$$createConfigProductAttribute.default_value$$"/>
            <argument name="optionLabel" value="$$getConfigAttributeOption2.label$$"/>
        </actionGroup>
        <actionGroup ref="StorefrontAssertProductPriceOnProductPageActionGroup" stepKey="seeChildProduct2PriceInStoreFront">
            <argument name="productPrice" value="$$createConfigChildProduct2.price$$"/>
        </actionGroup>
        <!-- Open Product Index Page and Filter First Child product  -->
        <comment userInput="Comment is added to preserve the step key for backward compatibility" stepKey="navigateToProductIndex"/>
        <comment userInput="Comment is added to preserve the step key for backward compatibility" stepKey="filterProduct"/>
        <actionGroup ref="CliCacheCleanActionGroup" stepKey="cleanFullPageCache">
            <argument name="tags" value="full_page"/>
        </actionGroup>
        <actionGroup ref="AdminProductPageOpenByIdActionGroup" stepKey="selectFirstRow">
            <argument name="productId" value="$$createConfigChildProduct1.id$$"/>
        </actionGroup>
        <waitForPageLoad stepKey="waitForProductPageToLoad"/>

        <updateData entity="SimpleProductUpdatePrice90" createDataKey="createConfigChildProduct1" stepKey="updateSimpleProductOne"/>

        <!-- Run cron -->
        <magentoCron stepKey="runIndexCronJobs" groups="index"/>
        <comment userInput="Adding the comment to replace CliCacheFlushActionGroup action group ('cache:flush' command) for preserving Backward Compatibility" stepKey="flushCache"/>

        <!-- Wait till cron job runs for schedule updates -->
        <wait time="60" stepKey="waitForUpdateStarts"/>

        <!-- Open Product Store Front Page -->
        <actionGroup ref="StorefrontOpenProductEntityPageActionGroup" stepKey="openProductInStoreFront1">
            <argument name="product" value="$createConfigProduct$"/>
        </actionGroup>
        <comment userInput="CommentConfigurableProductTwoOptions is added to preserve the step key for backward compatibility" stepKey="waitForProductToLoad1"/>

        <!-- Verify category,configurable product and updated price -->
        <actionGroup ref="StorefrontAssertCategoryNameIsShownInMenuActionGroup" stepKey="seeCategoryInFrontPage1">
            <argument name="categoryName" value="$$createCategory.name$$"/>
        </actionGroup>
        <actionGroup ref="StorefrontAssertProductNameOnProductPageActionGroup" stepKey="seeProductNameInStoreFront1">
            <argument name="productName" value="$$createConfigProduct.name$$"/>
        </actionGroup>
        <actionGroup ref="StorefrontAssertProductPriceOnProductPageActionGroup" stepKey="seeUpdatedProductPriceInStoreFront">
            <argument name="productPrice" value="$$createConfigChildProduct2.price$$"/>
        </actionGroup>
        <actionGroup ref="StorefrontAssertProductSkuOnProductPageActionGroup" stepKey="seeProductSkuInStoreFront1">
            <argument name="productSku" value="$$createConfigProduct.sku$$"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontProductStockStatusOnProductPageActionGroup" stepKey="seeProductStatusInStoreFront1">
            <argument name="productStockStatus" value="In Stock"/>
        </actionGroup>

        <!-- Verify product Attribute Option1 is displayed  -->
        <see selector="{{StorefrontProductInfoMainSection.productOptionSelect($$createConfigProductAttribute.default_value$$)}}" userInput="$$getConfigAttributeOption1.label$$" stepKey="seeOption1AfterUpdate"/>

        <!--Select product Attribute option1 and verify changes in the price -->
        <actionGroup ref="StorefrontProductPageSelectDropDownOptionValueActionGroup" stepKey="selectOption1AfterUpdate">
            <argument name="attributeLabel" value="$$createConfigProductAttribute.default_value$$"/>
            <argument name="optionLabel" value="$$getConfigAttributeOption1.label$$"/>
        </actionGroup>
        <actionGroup ref="StorefrontAssertProductPriceOnProductPageActionGroup" stepKey="seeChildProduct1PriceInStoreFrontAfterUpdate">
            <argument name="productPrice" value="$$createConfigChildProduct1.price$$"/>
        </actionGroup>
    </test>
</tests>
