<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminUpdateCustomerInfoFromDefaultToNonDefaultTest">
        <annotations>
            <features value="Customer"/>
            <stories value="Update Customer Information in Admin"/>
            <title value="Update Customer Info from Default to Non-Default in Admin"/>
            <description value="Update Customer Info from Default to Non-Default in Admin"/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-13619"/>
            <group value="Customer"/>
            <group value="mtf_migrated"/>
        </annotations>
        <before>
            <createData stepKey="customer" entity="Simple_Customer_Without_Address"/>
            <magentoCLI command="indexer:reindex" stepKey="reindex"/>
            <actionGroup ref="LoginAsAdmin" stepKey="login"/>
        </before>
        <after>
            <deleteData stepKey="deleteCustomer" createDataKey="customer"/>
            <!-- Reset customer grid filter -->
            <amOnPage stepKey="goToCustomersGridPage" url="{{AdminCustomerPage.url}}"/>
            <waitForPageLoad stepKey="waitForCustomersGrid"/>
            <actionGroup stepKey="resetFilter" ref="AdminResetFilterInCustomerGrid"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>

        <amOnPage url="{{AdminCustomerPage.url}}edit/id/$$customer.id$$/" stepKey="openCustomerEditPage"/>
        <waitForPageLoad stepKey="waitForCustomerEditPage"/>
        <!-- Update Customer Account Information -->
        <actionGroup stepKey="editCustomerInformation" ref="AdminEditCustomerAccountInformationActionGroup">
            <argument name="firstName" value="$$customer.firstname$$updated"/>
            <argument name="lastName" value="$$customer.lastname$$updated"/>
            <argument name="email" value="updated$$customer.email$$"/>
        </actionGroup>
        <!--Update Customer Addresses -->
        <actionGroup stepKey="editCustomerAddress" ref="AdminEditCustomerAddressSetDefaultShippingAndBilling">
            <argument name="customerAddress" value="CustomerAddressSimple"/>
        </actionGroup>
        <actionGroup stepKey="saveAndCheckSuccessMessage" ref="AdminSaveCustomerAndAssertSuccessMessage"/>
        <!-- Assert Customer in Customer grid -->
        <amOnPage stepKey="goToCustomersGridPage" url="{{AdminCustomerPage.url}}"/>
        <waitForPageLoad stepKey="waitForCustomersGrid"/>
        <actionGroup stepKey="resetFilter" ref="AdminResetFilterInCustomerGrid"/>
        <actionGroup stepKey="filterByEamil" ref="AdminFilterCustomerGridByEmail">
            <argument name="email" value="updated$$customer.email$$"/>
        </actionGroup>
        <actionGroup stepKey="checkCustomerInGrid" ref="AdminAssertCustomerInCustomersGrid">
            <argument name="text" value="updated$$customer.email$$"/>
            <argument name="row" value="1"/>
        </actionGroup>
        <!-- Assert Customer in Customer Form -->
        <amOnPage url="{{AdminCustomerPage.url}}edit/id/$$customer.id$$/" stepKey="openCustomerEditPageAfterSave"/>
        <waitForPageLoad stepKey="waitForCustomerEditPageAfterSave"/>
        <!-- Assert Customer Account Information -->
        <actionGroup stepKey="checkCustomerAccountInformation" ref="AdminAssertCustomerAccountInformation">
            <argument name="firstName" value="$$customer.firstname$$updated"/>
            <argument name="lastName" value="$$customer.lastname$$updated"/>
            <argument name="email" value="updated$$customer.email$$"/>
        </actionGroup>
        <!-- Assert Customer Default Billing Address -->
        <actionGroup stepKey="checkDefaultBilling" ref="AdminAssertCustomerDefaultBillingAddress">
            <argument name="firstName" value="$$customer.firstname$$updated"/>
            <argument name="lastName" value="$$customer.lastname$$updated"/>
            <argument name="street1" value="{{CustomerAddressSimple.street[0]}}"/>
            <argument name="state" value="{{CustomerAddressSimple.state}}"/>
            <argument name="postcode" value="{{CustomerAddressSimple.postcode}}"/>
            <argument name="country" value="{{CustomerAddressSimple.country_id}}"/>
            <argument name="telephone" value="{{CustomerAddressSimple.telephone}}"/>
        </actionGroup>
        <!-- Assert Customer Default Shipping Address -->
        <actionGroup stepKey="checkDefaultShipping" ref="AdminAssertCustomerDefaultShippingAddress">
            <argument name="firstName" value="$$customer.firstname$$updated"/>
            <argument name="lastName" value="$$customer.lastname$$updated"/>
            <argument name="street1" value="{{CustomerAddressSimple.street[0]}}"/>
            <argument name="state" value="{{CustomerAddressSimple.state}}"/>
            <argument name="postcode" value="{{CustomerAddressSimple.postcode}}"/>
            <argument name="country" value="{{CustomerAddressSimple.country_id}}"/>
            <argument name="telephone" value="{{CustomerAddressSimple.telephone}}"/>
        </actionGroup>
    </test>

    <test name="AdminUpdateCustomerAddressNoZipNoStateTest" extends="AdminUpdateCustomerInfoFromDefaultToNonDefaultTest">
        <annotations>
            <features value="Customer"/>
            <stories value="Update Customer Information in Admin"/>
            <title value="Update Customer Address, without zip/state required, default billing/shipping checked in Admin"/>
            <description value="Update Customer Address, without zip/state required, default billing/shipping checked in Admin"/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-13621"/>
            <group value="Customer"/>
            <group value="mtf_migrated"/>
        </annotations>
        <after>
            <remove keyForRemoval="goToCustomersGridPage"/>
            <remove keyForRemoval="waitForCustomersGrid"/>
            <remove keyForRemoval="resetFilter"/>
        </after>

        <!-- Remove steps that are not used for this test -->
        <remove keyForRemoval="editCustomerInformation"/>
        <remove keyForRemoval="goToCustomersGridPage"/>
        <remove keyForRemoval="waitForCustomersGrid"/>
        <remove keyForRemoval="resetFilter"/>
        <remove keyForRemoval="filterByEamil"/>
        <remove keyForRemoval="checkCustomerInGrid"/>
        <remove keyForRemoval="checkCustomerAccountInformation"/>

        <!--Update Customer Addresses With No Zip and No State -->
        <actionGroup stepKey="editCustomerAddress" ref="AdminEditCustomerAddressNoZipNoState">
            <argument name="customerAddress" value="addressNoZipNoState"/>
        </actionGroup>

        <!-- Assert Customer Default Billing Address -->
        <actionGroup stepKey="checkDefaultBilling" ref="AdminAssertCustomerDefaultBillingAddress">
            <argument name="firstName" value="$$customer.firstname$$"/>
            <argument name="lastName" value="$$customer.lastname$$"/>
            <argument name="street1" value="{{addressNoZipNoState.street[0]}}"/>
            <argument name="country" value="{{addressNoZipNoState.country_id}}"/>
            <argument name="telephone" value="{{addressNoZipNoState.telephone}}"/>
        </actionGroup>
        <!-- Assert Customer Default Shipping Address -->
        <actionGroup stepKey="checkDefaultShipping" ref="AdminAssertCustomerDefaultShippingAddress">
            <argument name="firstName" value="$$customer.firstname$$"/>
            <argument name="lastName" value="$$customer.lastname$$"/>
            <argument name="street1" value="{{addressNoZipNoState.street[0]}}"/>
            <argument name="country" value="{{addressNoZipNoState.country_id}}"/>
            <argument name="telephone" value="{{addressNoZipNoState.telephone}}"/>
        </actionGroup>
        <!-- Assert Customer Login Storefront -->
        <actionGroup stepKey="login" ref="StorefrontAssertSuccessLoginToStorefront" after="checkDefaultShipping" >
            <argument name="Customer" value="$$customer$$"/>
        </actionGroup>
    </test>

    <test name="AdminUpdateCustomerAddressNoBillingNoShippingTest" extends="AdminUpdateCustomerInfoFromDefaultToNonDefaultTest">
        <annotations>
            <features value="Customer"/>
            <stories value="Update Customer Information in Admin"/>
            <title value="Update Customer Address, default billing/shipping unchecked in Admin"/>
            <description value="Update Customer Address, default billing/shipping unchecked in Admin"/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-13622"/>
            <group value="Customer"/>
            <group value="mtf_migrated"/>
        </annotations>
        <after>
            <remove keyForRemoval="goToCustomersGridPage"/>
            <remove keyForRemoval="waitForCustomersGrid"/>
            <remove keyForRemoval="resetFilter"/>
        </after>

        <!-- Remove steps that are not used for this test -->
        <remove keyForRemoval="editCustomerInformation"/>
        <remove keyForRemoval="goToCustomersGridPage"/>
        <remove keyForRemoval="waitForCustomersGrid"/>
        <remove keyForRemoval="resetFilter"/>
        <remove keyForRemoval="filterByEamil"/>
        <remove keyForRemoval="checkCustomerInGrid"/>
        <remove keyForRemoval="checkCustomerAccountInformation"/>
        <remove keyForRemoval="checkDefaultBilling"/>
        <remove keyForRemoval="checkDefaultShipping"/>

        <!--Update Customer Addresses With Default Billing and Shipping Unchecked -->
        <actionGroup stepKey="editCustomerAddress" ref="AdminEditCustomerAddressesFrom">
            <argument name="customerAddress" value="CustomerAddressSimple"/>
        </actionGroup>

        <!-- Check Customer Address in Customer Form -->
        <actionGroup stepKey="checkNoDefaultBilling" ref="AdminAssertCustomerNoDefaultBillingAddress" after="waitForCustomerEditPageAfterSave"/>
        <actionGroup stepKey="checkNoDefaultShipping" ref="AdminAssertCustomerNoDefaultShippingAddress" after="checkNoDefaultBilling"/>
        <actionGroup stepKey="resetFilter" ref="AdminResetFilterInCustomerAddressGrid" after="checkNoDefaultShipping"/>
        <actionGroup stepKey="searchAddress" ref="AdminFilterCustomerAddressGridByPhoneNumber" after="resetFilter">
            <argument name="phone" value="{{CustomerAddressSimple.telephone}}"/>
        </actionGroup>
        <actionGroup stepKey="checkAddressStreetInGrid" ref="AdminAssertAddressInCustomersAddressGrid" after="searchAddress">
            <argument name="text" value="{{CustomerAddressSimple.street[0]}}"/>
        </actionGroup>
        <actionGroup stepKey="checkAddressPhoneInGrid" ref="AdminAssertAddressInCustomersAddressGrid" after="checkAddressStreetInGrid">
            <argument name="text" value="{{CustomerAddressSimple.telephone}}"/>
        </actionGroup>
        <actionGroup stepKey="checkAddressStateInGrid" ref="AdminAssertAddressInCustomersAddressGrid" after="checkAddressPhoneInGrid">
            <argument name="text" value="{{CustomerAddressSimple.state}}"/>
        </actionGroup>
        <actionGroup stepKey="checkAddressCityInGrid" ref="AdminAssertAddressInCustomersAddressGrid" after="checkAddressStateInGrid">
            <argument name="text" value="{{CustomerAddressSimple.city}}"/>
        </actionGroup>
        <actionGroup stepKey="checkAddressCountryInGrid" ref="AdminAssertAddressInCustomersAddressGrid" after="checkAddressCityInGrid">
            <argument name="text" value="{{CustomerAddressSimple.country_id}}"/>
        </actionGroup>
        <actionGroup stepKey="resetFilterWhenDone" ref="AdminResetFilterInCustomerAddressGrid" after="checkAddressCountryInGrid"/>
        <!-- Assert Customer Login Storefront -->
        <actionGroup stepKey="login" ref="StorefrontAssertSuccessLoginToStorefront" after="resetFilterWhenDone" >
            <argument name="Customer" value="$$customer$$"/>
        </actionGroup>
    </test>

    <test name="AdminDeleteCustomerAddressTest">
        <annotations>
            <features value="Customer"/>
            <stories value="Delete Customer Address in Admin"/>
            <title value="Delete Customer Address in Admin"/>
            <description value="Delete Customer Address in Admin"/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-13623"/>
            <group value="Customer"/>
            <group value="mtf_migrated"/>
        </annotations>
        <before>
            <createData stepKey="customer" entity="Simple_US_Customer_Multiple_Addresses"/>
            <magentoCLI command="indexer:reindex" stepKey="reindex"/>
            <actionGroup ref="LoginAsAdmin" stepKey="login"/>
        </before>
        <after>
            <deleteData stepKey="deleteCustomer" createDataKey="customer"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>

        <amOnPage url="{{AdminCustomerPage.url}}edit/id/$$customer.id$$/" stepKey="openCustomerEditPage"/>
        <waitForPageLoad stepKey="waitForCustomerEditPage"/>
        <!-- Assert Customer Default Billing Address -->
        <actionGroup stepKey="checkDefaultBilling" ref="AdminAssertCustomerDefaultBillingAddress">
            <argument name="firstName" value="$$customer.firstname$$"/>
            <argument name="lastName" value="$$customer.lastname$$"/>
            <argument name="street1" value="{{US_Address_NY.street[0]}}"/>
            <argument name="state" value="{{US_Address_NY.state}}"/>
            <argument name="postcode" value="{{US_Address_NY.postcode}}"/>
            <argument name="country" value="{{US_Address_NY.country}}"/>
            <argument name="telephone" value="{{US_Address_NY.telephone}}"/>
        </actionGroup>
        <!-- Assert Customer Default Shipping Address -->
        <actionGroup stepKey="checkDefaultShipping" ref="AdminAssertCustomerDefaultShippingAddress">
            <argument name="firstName" value="$$customer.firstname$$"/>
            <argument name="lastName" value="$$customer.lastname$$"/>
            <argument name="street1" value="{{US_Address_NY.street[0]}}"/>
            <argument name="state" value="{{US_Address_NY.state}}"/>
            <argument name="postcode" value="{{US_Address_NY.postcode}}"/>
            <argument name="country" value="{{US_Address_NY.country}}"/>
            <argument name="telephone" value="{{US_Address_NY.telephone}}"/>
        </actionGroup>
        <actionGroup stepKey="resetFilter" ref="AdminResetFilterInCustomerAddressGrid"/>
        <!-- Assert 2 records in Customer Address Grid -->
        <actionGroup stepKey="see2Record" ref="AdminAssertNumberOfRecordsInCustomersAddressGrid">
            <argument name="number" value="2"/>
        </actionGroup>
        <!-- Assert Address 1 in Grid -->
        <actionGroup stepKey="checkAddressStreetInGrid" ref="AdminAssertAddressInCustomersAddressGrid">
            <argument name="text" value="{{US_Address_NY.street[0]}}"/>
        </actionGroup>
        <actionGroup stepKey="checkAddressPhoneInGrid" ref="AdminAssertAddressInCustomersAddressGrid">
            <argument name="text" value="{{US_Address_NY.telephone}}"/>
        </actionGroup>
        <actionGroup stepKey="checkAddressStateInGrid" ref="AdminAssertAddressInCustomersAddressGrid">
            <argument name="text" value="{{US_Address_NY.state}}"/>
        </actionGroup>
        <actionGroup stepKey="checkAddressCityInGrid" ref="AdminAssertAddressInCustomersAddressGrid">
            <argument name="text" value="{{US_Address_NY.city}}"/>
        </actionGroup>
        <actionGroup stepKey="checkAddressCountryInGrid" ref="AdminAssertAddressInCustomersAddressGrid">
            <argument name="text" value="{{US_Address_NY.country}}"/>
        </actionGroup>
        <!-- Assert Address 2 in Grid -->
        <actionGroup stepKey="checkAddressStreetInGrid2" ref="AdminAssertAddressInCustomersAddressGrid">
            <argument name="text" value="{{UK_Not_Default_Address.street[0]}}"/>
        </actionGroup>
        <actionGroup stepKey="checkAddressPhoneInGrid2" ref="AdminAssertAddressInCustomersAddressGrid">
            <argument name="text" value="{{UK_Not_Default_Address.telephone}}"/>
        </actionGroup>
        <actionGroup stepKey="checkAddressCityInGrid2" ref="AdminAssertAddressInCustomersAddressGrid">
            <argument name="text" value="{{UK_Not_Default_Address.city}}"/>
        </actionGroup>
        <!-- Delete Customer in Customer Address Grid -->
        <actionGroup stepKey="deleteAddress" ref="AdminDeleteAddressInCustomersAddressGrid">
            <argument name="row" value="0"/>
        </actionGroup>
        <!-- Assert 1 record in Customer Address Grid -->
        <actionGroup stepKey="see1Record" ref="AdminAssertNumberOfRecordsInCustomersAddressGrid">
            <argument name="number" value="1"/>
        </actionGroup>
        <actionGroup stepKey="saveAndContinue" ref="AdminCustomerSaveAndContinue"/>
        <actionGroup stepKey="saveAndCheckSuccessMessage" ref="AdminSaveCustomerAndAssertSuccessMessage"/>
        <!-- Assert Customer Login Storefront -->
        <actionGroup stepKey="login" ref="StorefrontAssertSuccessLoginToStorefront">
            <argument name="Customer" value="$$customer$$"/>
        </actionGroup>
        <!-- Assert Customer Address Book -->
        <actionGroup stepKey="goToAddressBook" ref="StorefrontCustomerGoToSidebarMenu">
            <argument name="menu" value="Address Book"/>
        </actionGroup>
        <actionGroup stepKey="assertAddressNumber" ref="StorefrontCustomerAddressBookNumberOfAddresses">
            <argument name="number" value="1"/>
        </actionGroup>
        <actionGroup stepKey="assertNoAddress1" ref="StorefrontCustomerAddressBookNotContains">
            <argument name="text" value="{{US_Address_NY.street[0]}}"/>
        </actionGroup>
        <actionGroup stepKey="assertAddress2" ref="StorefrontCustomerAddressBookContains">
            <argument name="text" value="{{UK_Not_Default_Address.street[0]}}"/>
        </actionGroup>
    </test>
</tests>