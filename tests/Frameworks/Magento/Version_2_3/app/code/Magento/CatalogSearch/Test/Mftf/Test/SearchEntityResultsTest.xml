<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="QuickSearchProductBySku">
        <annotations>
            <stories value="Search Product on Storefront"/>
            <title value="User should be able to use Quick Search to find products"/>
            <description value="Use Quick Search to find a product"/>
            <severity value="MAJOR"/>
            <testCaseId value="MC-14783"/>
            <group value="CatalogSearch"/>
            <group value="mtf_migrated"/>
        </annotations>
        <before>
            <createData entity="_defaultCategory" stepKey="createCategory"/>
            <createData entity="_defaultProduct" stepKey="createSimpleProduct">
                <requiredEntity createDataKey="createCategory"/>
            </createData>

            <!-- Perform reindex and flush cache -->
            <magentoCLI command="indexer:reindex" stepKey="reindex"/>
            <magentoCLI command="cache:flush" stepKey="flushCache"/>
        </before>
        <after>
            <deleteData stepKey="deleteProduct" createDataKey="createSimpleProduct"/>
            <deleteData stepKey="deleteCategory" createDataKey="createCategory"/>
        </after>
        <amOnPage url="{{StorefrontHomePage.url}}" stepKey="goToFrontPage"/>
        <actionGroup ref="StorefrontCheckQuickSearchStringActionGroup" stepKey="searchStorefront">
            <argument name="phrase" value="$createSimpleProduct.sku$"/>
        </actionGroup>
        <actionGroup ref="StorefrontOpenProductFromQuickSearch" stepKey="openAndCheckProduct">
            <argument name="productName" value="$createSimpleProduct.name$"/>
            <argument name="productUrlKey" value="$createSimpleProduct.custom_attributes[url_key]$"/>
        </actionGroup>
    </test>
    <test name="QuickSearchProductByName" extends="QuickSearchProductBySku">
        <annotations>
            <stories value="Search Product on Storefront"/>
            <title value="User should be able to use Quick Search to find products via Name"/>
            <description value="Use Quick Search to find a product"/>
            <severity value="MAJOR"/>
            <testCaseId value="MC-14791"/>
            <group value="CatalogSearch"/>
            <group value="mtf_migrated"/>
        </annotations>
        <!-- Overwrite search to use name -->
        <actionGroup ref="StorefrontCheckQuickSearchStringActionGroup" stepKey="searchStorefront">
            <argument name="phrase" value="$createSimpleProduct.name$"/>
        </actionGroup>
    </test>
    <test name="QuickSearchProductByNameWithSpecialChars" extends="QuickSearchProductBySku">
        <annotations>
            <stories value="Search Product on Storefront"/>
            <title value="Quick Search can find products with names that contain special characters"/>
            <description value="Use Quick Search to find a product by name"/>
            <severity value="MAJOR"/>
            <testCaseId value="MC-14792"/>
            <group value="CatalogSearch"/>
            <group value="mtf_migrated"/>
        </annotations>
        <before>
            <createData entity="productWithSpecialCharacters" stepKey="createSimpleProduct">
                <requiredEntity createDataKey="createCategory"/>
            </createData>
        </before>
        <!-- Overwrite search to use name -->
        <actionGroup ref="StorefrontCheckQuickSearchStringActionGroup" stepKey="searchStorefront">
            <argument name="phrase" value="$createSimpleProduct.name$"/>
        </actionGroup>
    </test>
    <test name="QuickSearchEmptyResults">
        <annotations>
            <features value="CatalogSearch"/>
            <stories value="Search Product on Storefront"/>
            <title value="User should not get search results on query that doesn't return anything"/>
            <description value="Use invalid query to return no products"/>
            <severity value="MAJOR"/>
            <testCaseId value="MC-14793"/>
            <group value="CatalogSearch"/>
            <group value="mtf_migrated"/>
        </annotations>
        <before>
            <createData entity="_defaultCategory" stepKey="createCategory"/>
            <createData entity="_defaultProduct" stepKey="createSimpleProduct">
                <requiredEntity createDataKey="createCategory"/>
            </createData>

            <!-- Perform reindex and flush cache -->
            <magentoCLI command="indexer:reindex" stepKey="reindex"/>
            <magentoCLI command="cache:flush" stepKey="flushCache"/>
        </before>
        <after>
            <deleteData createDataKey="createSimpleProduct" stepKey="deleteProduct"/>
            <deleteData createDataKey="createCategory" stepKey="deleteCategory"/>
        </after>

        <amOnPage url="{{StorefrontHomePage.url}}" stepKey="goToFrontPage"/>
        <actionGroup ref="StorefrontCheckQuickSearchStringActionGroup" stepKey="searchStorefront">
            <argument name="phrase" value="ThisShouldn'tReturnAnything"/>
        </actionGroup>
        <actionGroup ref="StorefrontCheckSearchIsEmpty" stepKey="checkEmpty"/>
    </test>

    <test name="QuickSearchWithTwoCharsEmptyResults" extends="QuickSearchEmptyResults">
        <annotations>
            <features value="CatalogSearch"/>
            <stories value="Search Product on Storefront"/>
            <title value="User should not get search results on query that only contains two characters"/>
            <description value="Use of 2 character query to return no products"/>
            <severity value="MAJOR"/>
            <testCaseId value="MC-14794"/>
            <group value="CatalogSearch"/>
            <group value="mtf_migrated"/>
        </annotations>

        <before>
            <magentoCLI command="config:set {{MinimalQueryLengthFourConfigData.path}} {{MinimalQueryLengthFourConfigData.value}}" after="createSimpleProduct" stepKey="setMinimalQueryLengthToFour"/>
        </before>

        <after>
            <magentoCLI command="config:set {{MinimalQueryLengthDefaultConfigData.path}} {{MinimalQueryLengthDefaultConfigData.value}}" after="deleteCategory" stepKey="setMinimalQueryLengthToFour"/>
        </after>

        <executeJS function="var s = '$createSimpleProduct.name$'; var ret=s.substring(0,{{MinimalQueryLengthFourConfigData.value}} - 1); return ret;" before="searchStorefront" stepKey="getFirstLessThenConfigLetters"/>

        <actionGroup ref="StorefrontCheckQuickSearchStringActionGroup" after="checkEmpty" stepKey="searchStorefrontConfigLetters">
            <argument name="phrase" value="$createSimpleProduct.name$"/>
        </actionGroup>
        <actionGroup ref="StorefrontQuickSearchTooShortStringActionGroup" after="searchStorefrontConfigLetters" stepKey="checkCannotSearchWithTooShortString">
            <argument name="phrase" value="$getFirstLessThenConfigLetters"/>
            <argument name="minQueryLength" value="{{MinimalQueryLengthFourConfigData.value}}"/>
        </actionGroup>
        <actionGroup ref="StorefrontQuickSearchRelatedSearchTermsAppearsActionGroup" after="checkCannotSearchWithTooShortString" stepKey="checkRelatedSearchTerm">
            <argument name="term" value="$createSimpleProduct.name$"/>
        </actionGroup>
    </test>

    <test name="QuickSearchProductByNameWithThreeLetters" extends="QuickSearchProductBySku">
        <annotations>
            <stories value="Search Product on Storefront"/>
            <title value="User should be able to use Quick Search to find products by their first three letters"/>
            <description value="Use Quick Search to find a product using only first three letters"/>
            <severity value="MAJOR"/>
            <testCaseId value="MC-15034"/>
            <group value="CatalogSearch"/>
            <group value="SearchEngineMysql"/>
            <group value="mtf_migrated"/>
        </annotations>
        <executeJS function="var s = '$createSimpleProduct.name$'; var ret=s.substring(0,3); return ret;" stepKey="getFirstThreeLetters" before="searchStorefront"/>
        <actionGroup ref="StorefrontCheckQuickSearchStringActionGroup" stepKey="searchStorefront">
            <argument name="phrase" value="{$getFirstThreeLetters}"/>
        </actionGroup>
    </test>
    <test name="QuickSearchProductBy128CharQuery" extends="QuickSearchProductBySku">
        <annotations>
            <stories value="Search Product on Storefront"/>
            <title value="User should be able to use Quick Search product with long names, using first 128 letters"/>
            <description value="Use Quick Search to find a product with name of 130 length with query of only 128"/>
            <severity value="MAJOR"/>
            <testCaseId value="MC-14795"/>
            <group value="CatalogSearch"/>
            <group value="mtf_migrated"/>
        </annotations>
        <before>
            <createData entity="productWith130CharName" stepKey="createSimpleProduct">
                <requiredEntity createDataKey="createCategory"/>
            </createData>
        </before>
        <executeJS function="var s = '$createSimpleProduct.name$'; var ret=s.substring(0,128); return ret;" stepKey="get128Letters" before="searchStorefront"/>
        <actionGroup ref="StorefrontCheckQuickSearchStringActionGroup" stepKey="searchStorefront">
            <argument name="phrase" value="{$get128Letters}"/>
        </actionGroup>
    </test>

    <test name="QuickSearchTwoProductsWithSameWeight">
        <annotations>
            <stories value="Search Product on Storefront"/>
            <title value="Quick Search should sort products with the same weight appropriately"/>
            <description value="Use Quick Search to find a two products with the same weight"/>
            <severity value="MAJOR"/>
            <testCaseId value="MC-14796"/>
            <group value="CatalogSearch"/>
            <group value="SearchEngineMysql"/>
            <group value="mtf_migrated"/>
        </annotations>
        <before>
            <createData entity="_defaultCategory" stepKey="createCategory"/>
            <createData entity="productAlphabeticalA" stepKey="product1">
                <requiredEntity createDataKey="createCategory"/>
            </createData>
            <createData entity="productAlphabeticalB" stepKey="product2">
                <requiredEntity createDataKey="createCategory"/>
            </createData>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin1"/>


            <!-- Create and Assign Attribute to product1-->
            <actionGroup ref="goToProductPageViaID" stepKey="goToProduct1">
                <argument name="productId" value="$product1.id$"/>
            </actionGroup>
            <actionGroup ref="AdminCreateAttributeWithSearchWeight" stepKey="createProduct1Attribute">
                <argument name="attributeType" value="Text Field"/>
                <argument name="attributeName" value="$product1.name$"/>
                <argument name="attributeSetName" value="$product1.name$"/>
                <argument name="weight" value="1"/>
                <argument name="defaultValue" value="{{_defaultProduct.name}}"/>
            </actionGroup>
            <actionGroup ref="AdminProductPageSelectAttributeSet" stepKey="selectAttributeSet1">
                <argument name="attributeSetName" value="$product1.name$"/>
            </actionGroup>
            <!--fill in default-->
            <actionGroup ref="saveProductForm" stepKey="saveProduct1a"/>
            <actionGroup ref="AdminProductPageFillTextAttributeValueByName" stepKey="fillDefault1">
                <argument name="attributeName" value="$product1.name$"/>
                <argument name="value" value="{{_defaultProduct.name}}"/>
            </actionGroup>
            <actionGroup ref="saveProductForm" stepKey="saveProduct1b"/>
            <!-- Create and Assign Attribute to product2-->
            <actionGroup ref="goToProductPageViaID" stepKey="goToProduct2">
                <argument name="productId" value="$product2.id$"/>
            </actionGroup>
            <actionGroup ref="AdminCreateAttributeWithSearchWeight" stepKey="createProduct2Attribute">
                <argument name="attributeType" value="Text Field"/>
                <argument name="attributeName" value="$product2.name$"/>
                <argument name="attributeSetName" value="$product2.name$"/>
                <argument name="weight" value="1"/>
                <argument name="defaultValue" value="{{_defaultProduct.name}}"/>
            </actionGroup>
            <actionGroup ref="AdminProductPageSelectAttributeSet" stepKey="selectAttributeSet2">
                <argument name="attributeSetName" value="$product2.name$"/>
            </actionGroup>
            <actionGroup ref="saveProductForm" stepKey="saveProduct2a"/>
            <!--fill in default-->
            <actionGroup ref="AdminProductPageFillTextAttributeValueByName" stepKey="fillDefault2">
                <argument name="attributeName" value="$product2.name$"/>
                <argument name="value" value="{{_defaultProduct.name}}"/>
            </actionGroup>
            <actionGroup ref="saveProductForm" stepKey="saveProduct2b"/>
        </before>
        <after>
            <deleteData stepKey="deleteProduct1" createDataKey="product1"/>
            <deleteData stepKey="deleteProduct2" createDataKey="product2"/>
            <deleteData stepKey="deleteCategory" createDataKey="createCategory"/>
        </after>
        <amOnPage url="{{StorefrontHomePage.url}}" stepKey="goToFrontPage"/>
        <actionGroup ref="StorefrontCheckQuickSearchStringActionGroup" stepKey="searchStorefront">
            <argument name="phrase" value="{{_defaultProduct.name}}"/>
        </actionGroup>
        <actionGroup ref="StorefrontQuickSearchCheckProductNameInGrid" stepKey="assertProduct1Position">
            <argument name="productName" value="$product1.name$"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="StorefrontQuickSearchCheckProductNameInGrid" stepKey="assertProduct2Position">
            <argument name="productName" value="$product2.name$"/>
            <argument name="index" value="1"/>
        </actionGroup>
    </test>
    <test name="QuickSearchTwoProductsWithDifferentWeight" extends="QuickSearchTwoProductsWithSameWeight">
        <annotations>
            <stories value="Search Product on Storefront"/>
            <title value="Quick Search should sort products with the different weight appropriately"/>
            <description value="Use Quick Search to find a two products with the different weight"/>
            <severity value="MAJOR"/>
            <testCaseId value="MC-14797"/>
            <group value="CatalogSearch"/>
            <group value="SearchEngineMysql"/>
            <group value="mtf_migrated"/>
        </annotations>
        <before>
            <actionGroup ref="AdminCreateAttributeWithSearchWeight" stepKey="createProduct1Attribute">
                <argument name="attributeType" value="Text Field"/>
                <argument name="attributeName" value="$product1.name$"/>
                <argument name="attributeSetName" value="$product1.name$"/>
                <argument name="weight" value="5"/>
                <argument name="defaultValue" value="{{_defaultProduct.name}}"/>
            </actionGroup>
        </before>
        <actionGroup ref="StorefrontQuickSearchCheckProductNameInGrid" stepKey="assertProduct1Position">
            <argument name="productName" value="$product1.name$"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="StorefrontQuickSearchCheckProductNameInGrid" stepKey="assertProduct2Position">
            <argument name="productName" value="$product2.name$"/>
            <argument name="index" value="2"/>
        </actionGroup>
    </test>

    <test name="QuickSearchAndAddToCart">
        <annotations>
            <stories value="Search Product on Storefront"/>
            <title value="User should be able to use Quick Search to find a simple product and add it to cart"/>
            <description value="Use Quick Search to find simple Product and Add to Cart"/>
            <severity value="MAJOR"/>
            <testCaseId value="MC-14784"/>
            <group value="CatalogSearch"/>
            <group value="mtf_migrated"/>
        </annotations>
        <before>
            <createData entity="_defaultCategory" stepKey="createCategory"/>
            <createData entity="_defaultProduct" stepKey="createSimpleProduct">
                <requiredEntity createDataKey="createCategory"/>
            </createData>
            <!-- Reindex invalidated indices after product attribute has been created/deleted -->
            <actionGroup ref="CliRunReindexUsingCronJobsActionGroup" stepKey="reindexInvalidatedIndices"/>
        </before>
        <after>
            <deleteData stepKey="deleteProduct" createDataKey="createSimpleProduct"/>
            <deleteData stepKey="deleteCategory" createDataKey="createCategory"/>
        </after>
        <amOnPage url="{{StorefrontHomePage.url}}" stepKey="goToFrontPage"/>
        <actionGroup ref="StorefrontCheckQuickSearchStringActionGroup" stepKey="searchStorefront">
            <argument name="phrase" value="$createSimpleProduct.name$"/>
        </actionGroup>
        <actionGroup ref="StorefrontAddToCartFromQuickSearch" stepKey="addProductToCart">
            <argument name="productName" value="$createSimpleProduct.name$"/>
        </actionGroup>
    </test>
    <test name="QuickSearchAndAddToCartVirtual">
        <annotations>
            <stories value="Search Product on Storefront"/>
            <title value="User should be able to use Quick Search to find a virtual product and add it to cart"/>
            <description value="Use Quick Search to find virtual Product and Add to Cart"/>
            <severity value="MAJOR"/>
            <testCaseId value="MC-14785"/>
            <group value="CatalogSearch"/>
            <group value="mtf_migrated"/>
        </annotations>
        <before>
            <createData entity="_defaultCategory" stepKey="createCategory"/>
            <createData entity="VirtualProduct" stepKey="createVirtualProduct">
                <requiredEntity createDataKey="createCategory"/>
            </createData>

            <!-- Perform reindex and flush cache -->
            <magentoCLI command="indexer:reindex" stepKey="reindex"/>
            <magentoCLI command="cache:flush" stepKey="flushCache"/>
        </before>
        <after>
            <deleteData stepKey="deleteProduct" createDataKey="createVirtualProduct"/>
            <deleteData stepKey="deleteCategory" createDataKey="createCategory"/>
        </after>
        <amOnPage url="{{StorefrontHomePage.url}}" stepKey="goToFrontPage"/>
        <actionGroup ref="StorefrontCheckQuickSearchStringActionGroup" stepKey="searchStorefront">
            <argument name="phrase" value="$createVirtualProduct.name$"/>
        </actionGroup>
        <actionGroup ref="StorefrontAddToCartFromQuickSearch" stepKey="addProductToCart">
            <argument name="productName" value="$createVirtualProduct.name$"/>
        </actionGroup>
    </test>
    <test name="QuickSearchAndAddToCartConfigurable">
        <annotations>
            <stories value="Search Product on Storefront"/>
            <title value="User should be able to use Quick Search to find a configurable product and add it to cart"/>
            <description value="Use Quick Search to find configurable Product and Add to Cart"/>
            <severity value="MAJOR"/>
            <testCaseId value="MC-14786"/>
            <group value="CatalogSearch"/>
            <group value="mtf_migrated"/>
        </annotations>
        <before>
            <createData entity="_defaultCategory" stepKey="createCategory"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin1"/>
            <actionGroup ref="createConfigurableProduct" stepKey="createProduct">
                <argument name="product" value="_defaultProduct"/>
                <argument name="category" value="$$createCategory$$"/>
            </actionGroup>

            <!-- Perform reindex and flush cache -->
            <magentoCLI command="indexer:reindex" stepKey="reindex"/>
            <magentoCLI command="cache:flush" stepKey="flushCache"/>
        </before>
        <after>
            <deleteData stepKey="deleteCategory" createDataKey="createCategory"/>
            <actionGroup ref="deleteProductBySku" stepKey="deleteProduct">
                <argument name="sku" value="{{_defaultProduct.sku}}"/>
            </actionGroup>
            <actionGroup ref="clearFiltersAdminDataGrid" stepKey="clearProductsGridFilters"/>
            <actionGroup ref="logout" stepKey="logoutFromAdmin"/>
        </after>
        <amOnPage url="{{StorefrontHomePage.url}}" stepKey="goToFrontPage"/>
        <actionGroup ref="StorefrontCheckQuickSearchStringActionGroup" stepKey="searchStorefront">
            <argument name="phrase" value="{{_defaultProduct.name}}"/>
        </actionGroup>
        <actionGroup ref="StorefrontOpenProductFromQuickSearch" stepKey="openAndCheckProduct">
            <argument name="productName" value="{{_defaultProduct.name}}"/>
            <argument name="productUrlKey" value="{{_defaultProduct.urlKey}}"/>
        </actionGroup>
        <actionGroup ref="SelectSingleAttributeAndAddToCart" stepKey="addProductToCart">
            <argument name="productName" value="{{_defaultProduct.name}}"/>
            <argument name="attributeCode" value="{{colorProductAttribute.default_label}}"/>
            <argument name="optionName" value="{{colorProductAttribute1.name}}"/>
        </actionGroup>
    </test>
    <test name="QuickSearchAndAddToCartDownloadable">
        <annotations>
            <stories value="Search Product on Storefront"/>
            <title value="User should be able to use Quick Search to find a downloadable product and add it to cart"/>
            <description value="Use Quick Search to find downloadable Product and Add to Cart"/>
            <severity value="MAJOR"/>
            <testCaseId value="MC-14787"/>
            <group value="CatalogSearch"/>
            <group value="mtf_migrated"/>
        </annotations>
        <before>
            <magentoCLI stepKey="addDownloadableDomain" command="downloadable:domains:add example.com static.magento.com"/>
            <createData entity="_defaultCategory" stepKey="createCategory"/>
            <createData entity="DownloadableProductWithOneLink" stepKey="createProduct">
                <requiredEntity createDataKey="createCategory"/>
            </createData>
            <createData entity="downloadableLink1" stepKey="addDownloadableLink1">
                <requiredEntity createDataKey="createProduct"/>
            </createData>

            <!-- Perform reindex and flush cache -->
            <magentoCLI command="indexer:reindex" stepKey="reindex"/>
            <magentoCLI command="cache:flush" stepKey="flushCache"/>
        </before>
        <after>
            <magentoCLI stepKey="removeDownloadableDomain" command="downloadable:domains:remove example.com static.magento.com"/>
            <deleteData stepKey="deleteProduct" createDataKey="createProduct"/>
            <deleteData stepKey="deleteCategory" createDataKey="createCategory"/>
        </after>
        <amOnPage url="{{StorefrontHomePage.url}}" stepKey="goToFrontPage"/>
        <actionGroup ref="StorefrontCheckQuickSearchStringActionGroup" stepKey="searchStorefront">
            <argument name="phrase" value="$createProduct.name$"/>
        </actionGroup>
        <actionGroup ref="StorefrontAddToCartFromQuickSearch" stepKey="addProductToCart">
            <argument name="productName" value="$createProduct.name$"/>
        </actionGroup>
    </test>
    <test name="QuickSearchAndAddToCartGrouped">
        <annotations>
            <stories value="Search Product on Storefront"/>
            <title value="User should be able to use Quick Search to find a grouped product and add it to cart"/>
            <description value="Use Quick Search to find grouped Product and Add to Cart"/>
            <severity value="MAJOR"/>
            <testCaseId value="MC-14788"/>
            <group value="CatalogSearch"/>
            <group value="mtf_migrated"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="deleteAllProductsUsingProductGrid" stepKey="deleteAllProducts"/>
            <createData entity="ApiProductWithDescription" stepKey="simple1"/>
            <createData entity="ApiGroupedProduct" stepKey="createProduct"/>
            <createData entity="OneSimpleProductLink" stepKey="addProductOne">
                <requiredEntity createDataKey="createProduct"/>
                <requiredEntity createDataKey="simple1"/>
            </createData>

            <!-- Perform reindex and flush cache -->
            <magentoCLI command="indexer:reindex" stepKey="reindex"/>
            <magentoCLI command="cache:flush" stepKey="flushCache"/>
        </before>
        <after>
            <deleteData stepKey="deleteGroupedProduct" createDataKey="createProduct"/>
            <deleteData stepKey="deleteSimpleProduct" createDataKey="simple1"/>
            <actionGroup ref="logout" stepKey="logoutFromAdmin"/>
        </after>
        <amOnPage url="{{StorefrontHomePage.url}}" stepKey="goToFrontPage"/>
        <actionGroup ref="StorefrontCheckQuickSearchStringActionGroup" stepKey="searchStorefront">
            <argument name="phrase" value="&quot;$createProduct.name$&quot;"/>
        </actionGroup>
        <actionGroup ref="StorefrontAddToCartFromQuickSearch" stepKey="addProductToCart">
            <argument name="productName" value="$createProduct.name$"/>
        </actionGroup>
    </test>
    <test name="QuickSearchAndAddToCartBundleDynamic">
        <annotations>
            <stories value="Search Product on Storefront"/>
            <title value="User should be able to use Quick Search to find a Bundle Dynamic product and add it to cart"/>
            <description value="Use Quick Search to find Bundle Dynamic Product and Add to Cart"/>
            <severity value="MAJOR"/>
            <testCaseId value="MC-14789"/>
            <group value="CatalogSearch"/>
            <group value="mtf_migrated"/>
        </annotations>
        <before>
            <createData entity="_defaultCategory" stepKey="createCategory"/>
            <createData entity="_defaultProduct" stepKey="createProduct">
                <requiredEntity createDataKey="createCategory"/>
            </createData>

            <!--Create dynamic product-->
            <createData entity="ApiBundleProductPriceViewRange" stepKey="createBundleProduct">
                <requiredEntity createDataKey="createCategory"/>
            </createData>
            <createData entity="DropDownBundleOption" stepKey="bundleOption">
                <requiredEntity createDataKey="createBundleProduct"/>
            </createData>
            <createData entity="ApiBundleLink" stepKey="createBundleLink1">
                <requiredEntity createDataKey="createBundleProduct"/>
                <requiredEntity createDataKey="bundleOption"/>
                <requiredEntity createDataKey="createProduct"/>
                <field key="qty">10</field>
            </createData>
            <!--Finish bundle creation-->
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <amOnPage url="{{AdminProductEditPage.url($$createBundleProduct.id$$)}}" stepKey="goToProductEditPage"/>
            <actionGroup ref="saveProductForm" stepKey="saveProduct"/>

            <!-- Perform reindex and flush cache -->
            <magentoCLI command="indexer:reindex" stepKey="reindex"/>
            <magentoCLI command="cache:flush" stepKey="flushCache"/>
        </before>
        <after>
            <deleteData stepKey="deleteBundleProduct" createDataKey="createBundleProduct"/>
            <deleteData stepKey="deleteProduct" createDataKey="createProduct"/>
            <deleteData stepKey="deleteCategory" createDataKey="createCategory"/>
            <actionGroup ref="logout" stepKey="logoutFromAdmin"/>
        </after>
        <amOnPage url="{{StorefrontHomePage.url}}" stepKey="goToFrontPage"/>
        <actionGroup ref="StorefrontCheckQuickSearchStringActionGroup" stepKey="searchStorefront">
            <argument name="phrase" value="$createBundleProduct.name$"/>
        </actionGroup>
        <actionGroup ref="StorefrontOpenProductFromQuickSearch" stepKey="openAndCheckProduct">
            <argument name="productName" value="$createBundleProduct.name$"/>
            <argument name="productUrlKey" value="$createBundleProduct.custom_attributes[url_key]$"/>
        </actionGroup>
        <actionGroup ref="StorefrontAddBundleProductFromProductToCartActionGroup" stepKey="addProductToCart">
            <argument name="productName" value="$createBundleProduct.name$"/>
        </actionGroup>
    </test>
    <test name="QuickSearchAndAddToCartBundleFixed">
        <annotations>
            <stories value="Search Product on Storefront"/>
            <title value="User should be able to use Quick Search to find a Bundle Fixed product and add it to cart"/>
            <description value="Use Quick Search to find Bundle Fixed Product and Add to Cart"/>
            <severity value="MAJOR"/>
            <testCaseId value="MC-14790"/>
            <group value="CatalogSearch"/>
            <group value="mtf_migrated"/>
        </annotations>
        <before>
            <createData entity="_defaultCategory" stepKey="createCategory"/>
            <createData entity="_defaultProduct" stepKey="createProduct">
                <requiredEntity createDataKey="createCategory"/>
            </createData>

            <!--Create fixed product-->
            <!--Create 2 simple products-->
            <createData entity="SimpleProduct2" stepKey="simpleProduct1"/>
            <createData entity="SimpleProduct2" stepKey="simpleProduct2"/>
            <!-- Create the bundle product based -->
            <createData entity="ApiFixedBundleProduct" stepKey="createBundleProduct"/>
            <createData entity="MultipleSelectOption" stepKey="createBundleOption1_1">
                <requiredEntity createDataKey="createBundleProduct"/>
                <field key="required">false</field>
            </createData>
            <createData entity="CheckboxOption" stepKey="createBundleOption1_2">
                <requiredEntity createDataKey="createBundleProduct"/>
            </createData>
            <createData entity="ApiBundleLink" stepKey="linkOptionToProduct">
                <requiredEntity createDataKey="createBundleProduct"/>
                <requiredEntity createDataKey="createBundleOption1_1"/>
                <requiredEntity createDataKey="simpleProduct1"/>
            </createData>
            <createData entity="ApiBundleLink" stepKey="linkOptionToProduct2">
                <requiredEntity createDataKey="createBundleProduct"/>
                <requiredEntity createDataKey="createBundleOption1_1"/>
                <requiredEntity createDataKey="simpleProduct2"/>
            </createData>

            <!--Finish bundle creation-->
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <amOnPage url="{{AdminProductEditPage.url($$createBundleProduct.id$$)}}" stepKey="goToProductEditPage"/>
            <actionGroup ref="saveProductForm" stepKey="saveProduct"/>

            <!-- Perform reindex and flush cache -->
            <magentoCLI command="indexer:reindex" stepKey="reindex"/>
            <magentoCLI command="cache:flush" stepKey="flushCache"/>
        </before>
        <after>
            <deleteData stepKey="deleteBundleProduct" createDataKey="createBundleProduct"/>
            <deleteData stepKey="deleteProduct" createDataKey="createProduct"/>
            <deleteData createDataKey="simpleProduct1" stepKey="deleteSimpleProduct1"/>
            <deleteData createDataKey="simpleProduct2" stepKey="deleteSimpleProduct2"/>
            <deleteData stepKey="deleteCategory" createDataKey="createCategory"/>
            <actionGroup ref="logout" stepKey="logoutFromAdmin"/>
        </after>
        <comment userInput="$simpleProduct1.name$" stepKey="asdf"/>
        <amOnPage url="{{StorefrontHomePage.url}}" stepKey="goToFrontPage"/>
        <actionGroup ref="StorefrontCheckQuickSearchStringActionGroup" stepKey="searchStorefront">
            <argument name="phrase" value="$createBundleProduct.name$"/>
        </actionGroup>
        <actionGroup ref="StorefrontOpenProductFromQuickSearch" stepKey="openAndCheckProduct">
            <argument name="productName" value="$createBundleProduct.name$"/>
            <argument name="productUrlKey" value="$createBundleProduct.custom_attributes[url_key]$"/>
        </actionGroup>
        <actionGroup ref="StorefrontAddBundleProductFromProductToCartWithMultiOption" stepKey="addProductToCart">
            <argument name="productName" value="$createBundleProduct.name$"/>
            <argument name="optionName" value="$createBundleOption1_1.name$"/>
            <argument name="value" value="$simpleProduct1.name$"/>
        </actionGroup>
    </test>

    <test name="QuickSearchConfigurableChildren">
        <annotations>
            <stories value="Search Product on Storefront"/>
            <title value="Deprecated. User should be able to use Quick Search to a configurable product's child products"/>
            <description value="Use Quick Search to find a configurable product with enabled/disable children"/>
            <severity value="MAJOR"/>
            <testCaseId value="MC-14798"/>
            <group value="CatalogSearch"/>
            <group value="mtf_migrated"/>
            <skip>
                <issueId value="DEPRECATED">Use StorefrontQuickSearchConfigurableChildrenTest instead.</issueId>
            </skip>
        </annotations>
        <before>
            <!-- Create the category -->
            <createData entity="ApiCategory" stepKey="createCategory"/>

            <!-- Create blank AttributeSet-->
            <createData entity="CatalogAttributeSet" stepKey="attributeSet"/>

            <!-- Create an attribute with two options to be used in the first child product -->
            <createData entity="hiddenDropdownAttributeWithOptions" stepKey="createConfigProductAttribute"/>
            <createData entity="productAttributeOption1" stepKey="createConfigProductAttributeOption1">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </createData>

            <!-- Assign attribute to set -->
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="goToAttributeGridPage" stepKey="goToPage"/>
            <actionGroup ref="goToAttributeSetByName" stepKey="goToSet">
                <argument name="name" value="$attributeSet.attribute_set_name$"/>
            </actionGroup>
            <actionGroup ref="AssignAttributeToGroup" stepKey="assignToAttributeSetAndGroup">
                <argument name="group" value="Product Details"/>
                <argument name="attribute" value="$createConfigProductAttribute.attribute_code$"/>
            </actionGroup>
            <actionGroup ref="SaveAttributeSet" stepKey="savePage"/>

            <!-- Get the first option of the attribute we created -->
            <getData entity="ProductAttributeOptionGetter" index="1" stepKey="getConfigAttributeOption1">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </getData>

            <!-- Create a simple product,give it the attributeSet and attribute with the first option -->
            <createData entity="ApiSimpleOneHidden" stepKey="createConfigChildProduct1">
                <field key="attribute_set_id">$attributeSet.attribute_set_id$</field>
                <requiredEntity createDataKey="createConfigProductAttribute"/>
                <requiredEntity createDataKey="getConfigAttributeOption1"/>
            </createData>
            <updateData entity="ApiSimpleProductUpdateDescription" stepKey="updateSimpleProduct1" createDataKey="createConfigChildProduct1"/>

            <!-- Create the configurable product, give it the attributeSet and add it to the category -->
            <createData entity="ApiConfigurableProduct" stepKey="createConfigProduct">
                <field key="attribute_set_id">$attributeSet.attribute_set_id$</field>
                <requiredEntity createDataKey="createCategory"/>
            </createData>
            <!-- Create the configurable product -->
            <createData entity="ConfigurableProductOneOption" stepKey="createConfigProductOption">
                <requiredEntity createDataKey="createConfigProduct"/>
                <requiredEntity createDataKey="createConfigProductAttribute"/>
                <requiredEntity createDataKey="getConfigAttributeOption1"/>
            </createData>
            <!-- Add the first simple product to the configurable product -->
            <createData entity="ConfigurableProductAddChild" stepKey="createConfigProductAddChild1">
                <requiredEntity createDataKey="createConfigProduct"/>
                <requiredEntity createDataKey="createConfigChildProduct1"/>
            </createData>

            <!-- Perform reindex and flush cache -->
            <magentoCLI command="indexer:reindex" stepKey="reindex"/>
            <magentoCLI command="cache:flush" stepKey="flushCache"/>
        </before>
        <after>
            <deleteData createDataKey="attributeSet" stepKey="deleteAttributeSet"/>
            <deleteData createDataKey="createConfigProductAttribute" stepKey="deleteConfigProductAttribute"/>

            <!-- Reindex invalidated indices after product attribute has been created/deleted -->
            <actionGroup ref="CliRunReindexUsingCronJobsActionGroup" stepKey="reindexInvalidatedIndices"/>
        </after>
        <amOnPage url="{{StorefrontHomePage.url}}" stepKey="goToFrontPage"/>
        <actionGroup ref="StorefrontCheckQuickSearchStringActionGroup" stepKey="searchStorefront">
            <argument name="phrase" value="$createConfigProduct.name$"/>
        </actionGroup>
        <actionGroup ref="StorefrontQuickSearchCheckProductNameInGrid" stepKey="seeProductInGrid">
            <argument name="productName" value="$createConfigProduct.name$"/>
            <argument name="index" value="1"/>
        </actionGroup>

        <!-- Disable Child Product -->
        <actionGroup ref="goToProductPageViaID" stepKey="goToChildProduct">
            <argument name="productId" value="$createConfigChildProduct1.id$"/>
        </actionGroup>
        <actionGroup ref="toggleProductEnabled" stepKey="disableProduct"/>
        <actionGroup ref="saveProductForm" stepKey="saveProduct"/>

        <amOnPage url="{{StorefrontHomePage.url}}" stepKey="goToFrontPageAgain"/>
        <actionGroup ref="StorefrontCheckQuickSearchStringActionGroup" stepKey="searchStorefrontAgain">
            <argument name="phrase" value="$createConfigProduct.name$"/>
        </actionGroup>
        <actionGroup ref="StorefrontQuickSearchCheckProductNameNotInGrid" stepKey="dontSeeProductAnymore">
            <argument name="productName" value="$createConfigProduct.name$"/>
        </actionGroup>
    </test>
</tests>
