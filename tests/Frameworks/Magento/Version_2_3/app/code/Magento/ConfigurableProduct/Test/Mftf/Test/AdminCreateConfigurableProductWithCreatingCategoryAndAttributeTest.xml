<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->
<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminCreateConfigurableProductWithCreatingCategoryAndAttributeTest">
        <annotations>
            <features value="ConfigurableProduct"/>
            <stories value="Create configurable product"/>
            <title value="Create configurable product with creating new category and new attribute (required fields only)"/>
            <description value="Admin should be able to create configurable product with creating new category and new attribute (required fields only)"/>
            <testCaseId value="MC-13687"/>
            <severity value="CRITICAL"/>
            <group value="mtf_migrated"/>
        </annotations>
        <before>
            <createData entity="SimpleSubCategory" stepKey="createCategory"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
        </before>
        <after>
            <!-- Delete configurable product -->
            <actionGroup ref="deleteProductUsingProductGrid" stepKey="deleteProduct">
                <argument name="product" value="ApiConfigurableProduct"/>
            </actionGroup>

            <!-- Delete children products -->
            <actionGroup ref="deleteProductBySku" stepKey="deleteFirstChildProduct">
                <argument name="sku" value="{{colorConfigurableProductAttribute1.sku}}"/>
            </actionGroup>
            <actionGroup ref="deleteProductBySku" stepKey="deleteSecondChildProduct">
                <argument name="sku" value="{{colorConfigurableProductAttribute2.sku}}"/>
            </actionGroup>

            <!-- Delete product attribute -->
            <actionGroup ref="deleteProductAttributeByLabel" stepKey="deleteProductAttribute">
                <argument name="ProductAttribute" value="colorProductAttribute"/>
            </actionGroup>

            <!-- Delete attribute set -->
            <actionGroup ref="deleteAttributeSetByLabel" stepKey="deleteAttributeSet">
                <argument name="label" value="{{ProductAttributeFrontendLabel.label}}"/>
            </actionGroup>

            <!-- Delete category -->
            <deleteData createDataKey="createCategory" stepKey="deleteCategory"/>

            <!-- Log out -->
            <actionGroup ref="logout" stepKey="logout"/>
        </after>

        <!-- Create configurable product -->
        <amOnPage url="{{AdminProductIndexPage.url}}" stepKey="amOnProductGridPage"/>
        <waitForPageLoad stepKey="waitForProductGridPageLoad"/>
        <actionGroup ref="goToCreateProductPage" stepKey="createConfigurableProduct">
            <argument name="product" value="ApiConfigurableProduct"/>
        </actionGroup>

        <!-- Fill configurable product required fields only-->
        <fillField selector="{{AdminProductFormSection.productName}}" userInput="{{ApiConfigurableProduct.name}}" stepKey="fillProductName"/>
        <fillField selector="{{AdminProductFormSection.productSku}}" userInput="{{ApiConfigurableProduct.sku}}" stepKey="fillProductSku"/>
        <fillField selector="{{AdminProductFormSection.productPrice}}" userInput="{{ApiConfigurableProduct.price}}" stepKey="fillProductPrice"/>

        <!-- Add configurable product in category -->
        <searchAndMultiSelectOption selector="{{AdminProductFormSection.categoriesDropdown}}" parameterArray="[$$createCategory.name$$]" stepKey="fillCategory"/>

        <!--Create product configurations-->
        <click selector="{{AdminProductFormConfigurationsSection.createConfigurations}}" stepKey="clickCreateConfigurations"/>
        <waitForElementVisible selector="{{AdminCreateProductConfigurationsPanel.createNewAttribute}}" time="30" stepKey="waitForConfigurationModalOpen" after="clickCreateConfigurations"/>

        <!--Create new attribute with two option -->
        <actionGroup ref="addNewProductConfigurationAttribute" stepKey="createProductConfigurationAttribute">
            <argument name="attribute" value="colorProductAttribute"/>
            <argument name="firstOption" value="colorConfigurableProductAttribute1"/>
            <argument name="secondOption" value="colorConfigurableProductAttribute2"/>
        </actionGroup>

        <!-- Change product configurations in grid -->
        <actionGroup ref="changeProductConfigurationsInGrid" stepKey="changeProductConfigurationsInGrid">
            <argument name="firstOption" value="colorConfigurableProductAttribute1"/>
            <argument name="secondOption" value="colorConfigurableProductAttribute2"/>
        </actionGroup>

        <!-- Save configurable product; add product to new attribute set -->
        <actionGroup ref="saveConfigurableProductWithNewAttributeSet" stepKey="saveConfigurableProduct"/>

        <!-- Find configurable product in grid -->
        <amOnPage url="{{AdminProductIndexPage.url}}" stepKey="visitAdminProductPage"/>
        <waitForPageLoad stepKey="waitForAdminProductPageLoad"/>
        <actionGroup ref="filterProductGridBySku" stepKey="findCreatedConfigurableProduct">
            <argument name="product" value="ApiConfigurableProduct"/>
        </actionGroup>

        <!-- Assert configurable product on admin product page -->
        <click selector="{{AdminProductGridSection.firstRow}}" stepKey="clickOnProductPage"/>
        <waitForPageLoad stepKey="waitForProductPageLoad"/>
        <actionGroup ref="assertConfigurableProductOnAdminProductPage" stepKey="assertConfigurableProductOnAdminProductPage">
            <argument name="product" value="ApiConfigurableProduct"/>
        </actionGroup>

        <!-- Flash cache -->
        <magentoCLI command="cache:flush" stepKey="flushCache"/>

        <!--Assert configurable product in category -->
        <amOnPage url="$$createCategory.name$$.html" stepKey="amOnCategoryPage"/>
        <waitForPageLoad stepKey="waitForCategoryPageLoad"/>
        <actionGroup ref="StorefrontCheckCategoryConfigurableProduct" stepKey="assertConfigurableProductInCategory">
            <argument name="product" value="ApiConfigurableProduct"/>
            <argument name="optionProduct" value="colorConfigurableProductAttribute1"/>
        </actionGroup>

        <!--Assert configurable product on product page -->
        <amOnPage url="{{ApiConfigurableProduct.urlKey}}.html" stepKey="amOnProductPage"/>
        <waitForPageLoad stepKey="waitForPageLoad"/>
        <actionGroup ref="storefrontCheckConfigurableProductOptions" stepKey="checkConfigurableProductOptions">
            <argument name="product" value="ApiConfigurableProduct"/>
            <argument name="firstOption" value="colorConfigurableProductAttribute1"/>
            <argument name="secondOption" value="colorConfigurableProductAttribute2"/>
        </actionGroup>
    </test>
</tests>
