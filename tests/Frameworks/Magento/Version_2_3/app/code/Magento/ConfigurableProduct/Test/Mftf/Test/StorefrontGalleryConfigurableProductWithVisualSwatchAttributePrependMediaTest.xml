<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="StorefrontGalleryConfigurableProductWithVisualSwatchAttributePrependMediaTest">
        <annotations>
            <features value="ConfigurableProduct"/>
            <stories value="Prepend variation media on storefront"/>
            <title value="Storefront Gallery - Configurable Product with Visual Swatch: prepend variation media"/>
            <description value="Verify functionality of updating Gallery items on 'view Product' Storefront page for Configurable Product with Visual Swatch input type attribute. Verify that Configurable Product media in Gallery is prepended with media from selected variation"/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-11262"/>
            <group value="catalog"/>
            <group value="configurableProduct"/>
            <group value="swatch"/>
        </annotations>

        <before>
            <!--Create 1 configurable product -->
            <createData entity="ApiConfigurableProductWithDescription" stepKey="createConfigurableProduct"/>
            <!-- Create product swatch attribute with 2 variations -->
            <createData entity="VisualSwatchProductAttributeForm" stepKey="createVisualSwatchAttribute"/>
            <createData entity="SwatchProductAttributeOption1" stepKey="swatchAttributeFirstOption">
                <requiredEntity createDataKey="createVisualSwatchAttribute"/>
            </createData>
            <createData entity="SwatchProductAttributeOption2" stepKey="swatchAttributeSecondOption">
                <requiredEntity createDataKey="createVisualSwatchAttribute"/>
            </createData>
            <createData entity="SwatchProductAttributeOption3" stepKey="swatchAttributeThirdOption">
                <requiredEntity createDataKey="createVisualSwatchAttribute"/>
            </createData>
            <getData entity="ProductAttributeOptionGetter" index="1" stepKey="getSwatchAttributeFirsOption">
                <requiredEntity createDataKey="createVisualSwatchAttribute"/>
            </getData>
            <getData entity="ProductAttributeOptionGetter" index="2" stepKey="getSwatchAttributeSecondOption">
                <requiredEntity createDataKey="createVisualSwatchAttribute"/>
            </getData>
            <getData entity="ProductAttributeOptionGetter" index="3" stepKey="getSwatchAttributeThirdOption">
                <requiredEntity createDataKey="createVisualSwatchAttribute"/>
            </getData>

            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>

            <!-- Open configurable product edit page -->
            <amOnPage url="{{AdminProductEditPage.url($createConfigurableProduct.id$)}}" stepKey="goToProductIndex"/>

            <!-- Add attribute to configurable product-->
            <conditionalClick selector="{{AdminProductFormConfigurationsSection.sectionHeader}}" dependentSelector="{{AdminProductFormConfigurationsSection.createConfigurations}}" visible="false" stepKey="openConfigurationSection"/>
            <actionGroup ref="GenerateConfigurationsByAttributeCodeActionGroup" stepKey="createProductConfigurations">
                <argument name="attributeCode" value="$createVisualSwatchAttribute.attribute_code$"/>
            </actionGroup>

            <!-- Load media for configurable product -->
            <actionGroup ref="addProductImage" stepKey="addFirstImageToConfigurableProduct">
                <argument name="image" value="Magento2Image"/>
            </actionGroup>
            <actionGroup ref="addProductImage" stepKey="addSecondImageToConfigurableProduct">
                <argument name="image" value="Magento3Image"/>
            </actionGroup>
            <actionGroup ref="AdminAddProductVideoWithPreviewActionGroup" stepKey="addVideoToConfigurableProduct">
                <argument name="video" value="VimeoProductVideo"/>
                <argument name="image" value="{{TestImageNew.file}}"/>
            </actionGroup>
            <actionGroup ref="assertProductVideoAdminProductPage" stepKey="assertVideoAddedToConfigurableProduct">
                <argument name="video" value="VimeoProductVideo"/>
            </actionGroup>
            <actionGroup ref="SaveConfigurableProductAddToCurrentAttributeSetActionGroup" stepKey="saveConfigurableProduct"/>

            <!-- Load media for configurable product variation option1 -->
            <actionGroup ref="filterAndSelectProduct" stepKey="openConfigurableProductVariationOption1">
                <argument name="productSku" value="$createConfigurableProduct.sku$-$swatchAttributeFirstOption.option[store_labels][0][label]$"/>
            </actionGroup>
            <actionGroup ref="addProductImage" stepKey="addFirstImageToConfigurableProductVariationOption1">
                <argument name="image" value="MagentoLogo"/>
            </actionGroup>
            <actionGroup ref="addProductImage" stepKey="addSecondImageToConfigurableProductVariationOption1">
                <argument name="image" value="TestImageNew"/>
            </actionGroup>
            <actionGroup ref="AdminAddProductVideoWithPreviewActionGroup" stepKey="addVideoToConfigurableProductVariationOption1">
                <argument name="video" value="VimeoProductVideo"/>
                <argument name="image" value="{{placeholderSmallImage.file}}"/>
            </actionGroup>
            <actionGroup ref="assertProductVideoAdminProductPage" stepKey="assertVideoAddedToConfigurableProductVariationOption1">
                <argument name="video" value="VimeoProductVideo"/>
            </actionGroup>
            <actionGroup ref="SaveProductFormActionGroup" stepKey="saveConfigurableProductVariationOption1"/>

            <!-- Load media for configurable product variation option3 -->
            <actionGroup ref="filterAndSelectProduct" stepKey="openConfigurableProductVariationOption3">
                <argument name="productSku" value="$createConfigurableProduct.sku$-$swatchAttributeThirdOption.option[store_labels][0][label]$"/>
            </actionGroup>
            <actionGroup ref="AdminAddProductVideoWithPreviewActionGroup" stepKey="addVideoToConfigurableProductVariationOption3">
                <argument name="video" value="VimeoProductVideo"/>
                <argument name="image" value="{{Magento3Image.file}}"/>
            </actionGroup>
            <actionGroup ref="assertProductVideoAdminProductPage" stepKey="assertVideoAddedToConfigurableProductVariationOption3">
                <argument name="video" value="VimeoProductVideo"/>
            </actionGroup>
            <actionGroup ref="addProductImage" stepKey="addSecondImageToConfigurableProductVariationOption3">
                <argument name="image" value="TestImageAdobe"/>
            </actionGroup>
            <actionGroup ref="AdminAddProductVideoWithPreviewActionGroup" stepKey="addSecondVideoToConfigurableProductVariationOption3">
                <argument name="video" value="VimeoProductVideo"/>
                <argument name="image" value="{{MagentoLogo.file}}"/>
            </actionGroup>
            <actionGroup ref="assertProductVideoAdminProductPage" stepKey="assertSecondVideoAddedToConfigurableProductVariationOption3">
                <argument name="video" value="VimeoProductVideo"/>
            </actionGroup>
            <actionGroup ref="SaveProductFormActionGroup" stepKey="saveConfigurableProductVariationOption3"/>

            <!-- Reindex invalidated indices after product attribute has been created -->
            <actionGroup ref="CliRunReindexUsingCronJobsActionGroup" stepKey="reindexInvalidatedIndicesAfterCreateAttributes"/>
        </before>

        <after>
            <actionGroup ref="deleteProductUsingProductGrid" stepKey="deleteConfigurableProductsWithAllVariations">
                <argument name="product" value="$createConfigurableProduct$"/>
            </actionGroup>
            <waitForElementVisible selector="{{AdminMessagesSection.success}}" stepKey="waitForDeleteSuccessMessage"/>
            <see selector="{{AdminMessagesSection.success}}" userInput="A total of 4 record(s) have been deleted." stepKey="seeDeleteSuccessMessage"/>
            <actionGroup ref="clearFiltersAdminDataGrid" stepKey="clearProductGridFilters"/>
            <actionGroup ref="deleteProductAttribute" stepKey="deleteProductVisualSwatchAttribute">
                <argument name="ProductAttribute" value="$createVisualSwatchAttribute$"/>
            </actionGroup>
            <actionGroup ref="clearFiltersAdminDataGrid" stepKey="clearProductAttributeGridFilters"/>
            <actionGroup ref="logout" stepKey="logoutFromAdmin"/>
            <!-- Reindex invalidated indices after product attribute has been created -->
            <actionGroup ref="CliRunReindexUsingCronJobsActionGroup" stepKey="reindexInvalidatedIndicesAfterDeleteAttributes"/>
        </after>

        <actionGroup ref="StorefrontOpenProductPageActionGroup" stepKey="openConfigurableProductPage">
            <argument name="productUrl" value="$createConfigurableProduct.custom_attributes[url_key]$"/>
        </actionGroup>

        <!--CASE 0: Selected options = none; Expected media : C1, C2, C3-->
        <waitForElementVisible selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="waitForThumbnailsAppearCase0"/>
        <grabMultiple userInput="src" selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="getListOfThumbnailsCase0"/>
        <assertRegExp expected="|{{Magento2Image.filename}}.*.jpg|" actual="$getListOfThumbnailsCase0[0]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage1Case0"/>
        <assertRegExp expected="|{{Magento3Image.filename}}.*.jpg|" actual="$getListOfThumbnailsCase0[1]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage2Case0"/>
        <assertRegExp expected="|{{TestImageNew.filename}}.*.jpg|" actual="$getListOfThumbnailsCase0[2]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage3Case0"/>
        <actionGroup ref="AssertStorefrontProductImageAppearsOnProductPagePreviewActionGroup" stepKey="seeImageOnPreviewCase0">
            <argument name="productImage" value="{{Magento2Image.filename}}"/>
        </actionGroup>
        <actionGroup ref="StorefrontProductPageOpenImageFullscreenActionGroup" stepKey="openFullScreenPageCase0"/>
        <grabMultiple userInput="src" selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="getListOfThumbnailsFullScreenPageCase0"/>
        <assertEquals stepKey="checkPositionInThumbnailForImagesFromFullScreenPageCase0">
            <expectedResult type="variable">getListOfThumbnailsCase0</expectedResult>
            <actualResult type="variable">getListOfThumbnailsFullScreenPageCase0</actualResult>
        </assertEquals>
        <actionGroup ref="StorefrontProductPageCloseFullscreenGalleryActionGroup" stepKey="closeFullScreenPageCase0"/>

        <!--CASE 1: Selected options = B1; Expected media : D1, D2, D3, C1, C2, C3-->
        <click selector="{{StorefrontProductInfoMainSection.swatchOptionByLabel($swatchAttributeFirstOption.option[store_labels][0][label]$)}}" stepKey="chooseFirstOptionCase1"/>
        <waitForElementVisible selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="waitForThumbnailsAppearCase1"/>
        <grabMultiple userInput="src" selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="getListOfThumbnailsCase1"/>
        <assertRegExp expected="|{{MagentoLogo.filename}}.*.png|"  actual="$getListOfThumbnailsCase1[0]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage1Case1"/>
        <assertRegExp expected="|{{TestImageNew.filename}}.*.jpg|" actual="$getListOfThumbnailsCase1[1]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage2Case1"/>
        <assertRegExp expected="|{{placeholderSmallImage.name}}.*.jpg|" actual="$getListOfThumbnailsCase1[2]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage3Case1"/>
        <assertRegExp expected="|{{Magento2Image.filename}}.*.jpg|"  actual="$getListOfThumbnailsCase1[3]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage4Case1"/>
        <assertRegExp expected="|{{Magento3Image.filename}}.*.jpg|" actual="$getListOfThumbnailsCase1[4]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage5Case1"/>
        <assertRegExp expected="|{{TestImageNew.filename}}.*.jpg|" actual="$getListOfThumbnailsCase1[5]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage6Case1"/>
        <actionGroup ref="AssertStorefrontProductImageAppearsOnProductPagePreviewActionGroup" stepKey="seeImageOnPreviewCase1">
            <argument name="productImage" value="{{MagentoLogo.filename}}"/>
        </actionGroup>
        <actionGroup ref="StorefrontProductPageOpenImageFullscreenActionGroup" stepKey="openFullScreenPageCase1"/>
        <grabMultiple userInput="src" selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="getListOfThumbnailsFullScreenPageCase1"/>
        <assertEquals stepKey="checkPositionInThumbnailForImagesFromFullScreenPageCase1">
            <expectedResult type="variable">getListOfThumbnailsCase1</expectedResult>
            <actualResult type="variable">getListOfThumbnailsFullScreenPageCase1</actualResult>
        </assertEquals>
        <actionGroup ref="StorefrontProductPageCloseFullscreenGalleryActionGroup" stepKey="closeFullScreenPageCase1"/>

        <!--CASE 2: Selected options = B2; Expected media : C1, C2, C3-->
        <click selector="{{StorefrontProductInfoMainSection.swatchOptionByLabel($swatchAttributeSecondOption.option[store_labels][0][label]$)}}" stepKey="chooseFirstOptionCase2"/>
        <waitForElementVisible selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="waitForThumbnailsAppearCase2"/>
        <grabMultiple userInput="src" selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="getListOfThumbnailsCase2"/>
        <assertRegExp expected="|{{Magento2Image.filename}}.*.jpg|" actual="$getListOfThumbnailsCase2[0]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage1Case2"/>
        <assertRegExp expected="|{{Magento3Image.filename}}.*.jpg|" actual="$getListOfThumbnailsCase2[1]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage2Case2"/>
        <assertRegExp expected="|{{TestImageNew.filename}}.*.jpg|" actual="$getListOfThumbnailsCase2[2]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage3Case2"/>
        <actionGroup ref="AssertStorefrontProductImageAppearsOnProductPagePreviewActionGroup" stepKey="seeImageOnPreviewCase2">
            <argument name="productImage" value="{{Magento2Image.filename}}"/>
        </actionGroup>
        <actionGroup ref="StorefrontProductPageOpenImageFullscreenActionGroup" stepKey="openFullScreenPageCase2"/>
        <grabMultiple userInput="src" selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="getListOfThumbnailsFullScreenPageCase2"/>
        <assertEquals stepKey="checkPositionInThumbnailForImagesFromFullScreenPageCase2">
            <expectedResult type="variable">getListOfThumbnailsCase2</expectedResult>
            <actualResult type="variable">getListOfThumbnailsFullScreenPageCase2</actualResult>
        </assertEquals>
        <actionGroup ref="StorefrontProductPageCloseFullscreenGalleryActionGroup" stepKey="closeFullScreenPageCase2"/>

        <!--CASE 3: Selected options = B3; Expected media : E1, E2, E3, C1, C2, C3-->
        <click selector="{{StorefrontProductInfoMainSection.swatchOptionByLabel($swatchAttributeThirdOption.option[store_labels][0][label]$)}}" stepKey="chooseFirstOptionCase3"/>
        <waitForElementVisible selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="waitForThumbnailsAppearCase3"/>
        <grabMultiple userInput="src" selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="getListOfThumbnailsCase3"/>
        <assertRegExp expected="|{{Magento3Image.filename}}.*.jpg|"  actual="$getListOfThumbnailsCase3[0]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage1Case3"/>
        <assertRegExp expected="|{{TestImageAdobe.filename}}.*.jpg|" actual="$getListOfThumbnailsCase3[1]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage2Case3"/>
        <assertRegExp expected="|{{MagentoLogo.filename}}.*.png|" actual="$getListOfThumbnailsCase3[2]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage3Case3"/>
        <assertRegExp expected="|{{Magento2Image.filename}}.*.jpg|"  actual="$getListOfThumbnailsCase3[3]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage4Case3"/>
        <assertRegExp expected="|{{Magento3Image.filename}}.*.jpg|" actual="$getListOfThumbnailsCase3[4]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage5Case3"/>
        <assertRegExp expected="|{{TestImageNew.filename}}.*.jpg|" actual="$getListOfThumbnailsCase3[5]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage6Case3"/>
        <actionGroup ref="AssertStorefrontProductImageAppearsOnProductPagePreviewActionGroup" stepKey="seeImageOnPreviewCase3">
            <argument name="productImage" value="{{Magento3Image.filename}}"/>
        </actionGroup>
        <actionGroup ref="StorefrontProductPageOpenImageFullscreenActionGroup" stepKey="openFullScreenPageCase3"/>
        <grabMultiple userInput="src" selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="getListOfThumbnailsFullScreenPageCase3"/>
        <assertEquals stepKey="checkPositionInThumbnailForImagesFromFullScreenPageCase3">
            <expectedResult type="variable">getListOfThumbnailsCase3</expectedResult>
            <actualResult type="variable">getListOfThumbnailsFullScreenPageCase3</actualResult>
        </assertEquals>
        <actionGroup ref="StorefrontProductPageCloseFullscreenGalleryActionGroup" stepKey="closeFullScreenPageCase3"/>

        <!--CASE 4: Selected options = none; Expected media : C1, C2, C3-->
        <click selector="{{StorefrontProductInfoMainSection.swatchOptionByLabel($swatchAttributeThirdOption.option[store_labels][0][label]$)}}" stepKey="unselectThirdOptionCase4"/>
        <waitForElementVisible selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="waitForThumbnailsAppearCase4"/>
        <grabMultiple userInput="src" selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="getListOfThumbnailsCase4"/>
        <assertRegExp expected="|{{Magento2Image.filename}}.*.jpg|" actual="$getListOfThumbnailsCase4[0]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage1Case4"/>
        <assertRegExp expected="|{{Magento3Image.filename}}.*.jpg|" actual="$getListOfThumbnailsCase4[1]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage2Case4"/>
        <assertRegExp expected="|{{TestImageNew.filename}}.*.jpg|" actual="$getListOfThumbnailsCase4[2]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage3Case4"/>
        <actionGroup ref="AssertStorefrontProductImageAppearsOnProductPagePreviewActionGroup" stepKey="seeImageOnPreviewCase4">
            <argument name="productImage" value="{{Magento2Image.filename}}"/>
        </actionGroup>
        <actionGroup ref="StorefrontProductPageOpenImageFullscreenActionGroup" stepKey="openFullScreenPageCase4"/>
        <grabMultiple userInput="src" selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="getListOfThumbnailsFullScreenPageCase4"/>
        <assertEquals stepKey="checkPositionInThumbnailForImagesFromFullScreenPageCase4">
            <expectedResult type="variable">getListOfThumbnailsCase4</expectedResult>
            <actualResult type="variable">getListOfThumbnailsFullScreenPageCase4</actualResult>
        </assertEquals>
        <actionGroup ref="StorefrontProductPageCloseFullscreenGalleryActionGroup" stepKey="closeFullScreenPageCase4"/>
    </test>
</tests>
