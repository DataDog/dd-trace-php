<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="StorefrontGalleryConfigurableProductWithSeveralAttributesPrependMediaTest">
        <annotations>
            <features value="ConfigurableProduct"/>
            <stories value="Prepend variation media on storefront"/>
            <title value="Storefront Gallery - Configurable Product with several attributes: prepend variation media"/>
            <description value="Storefront Gallery - Configurable Product with several attributes: prepend variation media"/>
            <severity value="AVERAGE"/>
            <testCaseId value="MC-11635"/>
            <group value="catalog"/>
            <group value="configurableProduct"/>
            <group value="swatch"/>
        </annotations>

        <before>
            <!--Create 1 configurable product with 2 variations-->
            <createData entity="ApiConfigurableProductWithDescription" stepKey="createConfigurableProduct"/>
            <!--Create product drop down attribute-->
            <createData entity="productDropDownAttribute" stepKey="createDropdownAttribute"/>
            <createData entity="productAttributeOption1" stepKey="dropdownAttributeFirstOption">
                <requiredEntity createDataKey="createDropdownAttribute"/>
            </createData>
            <createData entity="productAttributeOption2" stepKey="dropdownAttributeSecondOption">
                <requiredEntity createDataKey="createDropdownAttribute"/>
            </createData>
            <getData entity="ProductAttributeOptionGetter" index="1" stepKey="getDropdownAttributeFirsOption">
                <requiredEntity createDataKey="createDropdownAttribute"/>
            </getData>
            <getData entity="ProductAttributeOptionGetter" index="2" stepKey="getDropdownAttributeSecondOption">
                <requiredEntity createDataKey="createDropdownAttribute"/>
            </getData>

            <!-- Create product swatch attribute with 2 variations -->
            <createData entity="VisualSwatchProductAttributeForm" stepKey="createVisualSwatchAttribute"/>
            <createData entity="SwatchProductAttributeOption1" stepKey="swatchAttributeFirstOption">
                <requiredEntity createDataKey="createVisualSwatchAttribute"/>
            </createData>
            <createData entity="SwatchProductAttributeOption2" stepKey="swatchAttributeSecondOption">
                <requiredEntity createDataKey="createVisualSwatchAttribute"/>
            </createData>
            <getData entity="ProductAttributeOptionGetter" index="1" stepKey="getSwatchAttributeFirsOption">
                <requiredEntity createDataKey="createVisualSwatchAttribute"/>
            </getData>
            <getData entity="ProductAttributeOptionGetter" index="2" stepKey="getSwatchAttributeSecondOption">
                <requiredEntity createDataKey="createVisualSwatchAttribute"/>
            </getData>

            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>

            <!-- Open configurable product edit page -->
            <amOnPage url="{{AdminProductEditPage.url($createConfigurableProduct.id$)}}" stepKey="goToProductIndex"/>

            <!-- Add attributes to configurable product-->
            <conditionalClick selector="{{AdminProductFormConfigurationsSection.sectionHeader}}" dependentSelector="{{AdminProductFormConfigurationsSection.createConfigurations}}" visible="false" stepKey="openConfigurationSection"/>
            <click selector="{{AdminProductFormConfigurationsSection.createConfigurations}}" stepKey="openConfigurationPanel"/>

            <!-- Find Dropdown attribute in grid and select it -->
            <conditionalClick selector="{{AdminDataGridHeaderSection.clearFilters}}" dependentSelector="{{AdminDataGridHeaderSection.clearFilters}}" visible="true" stepKey="clearAttributeGridFiltersToFindDropdownAttribute"/>
            <click selector="{{AdminDataGridHeaderSection.filters}}" stepKey="openFiltersPaneForDropdownAttribute"/>
            <fillField selector="{{AdminDataGridHeaderSection.attributeCodeFilterInput}}" userInput="$createDropdownAttribute.attribute_code$" stepKey="fillAttributeCodeFilterFieldForDropdownAttribute"/>
            <click selector="{{AdminDataGridHeaderSection.applyFilters}}" stepKey="clickApplyFiltersButtonForDropdownAttribute"/>
            <click selector="{{AdminDataGridTableSection.rowCheckbox('1')}}" stepKey="selectDropdownAttribute"/>
            <!-- Find Swatch attribute in grid and select it -->
            <conditionalClick selector="{{AdminDataGridHeaderSection.clearFilters}}" dependentSelector="{{AdminDataGridHeaderSection.clearFilters}}" visible="true" stepKey="clearAttributeGridFiltersToFindSwatchAttribute"/>
            <click selector="{{AdminDataGridHeaderSection.filters}}" stepKey="openFiltersPaneForSwatchAttribute"/>
            <fillField selector="{{AdminDataGridHeaderSection.attributeCodeFilterInput}}" userInput="$createVisualSwatchAttribute.attribute_code$" stepKey="fillAttributeCodeFilterFieldForSwatchAttribute"/>
            <click selector="{{AdminDataGridHeaderSection.applyFilters}}" stepKey="clickApplyFiltersButtonForSwatchAttribute"/>
            <click selector="{{AdminDataGridTableSection.rowCheckbox('1')}}" stepKey="selectSwatchAttribute"/>

            <click selector="{{AdminCreateProductConfigurationsPanel.next}}" stepKey="clickNextToSelectOptions"/>
            <click selector="{{AdminCreateProductConfigurationsPanel.selectAllByAttribute($createDropdownAttribute.default_frontend_label$)}}" stepKey="selectAllDropdownAttributeOptions"/>
            <click selector="{{AdminCreateProductConfigurationsPanel.selectAllByAttribute($createVisualSwatchAttribute.frontend_label[0]$)}}" stepKey="selectAllSwatchAttributeOptions"/>
            <click selector="{{AdminCreateProductConfigurationsPanel.next}}" stepKey="clickNextToApplyQuantity"/>
            <click selector="{{AdminCreateProductConfigurationsPanel.applySingleQuantityToEachSkus}}" stepKey="clickOnApplySingleQuantityToEachSku"/>
            <fillField selector="{{AdminCreateProductConfigurationsPanel.quantity}}" userInput="100" stepKey="enterAttributeQuantity"/>
            <click selector="{{AdminCreateProductConfigurationsPanel.next}}" stepKey="clickOnNextToProceedToSummary"/>
            <click selector="{{AdminCreateProductConfigurationsPanel.next}}" stepKey="clickGenerateProductsButton"/>

            <!-- Load media for configurable product -->
            <actionGroup ref="addProductImage" stepKey="addFirstImageToConfigurableProduct">
                <argument name="image" value="Magento2Image"/>
            </actionGroup>
            <actionGroup ref="addProductImage" stepKey="addSecondImageToConfigurableProduct">
                <argument name="image" value="Magento3Image"/>
            </actionGroup>
            <actionGroup ref="AdminAddProductVideoWithPreviewActionGroup" stepKey="addVideoToConfigurableProduct">
                <argument name="video" value="VimeoProductVideo"/>
                <argument name="image" value="{{TestImageNew.file}}"/>
            </actionGroup>
            <actionGroup ref="assertProductVideoAdminProductPage" stepKey="assertVideoAddedToConfigurableProduct">
                <argument name="video" value="VimeoProductVideo"/>
            </actionGroup>
            <actionGroup ref="SaveConfigurableProductAddToCurrentAttributeSetActionGroup" stepKey="saveConfigurableProduct"/>

            <!-- Load media for configurable product variation option1-option1-->
            <actionGroup ref="filterAndSelectProduct" stepKey="openConfigurableProductVariationOption1Option1">
                <argument name="productSku" value="$createConfigurableProduct.sku$-$dropdownAttributeFirstOption.option[store_labels][0][label]$-$swatchAttributeFirstOption.option[store_labels][0][label]$"/>
            </actionGroup>
            <actionGroup ref="addProductImage" stepKey="addFirstImageToConfigurableProductVariationOption1Option1">
                <argument name="image" value="MagentoLogo"/>
            </actionGroup>
            <actionGroup ref="addProductImage" stepKey="addSecondImageToConfigurableProductVariationOption1Option1">
                <argument name="image" value="TestImageNew"/>
            </actionGroup>
            <actionGroup ref="AdminAddProductVideoWithPreviewActionGroup" stepKey="addVideoToConfigurableProductVariationOption1Option1">
                <argument name="video" value="VimeoProductVideo"/>
                <argument name="image" value="{{placeholderSmallImage.file}}"/>
            </actionGroup>
            <actionGroup ref="assertProductVideoAdminProductPage" stepKey="assertVideoAddedToConfigurableProductVariationOption1Option1">
                <argument name="video" value="VimeoProductVideo"/>
            </actionGroup>
            <actionGroup ref="SaveProductFormActionGroup" stepKey="saveConfigurableProductVariationOption1Option1"/>

            <!-- Load media for configurable product variation option1-option2-->
            <actionGroup ref="filterAndSelectProduct" stepKey="openConfigurableProductVariationOption1Option2">
                <argument name="productSku" value="$createConfigurableProduct.sku$-$dropdownAttributeFirstOption.option[store_labels][0][label]$-$swatchAttributeSecondOption.option[store_labels][0][label]$"/>
            </actionGroup>
            <actionGroup ref="AdminAddProductVideoWithPreviewActionGroup" stepKey="addFirstVideoToConfigurableProductVariationOption1Option2">
                <argument name="video" value="VimeoProductVideo"/>
                <argument name="image" value="{{Magento3Image.file}}"/>
            </actionGroup>
            <actionGroup ref="assertProductVideoAdminProductPage" stepKey="assertFirstVideoAddedToConfigurableProductVariationOption1Option2">
                <argument name="video" value="VimeoProductVideo"/>
            </actionGroup>
            <actionGroup ref="addProductImage" stepKey="addFirstImageToConfigurableProductVariationOption1Option2">
                <argument name="image" value="MagentoLogo"/>
            </actionGroup>
            <actionGroup ref="AdminAddProductVideoWithPreviewActionGroup" stepKey="addSecondVideoToConfigurableProductVariationOption1Option2">
                <argument name="video" value="VimeoProductVideo"/>
                <argument name="image" value="{{placeholderThumbnailImage.file}}"/>
            </actionGroup>
            <actionGroup ref="assertProductVideoAdminProductPage" stepKey="assertSecondVideoAddedToConfigurableProductVariationOption1Option2">
                <argument name="video" value="VimeoProductVideo"/>
            </actionGroup>
            <actionGroup ref="SaveProductFormActionGroup" stepKey="saveConfigurableProductVariationOption1Option2"/>

            <!-- Load media for configurable product variation option2-option2-->
            <actionGroup ref="filterAndSelectProduct" stepKey="openConfigurableProductVariationOption2Option2">
                <argument name="productSku" value="$createConfigurableProduct.sku$-$dropdownAttributeSecondOption.option[store_labels][0][label]$-$swatchAttributeSecondOption.option[store_labels][0][label]$"/>
            </actionGroup>
            <actionGroup ref="addProductImage" stepKey="addFirstImageToConfigurableProductVariationOption2Option2">
                <argument name="image" value="ProductImage"/>
            </actionGroup>
            <actionGroup ref="SaveProductFormActionGroup" stepKey="saveConfigurableProductVariationOption2Option2"/>

            <!-- Reindex invalidated indices after product attribute has been created -->
            <actionGroup ref="CliRunReindexUsingCronJobsActionGroup" stepKey="reindexInvalidatedIndicesAfterCreateAttributes"/>
        </before>

        <after>
            <actionGroup ref="deleteProductUsingProductGrid" stepKey="deleteConfigurableProductsWithAllVariations">
                <argument name="product" value="$createConfigurableProduct$"/>
            </actionGroup>
            <waitForElementVisible selector="{{AdminMessagesSection.success}}" stepKey="waitForDeleteSuccessMessage"/>
            <see selector="{{AdminMessagesSection.success}}" userInput="A total of 5 record(s) have been deleted." stepKey="seeDeleteSuccessMessage"/>
            <actionGroup ref="clearFiltersAdminDataGrid" stepKey="clearProductGridFilters"/>
            <actionGroup ref="deleteProductAttribute" stepKey="deleteProductAttributeB">
                <argument name="ProductAttribute" value="$createDropdownAttribute$"/>
            </actionGroup>
            <actionGroup ref="deleteProductAttribute" stepKey="deleteProductAttributeF">
                <argument name="ProductAttribute" value="$createVisualSwatchAttribute$"/>
            </actionGroup>
            <actionGroup ref="clearFiltersAdminDataGrid" stepKey="clearProductAttributeGridFilters"/>
            <actionGroup ref="logout" stepKey="logoutFromAdmin"/>
            <!-- Reindex invalidated indices after product attribute has been created -->
            <actionGroup ref="CliRunReindexUsingCronJobsActionGroup" stepKey="reindexInvalidatedIndicesAfterDeleteAttributes"/>
        </after>

        <actionGroup ref="StorefrontOpenProductPageActionGroup" stepKey="openConfigurableProductPage">
            <argument name="productUrl" value="$createConfigurableProduct.custom_attributes[url_key]$"/>
        </actionGroup>

        <!--CASE 0: Selected options = none; Expected media : C1, C2, C3-->
        <waitForElementVisible selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="waitForThumbnailsAppearCase0"/>
        <grabMultiple userInput="src" selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="getListOfThumbnailsCase0"/>
        <assertRegExp expected="|{{Magento2Image.filename}}.*.jpg|" actual="$getListOfThumbnailsCase0[0]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage1Case0"/>
        <assertRegExp expected="|{{Magento3Image.filename}}.*.jpg|" actual="$getListOfThumbnailsCase0[1]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage2Case0"/>
        <assertRegExp expected="|{{TestImageNew.filename}}.*.jpg|" actual="$getListOfThumbnailsCase0[2]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage3Case0"/>
        <actionGroup ref="StorefrontProductPageOpenImageFullscreenActionGroup" stepKey="openFullScreenPageCase0"/>
        <grabMultiple userInput="src" selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="getListOfThumbnailsFullScreenPageCase0"/>
        <assertEquals stepKey="checkPositionInThumbnailForImagesFromFullScreenPageCase0">
            <expectedResult type="variable">getListOfThumbnailsCase0</expectedResult>
            <actualResult type="variable">getListOfThumbnailsFullScreenPageCase0</actualResult>
        </assertEquals>
        <actionGroup ref="StorefrontProductPageCloseFullscreenGalleryActionGroup" stepKey="closeFullScreenPageCase0"/>

        <!--CASE 1: Selected options = F2; Expected media : E1, E2, E3, C1, C2, C3-->
        <click selector="{{StorefrontProductInfoMainSection.swatchOptionByLabel($swatchAttributeSecondOption.option[store_labels][0][label]$)}}" stepKey="chooseOptionF2Case1"/>
        <waitForElementVisible selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="waitForThumbnailsAppearCase1"/>
        <grabMultiple userInput="src" selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="getListOfThumbnailsCase1"/>
        <assertRegExp expected="|{{Magento3Image.filename}}.*.jpg|"  actual="$getListOfThumbnailsCase1[0]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage1Case1"/>
        <assertRegExp expected="|{{MagentoLogo.filename}}.*.png|" actual="$getListOfThumbnailsCase1[1]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage2Case1"/>
        <assertRegExp expected="|{{placeholderThumbnailImage.name}}.*.jpg|" actual="$getListOfThumbnailsCase1[2]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage3Case1"/>
        <assertRegExp expected="|{{Magento2Image.filename}}.*.jpg|"  actual="$getListOfThumbnailsCase1[3]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage4Case1"/>
        <assertRegExp expected="|{{Magento3Image.filename}}.*.jpg|" actual="$getListOfThumbnailsCase1[4]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage5Case1"/>
        <assertRegExp expected="|{{TestImageNew.filename}}.*.jpg|" actual="$getListOfThumbnailsCase1[5]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage6Case1"/>
        <actionGroup ref="StorefrontProductPageOpenImageFullscreenActionGroup" stepKey="openFullScreenPageCase1"/>
        <grabMultiple userInput="src" selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="getListOfThumbnailsFullScreenPageCase1"/>
        <assertEquals stepKey="checkPositionInThumbnailForImagesFromFullScreenPageCase1">
            <expectedResult type="variable">getListOfThumbnailsCase1</expectedResult>
            <actualResult type="variable">getListOfThumbnailsFullScreenPageCase1</actualResult>
        </assertEquals>
        <actionGroup ref="StorefrontProductPageCloseFullscreenGalleryActionGroup" stepKey="closeFullScreenPageCase1"/>

        <!--CASE 2: Selected options = F1; Expected media : D1, D2, D3, C1, C2, C3-->
        <click selector="{{StorefrontProductInfoMainSection.swatchOptionByLabel($swatchAttributeFirstOption.option[store_labels][0][label]$)}}" stepKey="chooseOptionF1Case2"/>
        <waitForElementVisible selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="waitForThumbnailsAppearCase2"/>
        <grabMultiple userInput="src" selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="getListOfThumbnailsCase2"/>
        <assertRegExp expected="|{{MagentoLogo.filename}}.*.png|"  actual="$getListOfThumbnailsCase2[0]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage1Case2"/>
        <assertRegExp expected="|{{TestImageNew.filename}}.*.jpg|" actual="$getListOfThumbnailsCase2[1]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage2Case2"/>
        <assertRegExp expected="|{{placeholderSmallImage.name}}.*.jpg|" actual="$getListOfThumbnailsCase2[2]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage3Case2"/>
        <assertRegExp expected="|{{Magento2Image.filename}}.*.jpg|"  actual="$getListOfThumbnailsCase2[3]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage4Case2"/>
        <assertRegExp expected="|{{Magento3Image.filename}}.*.jpg|" actual="$getListOfThumbnailsCase2[4]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage5Case2"/>
        <assertRegExp expected="|{{TestImageNew.filename}}.*.jpg|" actual="$getListOfThumbnailsCase2[5]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage6Case2"/>
        <actionGroup ref="StorefrontProductPageOpenImageFullscreenActionGroup" stepKey="openFullScreenPageCase2"/>
        <grabMultiple userInput="src" selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="getListOfThumbnailsFullScreenPageCase2"/>
        <assertEquals stepKey="checkPositionInThumbnailForImagesFromFullScreenPageCase2">
            <expectedResult type="variable">getListOfThumbnailsCase2</expectedResult>
            <actualResult type="variable">getListOfThumbnailsFullScreenPageCase2</actualResult>
        </assertEquals>
        <actionGroup ref="StorefrontProductPageCloseFullscreenGalleryActionGroup" stepKey="closeFullScreenPageCase2"/>

        <!--CASE 3: Selected options = B2,F1; Expected media : C1, C2, C3-->
        <selectOption userInput="$dropdownAttributeSecondOption.option[store_labels][0][label]$" selector="{{StorefrontProductInfoMainSection.attributeSelectByAttributeID($createDropdownAttribute.default_frontend_label$)}}" stepKey="chooseOptionB2Case3"/>
        <waitForElementVisible selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="waitForThumbnailsAppearCase3"/>
        <grabMultiple userInput="src" selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="getListOfThumbnailsCase3"/>
        <assertRegExp expected="|{{Magento2Image.filename}}.*.jpg|"  actual="$getListOfThumbnailsCase3[0]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage1Case3"/>
        <assertRegExp expected="|{{Magento3Image.filename}}.*.jpg|" actual="$getListOfThumbnailsCase3[1]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage2Case3"/>
        <assertRegExp expected="|{{TestImageNew.filename}}.*.jpg|" actual="$getListOfThumbnailsCase3[2]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage3Case3"/>
        <actionGroup ref="StorefrontProductPageOpenImageFullscreenActionGroup" stepKey="openFullScreenPageCase3"/>
        <grabMultiple userInput="src" selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="getListOfThumbnailsFullScreenPageCase3"/>
        <assertEquals stepKey="checkPositionInThumbnailForImagesFromFullScreenPageCase3">
            <expectedResult type="variable">getListOfThumbnailsCase3</expectedResult>
            <actualResult type="variable">getListOfThumbnailsFullScreenPageCase3</actualResult>
        </assertEquals>
        <actionGroup ref="StorefrontProductPageCloseFullscreenGalleryActionGroup" stepKey="closeFullScreenPageCase3"/>

        <!--CASE 4: Selected options = B2,F2, Expected media : G1, C1, C2, C3-->
        <click selector="{{StorefrontProductInfoMainSection.swatchOptionByLabel($swatchAttributeSecondOption.option[store_labels][0][label]$)}}" stepKey="chooseOptionF2Case4"/>
        <waitForElementVisible selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="waitForThumbnailsAppearCase4"/>
        <grabMultiple userInput="src" selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="getListOfThumbnailsCase4"/>
        <assertRegExp expected="|{{ProductImage.filename}}.*.png|"  actual="$getListOfThumbnailsCase4[0]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage1Case4"/>
        <assertRegExp expected="|{{Magento2Image.filename}}.*.jpg|" actual="$getListOfThumbnailsCase4[1]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage2Case4"/>
        <assertRegExp expected="|{{Magento3Image.filename}}.*.jpg|" actual="$getListOfThumbnailsCase4[2]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage3Case4"/>
        <assertRegExp expected="|{{TestImageNew.filename}}.*.jpg|"  actual="$getListOfThumbnailsCase4[3]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage4Case4"/>
        <actionGroup ref="StorefrontProductPageOpenImageFullscreenActionGroup" stepKey="openFullScreenPageCase4"/>
        <grabMultiple userInput="src" selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="getListOfThumbnailsFullScreenPageCase4"/>
        <assertEquals stepKey="checkPositionInThumbnailForImagesFromFullScreenPageCase4">
            <expectedResult type="variable">getListOfThumbnailsCase4</expectedResult>
            <actualResult type="variable">getListOfThumbnailsFullScreenPageCase4</actualResult>
        </assertEquals>
        <actionGroup ref="StorefrontProductPageCloseFullscreenGalleryActionGroup" stepKey="closeFullScreenPageCase4"/>

        <!--CASE 5: Selected options = B2, Expected media : C1, C2, C3-->
        <conditionalClick selector="{{StorefrontProductInfoMainSection.swatchAttributeSelectedOption}}" dependentSelector="{{StorefrontProductInfoMainSection.swatchAttributeSelectedOption}}" visible="true" stepKey="unchooseF2Case5"/>
        <waitForElementVisible selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="waitForThumbnailsAppearCase5"/>
        <grabMultiple userInput="src" selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="getListOfThumbnailsCase5"/>
        <assertRegExp expected="|{{Magento2Image.filename}}.*.jpg|"  actual="$getListOfThumbnailsCase5[0]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage1Case5"/>
        <assertRegExp expected="|{{Magento3Image.filename}}.*.jpg|" actual="$getListOfThumbnailsCase5[1]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage2Case5"/>
        <assertRegExp expected="|{{TestImageNew.filename}}.*.jpg|" actual="$getListOfThumbnailsCase5[2]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage3Case5"/>
        <actionGroup ref="StorefrontProductPageOpenImageFullscreenActionGroup" stepKey="openFullScreenPageCase5"/>
        <grabMultiple userInput="src" selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="getListOfThumbnailsFullScreenPageCase5"/>
        <assertEquals stepKey="checkPositionInThumbnailForImagesFromFullScreenPageCase5">
            <expectedResult type="variable">getListOfThumbnailsCase5</expectedResult>
            <actualResult type="variable">getListOfThumbnailsFullScreenPageCase5</actualResult>
        </assertEquals>
        <actionGroup ref="StorefrontProductPageCloseFullscreenGalleryActionGroup" stepKey="closeFullScreenPageCase5"/>

        <!--CASE 6: Selected options = B1, Expected media : D1, D2, D3, C1, C2, C3-->
        <selectOption userInput="$dropdownAttributeFirstOption.option[store_labels][0][label]$" selector="{{StorefrontProductInfoMainSection.attributeSelectByAttributeID($createDropdownAttribute.default_frontend_label$)}}" stepKey="chooseOptionB1Case6"/>
        <waitForElementVisible selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="waitForThumbnailsAppearCase6"/>
        <grabMultiple userInput="src" selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="getListOfThumbnailsCase6"/>
        <assertRegExp expected="|{{MagentoLogo.filename}}.*.png|"  actual="$getListOfThumbnailsCase6[0]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage1Case6"/>
        <assertRegExp expected="|{{TestImageNew.filename}}.*.jpg|" actual="$getListOfThumbnailsCase6[1]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage2Case6"/>
        <assertRegExp expected="|{{placeholderSmallImage.name}}.*.jpg|" actual="$getListOfThumbnailsCase6[2]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage3Case6"/>
        <assertRegExp expected="|{{Magento2Image.filename}}.*.jpg|"  actual="$getListOfThumbnailsCase6[3]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage4Case6"/>
        <assertRegExp expected="|{{Magento3Image.filename}}.*.jpg|" actual="$getListOfThumbnailsCase6[4]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage5Case6"/>
        <assertRegExp expected="|{{TestImageNew.filename}}.*.jpg|" actual="$getListOfThumbnailsCase6[5]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage6Case6"/>
        <actionGroup ref="StorefrontProductPageOpenImageFullscreenActionGroup" stepKey="openFullScreenPageCase6"/>
        <grabMultiple userInput="src" selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="getListOfThumbnailsFullScreenPageCase6"/>
        <assertEquals stepKey="checkPositionInThumbnailForImagesFromFullScreenPageCase6">
            <expectedResult type="variable">getListOfThumbnailsCase6</expectedResult>
            <actualResult type="variable">getListOfThumbnailsFullScreenPageCase6</actualResult>
        </assertEquals>
        <actionGroup ref="StorefrontProductPageCloseFullscreenGalleryActionGroup" stepKey="closeFullScreenPageCase6"/>

        <!--CASE 7: Selected options = B1,F2, Expected media : E1, E2, E3, C1, C2, C3-->
        <click selector="{{StorefrontProductInfoMainSection.swatchOptionByLabel($swatchAttributeSecondOption.option[store_labels][0][label]$)}}" stepKey="chooseOptionF2Case7"/>
        <waitForElementVisible selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="waitForThumbnailsAppearCase7"/>
        <grabMultiple userInput="src" selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="getListOfThumbnailsCase7"/>
        <assertRegExp expected="|{{Magento3Image.filename}}.*.jpg|"  actual="$getListOfThumbnailsCase7[0]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage1Case7"/>
        <assertRegExp expected="|{{MagentoLogo.filename}}.*.png|" actual="$getListOfThumbnailsCase7[1]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage2Case7"/>
        <assertRegExp expected="|{{placeholderThumbnailImage.name}}.*.jpg|" actual="$getListOfThumbnailsCase7[2]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage3Case7"/>
        <assertRegExp expected="|{{Magento2Image.filename}}.*.jpg|"  actual="$getListOfThumbnailsCase7[3]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage4Case7"/>
        <assertRegExp expected="|{{Magento3Image.filename}}.*.jpg|" actual="$getListOfThumbnailsCase7[4]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage5Case7"/>
        <assertRegExp expected="|{{TestImageNew.filename}}.*.jpg|" actual="$getListOfThumbnailsCase7[5]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage6Case7"/>
        <actionGroup ref="StorefrontProductPageOpenImageFullscreenActionGroup" stepKey="openFullScreenPageCase7"/>
        <grabMultiple userInput="src" selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="getListOfThumbnailsFullScreenPageCase7"/>
        <assertEquals stepKey="checkPositionInThumbnailForImagesFromFullScreenPageCase7">
            <expectedResult type="variable">getListOfThumbnailsCase7</expectedResult>
            <actualResult type="variable">getListOfThumbnailsFullScreenPageCase7</actualResult>
        </assertEquals>
        <actionGroup ref="StorefrontProductPageCloseFullscreenGalleryActionGroup" stepKey="closeFullScreenPageCase7"/>

        <!--CASE 8: Selected options = B1,F1, Expected media : D1, D2, D3, C1, C2, C3-->
        <click selector="{{StorefrontProductInfoMainSection.swatchOptionByLabel($swatchAttributeFirstOption.option[store_labels][0][label]$)}}" stepKey="chooseOptionF1Case8"/>
        <waitForElementVisible selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="waitForThumbnailsAppearCase8"/>
        <grabMultiple userInput="src" selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="getListOfThumbnailsCase8"/>
        <assertRegExp expected="|{{MagentoLogo.filename}}.*.png|"  actual="$getListOfThumbnailsCase8[0]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage1Case8"/>
        <assertRegExp expected="|{{TestImageNew.filename}}.*.jpg|" actual="$getListOfThumbnailsCase8[1]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage2Case8"/>
        <assertRegExp expected="|{{placeholderSmallImage.name}}.*.jpg|" actual="$getListOfThumbnailsCase8[2]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage3Case8"/>
        <assertRegExp expected="|{{Magento2Image.filename}}.*.jpg|"  actual="$getListOfThumbnailsCase8[3]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage4Case8"/>
        <assertRegExp expected="|{{Magento3Image.filename}}.*.jpg|" actual="$getListOfThumbnailsCase8[4]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage5Case8"/>
        <assertRegExp expected="|{{TestImageNew.filename}}.*.jpg|" actual="$getListOfThumbnailsCase8[5]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage6Case8"/>
        <actionGroup ref="StorefrontProductPageOpenImageFullscreenActionGroup" stepKey="openFullScreenPageCase8"/>
        <grabMultiple userInput="src" selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="getListOfThumbnailsFullScreenPageCase8"/>
        <assertEquals stepKey="checkPositionInThumbnailForImagesFromFullScreenPageCase8">
            <expectedResult type="variable">getListOfThumbnailsCase8</expectedResult>
            <actualResult type="variable">getListOfThumbnailsFullScreenPageCase8</actualResult>
        </assertEquals>
        <actionGroup ref="StorefrontProductPageCloseFullscreenGalleryActionGroup" stepKey="closeFullScreenPageCase8"/>

        <!--CASE 9: Selected options = none, Expected media : C1, C2, C3-->
        <selectOption userInput="Choose an Option..." selector="{{StorefrontProductInfoMainSection.attributeSelectByAttributeID($createDropdownAttribute.default_frontend_label$)}}" stepKey="unselectB1Case9"/>
        <conditionalClick selector="{{StorefrontProductInfoMainSection.swatchAttributeSelectedOption}}" dependentSelector="{{StorefrontProductInfoMainSection.swatchAttributeSelectedOption}}" visible="true" stepKey="unchooseF1Case9"/>
        <waitForElementVisible selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="waitForThumbnailsAppearCase9"/>
        <grabMultiple userInput="src" selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="getListOfThumbnailsCase9"/>
        <assertRegExp expected="|{{Magento2Image.filename}}.*.jpg|"  actual="$getListOfThumbnailsCase9[0]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage1Case9"/>
        <assertRegExp expected="|{{Magento3Image.filename}}.*.jpg|" actual="$getListOfThumbnailsCase9[1]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage2Case9"/>
        <assertRegExp expected="|{{TestImageNew.filename}}.*.jpg|" actual="$getListOfThumbnailsCase9[2]"
                      expectedType="string" actualType="string" stepKey="checkPositionInThumbnailForImage3Case9"/>
        <actionGroup ref="StorefrontProductPageOpenImageFullscreenActionGroup" stepKey="openFullScreenPageCase9"/>
        <grabMultiple userInput="src" selector="{{StorefrontProductMediaSection.fotoramaAnyMedia}}" stepKey="getListOfThumbnailsFullScreenPageCase9"/>
        <assertEquals stepKey="checkPositionInThumbnailForImagesFromFullScreenPageCase9">
            <expectedResult type="variable">getListOfThumbnailsCase9</expectedResult>
            <actualResult type="variable">getListOfThumbnailsFullScreenPageCase9</actualResult>
        </assertEquals>
        <actionGroup ref="StorefrontProductPageCloseFullscreenGalleryActionGroup" stepKey="closeFullScreenPageCase9"/>
    </test>
</tests>
