<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminCreateDownloadableProductWithDefaultSetLinksTest">
        <annotations>
            <features value="Catalog"/>
            <stories value="Create Downloadable Product"/>
            <title value="Create downloadable product with default set links"/>
            <description value="Admin should be able to create downloadable product with default set links"/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-14507"/>
            <group value="Downloadable"/>
            <group value="mtf_migrated"/>
        </annotations>
        <before>
            <magentoCLI stepKey="addDownloadableDomain" command="downloadable:domains:add static.magento.com"/>
            <!-- Create category -->
            <createData entity="SimpleSubCategory" stepKey="createCategory"/>
            <!-- Reindex and clear page cache -->
            <magentoCLI command="indexer:reindex" stepKey="reindex"/>
            <magentoCLI command="cache:flush" arguments="full_page" stepKey="flushCache"/>
            <!-- Login as admin -->
            <actionGroup ref="LoginAsAdmin" stepKey="LoginAsAdmin"/>
        </before>
        <after>
            <magentoCLI stepKey="removeDownloadableDomain" command="downloadable:domains:remove static.magento.com"/>
            <!-- Delete category -->
            <deleteData createDataKey="createCategory" stepKey="deleteCategory"/>

            <!-- Delete created downloadable product -->
            <actionGroup ref="deleteProductUsingProductGrid" stepKey="deleteProduct">
                <argument name="product" value="DownloadableProduct"/>
            </actionGroup>

            <!-- Log out -->
            <actionGroup ref="logout" stepKey="logout"/>
        </after>

        <!-- Create downloadable product -->
        <amOnPage url="{{AdminProductIndexPage.url}}" stepKey="amOnProductGridPage"/>
        <waitForPageLoad stepKey="waitForProductGridPageLoad"/>
        <actionGroup ref="GoToSpecifiedCreateProductPage" stepKey="createProduct">
            <argument name="productType" value="downloadable"/>
        </actionGroup>

        <!-- Fill downloadable product values -->
        <actionGroup ref="fillMainProductFormNoWeight" stepKey="fillDownloadableProductForm">
            <argument name="product" value="DownloadableProduct"/>
        </actionGroup>

        <!-- Add downloadable product to category -->
        <searchAndMultiSelectOption selector="{{AdminProductFormSection.categoriesDropdown}}" parameterArray="[$$createCategory.name$$]" stepKey="fillCategory"/>

        <!-- Fill downloadable link information before the creation link -->
        <actionGroup ref="AdminAddDownloadableLinkInformationActionGroup" stepKey="addDownloadableLinkInformation"/>

        <!-- Links can be purchased separately -->
        <checkOption selector="{{AdminProductDownloadableSection.isLinksPurchasedSeparately}}" stepKey="checkOptionPurchaseSeparately"/>

        <!-- Add first downloadable link -->
        <actionGroup ref="addDownloadableProductLinkWithMaxDownloads" stepKey="addFirstDownloadableProductLink">
            <argument name="link" value="downloadableLinkWithMaxDownloads"/>
        </actionGroup>

        <!-- Add second downloadable link -->
        <actionGroup ref="addDownloadableProductLink" stepKey="addSecondDownloadableProductLink">
            <argument name="link" value="downloadableLink"/>
        </actionGroup>

        <!-- Save product -->
        <actionGroup ref="saveProductForm" stepKey="saveProduct"/>
        <magentoCLI command="indexer:reindex" stepKey="reindex"/>
        <magentoCLI command="cache:flush" stepKey="flushCache"/>

        <!-- Find downloadable product in grid -->
        <amOnPage url="{{AdminProductIndexPage.url}}" stepKey="visitAdminProductPage"/>
        <waitForPageLoad stepKey="waitForAdminProductPageLoad"/>
        <actionGroup ref="filterProductGridBySku" stepKey="findCreatedConfigurableProduct">
            <argument name="product" value="DownloadableProduct"/>
        </actionGroup>
        <click selector="{{AdminProductGridSection.firstRow}}" stepKey="clickOnProduct"/>
        <waitForPageLoad stepKey="waitForProductPageLoad"/>

        <!-- Assert downloadable links in product form -->
        <scrollTo selector="{{AdminProductDownloadableSection.sectionLinkGrid}}" stepKey="scrollToLinks"/>
        <seeElement selector="{{AdminProductDownloadableSection.addLinkTitleInput('0')}}" stepKey="seeFirstLinkTitle"/>
        <seeElement selector="{{AdminProductDownloadableSection.addLinkTitleInput('1')}}" stepKey="seeSecondLinkTitle"/>

        <!-- Go to storefront category page -->
        <amOnPage url="$$createCategory.name$$.html" stepKey="amOnCategoryPage"/>
        <waitForPageLoad stepKey="waitForCategoryPageLoad"/>

        <!-- Assert product in storefront category page -->
        <actionGroup ref="StorefrontCheckProductPriceInCategoryActionGroup" stepKey="StorefrontCheckCategorySimpleProduct">
            <argument name="product" value="DownloadableProduct"/>
        </actionGroup>

        <!-- Assert product in storefront product page -->
        <actionGroup ref="AssertProductNameAndSkuInStorefrontProductPage" stepKey="AssertProductInStorefrontProductPage">
            <argument name="product" value="DownloadableProduct"/>
        </actionGroup>

        <!-- See product links in storefront product page -->
        <scrollTo selector="{{StorefrontDownloadableProductSection.downloadableLinkBlock}}" stepKey="scrollToLinksInStorefront"/>
        <seeElement stepKey="seeFirstDownloadableLink" selector="{{StorefrontDownloadableProductSection.downloadableLinkLabel(downloadableLinkWithMaxDownloads.title)}}"/>
        <seeElement stepKey="seeSecondDownloadableLink" selector="{{StorefrontDownloadableProductSection.downloadableLinkLabel(downloadableLink.title)}}"/>

        <!-- Assert product in stock -->
        <see selector="{{StorefrontProductInfoMainSection.productStockStatus}}" userInput="In Stock" stepKey="seeProductStatusInStoreFront"/>
    </test>
</tests>
